question,database,output,type,cypher,explanation
List the first 5 movies released in 2003.,movies,"<explanation>
This query looks for movies with a released date of 2003 and returns the title of the first 5 movies found. 

1. **MATCH Clause:** We use `MATCH (m:Movie)` to search for all nodes with the label 'Movie'.
2. **WHERE Clause:** We filter these movies to only include those where the `released` property is equal to 2003.
3. **RETURN Clause:** We return the `title` property of the movies.
4. **LIMIT Clause:** We limit the returned results to the first 5.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2003
RETURN m.title
LIMIT 5
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released = 2003
RETURN m.title
LIMIT 5","This query looks for movies with a released date of 2003 and returns the title of the first 5 movies found. 

1. **MATCH Clause:** We use `MATCH (m:Movie)` to search for all nodes with the label 'Movie'.
2. **WHERE Clause:** We filter these movies to only include those where the `released` property is equal to 2003.
3. **RETURN Clause:** We return the `title` property of the movies.
4. **LIMIT Clause:** We limit the returned results to the first 5."
Which movies did Keanu Reeves act in?,movies,"<explanation>
1. We need to find the node with the name 'Keanu Reeves'.
2. Then we traverse outgoing `ACTED_IN` relationships to `Movie` nodes.
3. Finally, we return the titles of the movies.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title","1. We need to find the node with the name 'Keanu Reeves'.
2. Then we traverse outgoing `ACTED_IN` relationships to `Movie` nodes.
3. Finally, we return the titles of the movies.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title
```"
"Who directed the movie ""Something's Gotta Give""?",movies,"<explanation>
This Cypher query looks for a Movie node with the title ""Something's Gotta Give"" and then checks for any incoming DIRECTED relationships from Person nodes.  The name property of any matching Person nodes is then returned. 
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:DIRECTED]-(p:Person)
RETURN p.name","This Cypher query looks for a Movie node with the title ""Something's Gotta Give"" and then checks for any incoming DIRECTED relationships from Person nodes.  The name property of any matching Person nodes is then returned."
"What is the tagline of the movie ""The Matrix Revolutions""?",movies,"<explanation>
This Cypher query first finds the movie with the title ""The Matrix Revolutions"". Then it returns the `tagline` property of that movie. 

1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})** - This line finds the movie node with the title ""The Matrix Revolutions"".
2. **RETURN m.tagline** - This line returns the `tagline` property of the movie node found in the previous step. 
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
RETURN m.tagline
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
RETURN m.tagline","This Cypher query first finds the movie with the title ""The Matrix Revolutions"". Then it returns the `tagline` property of that movie. 

1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})** - This line finds the movie node with the title ""The Matrix Revolutions"".
2. **RETURN m.tagline** - This line returns the `tagline` property of the movie node found in the previous step."
"How many votes did the movie ""Something's Gotta Give"" receive?",movies,"<explanation>
This query is simple - it needs to locate the movie with the title ""Something's Gotta Give"", and return the number of votes it has.

1. **Find the movie:** We start by finding the movie node with the title ""Something's Gotta Give"".
2. **Return the vote count:** Then, we simply return the `votes` property of that movie node.
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
RETURN m.votes
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})
RETURN m.votes","This query is simple - it needs to locate the movie with the title ""Something's Gotta Give"", and return the number of votes it has.

1. **Find the movie:** We start by finding the movie node with the title ""Something's Gotta Give"".
2. **Return the vote count:** Then, we simply return the `votes` property of that movie node."
"Who produced the movie ""Speed Racer""?",movies,"<explanation>
This query starts by finding the movie with the title ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards (incoming direction) to find the person(s) who produced that movie. Finally, it returns the name of the person(s).
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name","This query starts by finding the movie with the title ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards (incoming direction) to find the person(s) who produced that movie. Finally, it returns the name of the person(s)."
"What is the release year of the movie with the tagline ""Everything that has a beginning has an end""?",movies,"<explanation>
This Cypher query looks for a movie with the tagline ""Everything that has a beginning has an end"" and then returns its release year.
1. **MATCH Clause**: It starts by finding a `Movie` node with the specified tagline.
2. **RETURN Clause**:  It returns the `released` property of the found movie.

```cypher
MATCH (m:Movie {tagline: ""Everything that has a beginning has an end""})
RETURN m.released
```
</explanation>
```cypher
MATCH (m:Movie {tagline: ""Everything that has a beginning has an end""})
RETURN m.released
```",Simple Retrieval Queries,"MATCH (m:Movie {tagline: ""Everything that has a beginning has an end""})
RETURN m.released","This Cypher query looks for a movie with the tagline ""Everything that has a beginning has an end"" and then returns its release year.
1. **MATCH Clause**: It starts by finding a `Movie` node with the specified tagline.
2. **RETURN Clause**:  It returns the `released` property of the found movie.

```cypher
MATCH (m:Movie {tagline: ""Everything that has a beginning has an end""})
RETURN m.released
```"
List the first 3 movies with more than 1000 votes.,movies,"<explanation>
This query first finds all movies with more than 1000 votes and then uses `LIMIT` to return only the first 3 from the result set.

1. **MATCH Clause:** We start by matching all movie nodes (`Movie`) in the graph.
2. **WHERE Clause:** We filter the movies to include only those where the `votes` property is greater than 1000.
3. **WITH Clause**: This clause allows us to use `votes` in the subsequent `ORDER BY` clause.
4. **ORDER BY Clause:** We sort the results in descending order based on the number of votes (`votes`).
5. **RETURN Clause:** We return the `title` of each movie.
6. **LIMIT Clause:** We limit the number of results to 3, effectively selecting the top 3 movies with the most votes.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 1000
WITH m
ORDER BY m.votes DESC
RETURN m.title
LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes > 1000
WITH m
ORDER BY m.votes DESC
RETURN m.title
LIMIT 3","This query first finds all movies with more than 1000 votes and then uses `LIMIT` to return only the first 3 from the result set.

1. **MATCH Clause:** We start by matching all movie nodes (`Movie`) in the graph.
2. **WHERE Clause:** We filter the movies to include only those where the `votes` property is greater than 1000.
3. **WITH Clause**: This clause allows us to use `votes` in the subsequent `ORDER BY` clause.
4. **ORDER BY Clause:** We sort the results in descending order based on the number of votes (`votes`).
5. **RETURN Clause:** We return the `title` of each movie.
6. **LIMIT Clause:** We limit the number of results to 3, effectively selecting the top 3 movies with the most votes."
Who are the first 3 people born after 1960?,movies,"<explanation>
This query finds all people born after 1960, orders them by their birth year in ascending order, limits the result set to the first 3 people, and then returns their names. 
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born > 1960
RETURN p.name
ORDER BY p.born
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person)
WHERE p.born > 1960
RETURN p.name
ORDER BY p.born
LIMIT 3","This query finds all people born after 1960, orders them by their birth year in ascending order, limits the result set to the first 3 people, and then returns their names."
Which movies did Nancy Meyers write?,movies,"<explanation>
This query starts with finding the person named ""Nancy Meyers,"" then traverses the `:WROTE` relationships to find all movies written by her. Finally, it returns the titles of those movies. 
</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.title
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.title","This query starts with finding the person named ""Nancy Meyers,"" then traverses the `:WROTE` relationships to find all movies written by her. Finally, it returns the titles of those movies."
"What are the roles of Keanu Reeves in the movie ""Something's Gotta Give""?",movies,"<explanation>
This query starts with finding the movie with the title ""Something's Gotta Give"" and the person named ""Keanu Reeves"". Then it finds the ""ACTED_IN"" relationship connecting them and returns the roles property of that relationship.
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles","This query starts with finding the movie with the title ""Something's Gotta Give"" and the person named ""Keanu Reeves"". Then it finds the ""ACTED_IN"" relationship connecting them and returns the roles property of that relationship."
"Who produced the movie with the tagline ""Speed has no limits""?",movies,"<explanation>
1. **Match the movie node:** Start by matching the movie node with the tagline ""Speed has no limits"". 
2. **Traverse the PRODUCED relationship:** Traverse the ""PRODUCED"" relationship in the reverse direction (incoming) to find the person who produced the movie.
3. **Return the person's name:** Return the ""name"" property of the person node. 

```cypher
MATCH (m:Movie {tagline: ""Speed has no limits""})
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {tagline: ""Speed has no limits""})
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {tagline: ""Speed has no limits""})
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name","1. **Match the movie node:** Start by matching the movie node with the tagline ""Speed has no limits"". 
2. **Traverse the PRODUCED relationship:** Traverse the ""PRODUCED"" relationship in the reverse direction (incoming) to find the person who produced the movie.
3. **Return the person's name:** Return the ""name"" property of the person node. 

```cypher
MATCH (m:Movie {tagline: ""Speed has no limits""})
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```"
Which movies released in 2003 have more than 50 votes?,movies,"<explanation>
This Cypher query identifies movies released in 2003 with more than 50 votes.

1. **MATCH Clause**: We start by finding all `Movie` nodes.
2. **WHERE Clause**: We filter these movies to only include those released in 2003 and having more than 50 votes.
3. **RETURN Clause**:  We return the titles of the movies that satisfy these criteria. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2003 AND m.votes > 50
RETURN m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released = 2003 AND m.votes > 50
RETURN m.title","This Cypher query identifies movies released in 2003 with more than 50 votes.

1. **MATCH Clause**: We start by finding all `Movie` nodes.
2. **WHERE Clause**: We filter these movies to only include those released in 2003 and having more than 50 votes.
3. **RETURN Clause**:  We return the titles of the movies that satisfy these criteria."
List the top 5 movies with the highest number of votes.,movies,"<explanation>
This query starts with all Movie nodes and orders them in descending order based on their `votes` property. It then uses `LIMIT` to return only the top 5 movies with the highest number of votes.

```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5
```
<explanation>",Simple Retrieval Queries,"MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",
Who are the people born before 1960?,movies,"<explanation>This query starts with all Person nodes and filters to those with a 'born' property less than 1960. It then returns their names. </explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1960
RETURN p.name
```",Simple Retrieval Queries,"MATCH (p:Person)
WHERE p.born < 1960
RETURN p.name",This query starts with all Person nodes and filters to those with a 'born' property less than 1960. It then returns their names.
"Which movies have ""Matrix"" in their title?",movies,"<explanation>This query looks for movies with the word ""Matrix"" in the title.
1. **MATCH Clause**: We start by matching all Movie nodes.
2. **WHERE Clause**: We filter these movies to only include those whose title contains the word ""Matrix"".
3. **RETURN Clause**: We return the titles of the movies that meet this criteria.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.title","This query looks for movies with the word ""Matrix"" in the title.
1. **MATCH Clause**: We start by matching all Movie nodes.
2. **WHERE Clause**: We filter these movies to only include those whose title contains the word ""Matrix"".
3. **RETURN Clause**: We return the titles of the movies that meet this criteria."
What are the taglines of the movies released after 2000?,movies,"<explanation>
This query starts with all Movie nodes and filters by the released property to only include movies released after 2000. 
It then returns the tagline property for each of those movies. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.tagline
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.tagline","This query starts with all Movie nodes and filters by the released property to only include movies released after 2000. 
It then returns the tagline property for each of those movies."
List the first 3 people who acted in movies released in 2003.,movies,"<explanation>
This query will first find all movies released in 2003. Then, it will find all people who acted in those movies. Finally, it will return the first 3 people found and their names. 

1. **Find movies released in 2003**:
   - We start by matching all movie nodes (`MATCH (m:Movie)`)
   - Then, we filter for movies released in 2003 (`WHERE m.released = 2003`).

2. **Find people who acted in those movies**: 
   - We use the `ACTED_IN` relationship to find the people who acted in the movies we selected in the previous step.

3. **Return the first 3 names**:
   - We use `RETURN p.name` to specify that we only want the name of each person.
   - We use `LIMIT 3` to limit the results to the first 3 people.

```cypher
MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3","This query will first find all movies released in 2003. Then, it will find all people who acted in those movies. Finally, it will return the first 3 people found and their names. 

1. **Find movies released in 2003**:
   - We start by matching all movie nodes (`MATCH (m:Movie)`)
   - Then, we filter for movies released in 2003 (`WHERE m.released = 2003`).

2. **Find people who acted in those movies**: 
   - We use the `ACTED_IN` relationship to find the people who acted in the movies we selected in the previous step.

3. **Return the first 3 names**:
   - We use `RETURN p.name` to specify that we only want the name of each person.
   - We use `LIMIT 3` to limit the results to the first 3 people.

```cypher
MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3
```"
Who directed movies with more than 100 votes?,movies,"<explanation>
This query identifies people who directed movies with more than 100 votes.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)** - It starts by finding all people directly connected to movies by the DIRECTED relationship.
2. **WHERE m.votes > 100** - This filters for movies with over 100 votes.
3. **RETURN DISTINCT p.name** -  Finally, it returns the names of the directors. ""DISTINCT"" ensures each director is listed only once even if they directed multiple qualifying movies. 

</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 100
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 100
RETURN DISTINCT p.name","This query identifies people who directed movies with more than 100 votes.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)** - It starts by finding all people directly connected to movies by the DIRECTED relationship.
2. **WHERE m.votes > 100** - This filters for movies with over 100 votes.
3. **RETURN DISTINCT p.name** -  Finally, it returns the names of the directors. ""DISTINCT"" ensures each director is listed only once even if they directed multiple qualifying movies."
What are the titles of movies produced by Joel Silver?,movies,"<explanation>
This query starts by finding the person node with the name 'Joel Silver'. Then, it traverses the `PRODUCED` relationships from that node to find all movies produced by Joel Silver. Finally, it returns the titles of those movies. 
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
RETURN m.title
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
RETURN m.title","This query starts by finding the person node with the name 'Joel Silver'. Then, it traverses the `PRODUCED` relationships from that node to find all movies produced by Joel Silver. Finally, it returns the titles of those movies."
"Which person acted in both ""Something's Gotta Give"" and ""The Matrix Revolutions""?",movies,"<explanation>
This query identifies a person who acted in both ""Something's Gotta Give"" and ""The Matrix Revolutions""

1. **Match the movies:** It starts by matching the two movies by their titles.
2. **Match actors:** For each movie, it finds all actors connected to the movie through the `ACTED_IN` relationship.
3. **Find the common actor:** The `WITH` clause collects all actors for each movie, and the `WHERE` clause filters for actors present in both result sets.
4. **Return the actor's name:** The query returns the `name` of the common actor.

```cypher
MATCH (movie1:Movie {title: ""Something's Gotta Give""})
MATCH (movie2:Movie {title: ""The Matrix Revolutions""})
MATCH (movie1)<-[:ACTED_IN]-(actor1:Person)
MATCH (movie2)<-[:ACTED_IN]-(actor2:Person)
WITH movie1, movie2, collect(actor1) AS actors1, collect(actor2) AS actors2
WHERE any(actor IN actors1 WHERE actor IN actors2)
RETURN DISTINCT actors1.name
```
</explanation>
```cypher
MATCH (movie1:Movie {title: ""Something's Gotta Give""})
MATCH (movie2:Movie {title: ""The Matrix Revolutions""})
MATCH (movie1)<-[:ACTED_IN]-(actor1:Person)
MATCH (movie2)<-[:ACTED_IN]-(actor2:Person)
WITH movie1, movie2, collect(actor1) AS actors1, collect(actor2) AS actors2
WHERE any(actor IN actors1 WHERE actor IN actors2)
RETURN DISTINCT actors1.name
```",Simple Retrieval Queries,"MATCH (movie1:Movie {title: ""Something's Gotta Give""})
MATCH (movie2:Movie {title: ""The Matrix Revolutions""})
MATCH (movie1)<-[:ACTED_IN]-(actor1:Person)
MATCH (movie2)<-[:ACTED_IN]-(actor2:Person)
WITH movie1, movie2, collect(actor1) AS actors1, collect(actor2) AS actors2
WHERE any(actor IN actors1 WHERE actor IN actors2)
RETURN DISTINCT actors1.name","This query identifies a person who acted in both ""Something's Gotta Give"" and ""The Matrix Revolutions""

1. **Match the movies:** It starts by matching the two movies by their titles.
2. **Match actors:** For each movie, it finds all actors connected to the movie through the `ACTED_IN` relationship.
3. **Find the common actor:** The `WITH` clause collects all actors for each movie, and the `WHERE` clause filters for actors present in both result sets.
4. **Return the actor's name:** The query returns the `name` of the common actor.

```cypher
MATCH (movie1:Movie {title: ""Something's Gotta Give""})
MATCH (movie2:Movie {title: ""The Matrix Revolutions""})
MATCH (movie1)<-[:ACTED_IN]-(actor1:Person)
MATCH (movie2)<-[:ACTED_IN]-(actor2:Person)
WITH movie1, movie2, collect(actor1) AS actors1, collect(actor2) AS actors2
WHERE any(actor IN actors1 WHERE actor IN actors2)
RETURN DISTINCT actors1.name
```"
List the first 5 movies released between 1990 and 2010.,movies,"<explanation>
This query looks for movies released between 1990 and 2010 and returns the titles of the first 5 found. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.released >= 1990 AND m.released <= 2010**: This line filters the matched movies to only include those released between 1990 and 2010.
3. **RETURN m.title**: This line specifies that we want to return the title of each movie.
4. **LIMIT 5**: This line limits the number of results returned to 5.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2010
RETURN m.title
LIMIT 5
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2010
RETURN m.title
LIMIT 5","This query looks for movies released between 1990 and 2010 and returns the titles of the first 5 found. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.released >= 1990 AND m.released <= 2010**: This line filters the matched movies to only include those released between 1990 and 2010.
3. **RETURN m.title**: This line specifies that we want to return the title of each movie.
4. **LIMIT 5**: This line limits the number of results returned to 5."
Who are the people who have directed or produced a movie?,movies,"<explanation>
This query starts with a `MATCH` clause that looks for all people who have either directed or produced a movie. This is accomplished using a pattern that includes both relationship types (`DIRECTED` and `PRODUCED`). We then use `WITH` clause to avoid implicit aggregation and return the names of the people found.

```cypher
MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m:Movie)
WITH p
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m:Movie)
WITH p
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m:Movie)
WITH p
RETURN DISTINCT p.name","This query starts with a `MATCH` clause that looks for all people who have either directed or produced a movie. This is accomplished using a pattern that includes both relationship types (`DIRECTED` and `PRODUCED`). We then use `WITH` clause to avoid implicit aggregation and return the names of the people found.

```cypher
MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m:Movie)
WITH p
RETURN DISTINCT p.name
```"
What are the taglines of movies with more than 500 votes?,movies,"<explanation>
This query starts by matching all Movie nodes. Then it filters these nodes by those with a `votes` property value greater than 500. Finally, the query returns the `tagline` property of the movies that passed the filter. 

```cypher
MATCH (m:Movie)
WHERE m.votes > 500
RETURN m.tagline
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 500
RETURN m.tagline
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes > 500
RETURN m.tagline","This query starts by matching all Movie nodes. Then it filters these nodes by those with a `votes` property value greater than 500. Finally, the query returns the `tagline` property of the movies that passed the filter. 

```cypher
MATCH (m:Movie)
WHERE m.votes > 500
RETURN m.tagline
```"
"Which movies were released in the same year as ""The Matrix Revolutions""?",movies,"<explanation>
1. **Find the movie with the title ""The Matrix Revolutions.""** We'll use `MATCH` to locate this movie node.
2. **Get the release year of ""The Matrix Revolutions.""**  We'll access the `released` property of the movie node.
3. **Find movies released in the same year.** We'll use another `MATCH` clause to find movies where the `released` property matches the year we obtained in the previous step.
4. **Return the titles of those movies.** We'll use `RETURN` to display the `title` property of the movies found.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS releaseYear
MATCH (otherMovies:Movie {released: releaseYear})
RETURN otherMovies.title AS movieTitle
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS releaseYear
MATCH (otherMovies:Movie {released: releaseYear})
RETURN otherMovies.title AS movieTitle
```
",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS releaseYear
MATCH (otherMovies:Movie {released: releaseYear})
RETURN otherMovies.title AS movieTitle","1. **Find the movie with the title ""The Matrix Revolutions.""** We'll use `MATCH` to locate this movie node.
2. **Get the release year of ""The Matrix Revolutions.""**  We'll access the `released` property of the movie node.
3. **Find movies released in the same year.** We'll use another `MATCH` clause to find movies where the `released` property matches the year we obtained in the previous step.
4. **Return the titles of those movies.** We'll use `RETURN` to display the `title` property of the movies found.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS releaseYear
MATCH (otherMovies:Movie {released: releaseYear})
RETURN otherMovies.title AS movieTitle
```"
List the top 3 people with the highest number of movies acted in.,movies,"<explanation>
This query identifies the top 3 people who have acted in the most movies. 

1. **MATCH and Count Movies:** It starts by matching all people (`p`) who have acted in movies (`m`) and counts the number of movies each person acted in using `size(collect(m))`.
2. **Aggregation and Ordering:** It then uses `WITH`  to aggregate and order the results in descending order of the movie count.
3. **Limiting Results:** Finally, it limits the output to the top 3 people and returns their names and the corresponding movie count.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, size(collect(m)) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN p.name AS personName, movieCount
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, size(collect(m)) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN p.name AS personName, movieCount
```
",Simple Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, size(collect(m)) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN p.name AS personName, movieCount","This query identifies the top 3 people who have acted in the most movies. 

1. **MATCH and Count Movies:** It starts by matching all people (`p`) who have acted in movies (`m`) and counts the number of movies each person acted in using `size(collect(m))`.
2. **Aggregation and Ordering:** It then uses `WITH`  to aggregate and order the results in descending order of the movie count.
3. **Limiting Results:** Finally, it limits the output to the top 3 people and returns their names and the corresponding movie count.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, size(collect(m)) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN p.name AS personName, movieCount
```"
Who wrote movies released before 2000?,movies,"<explanation>
1. We need to find `Person` nodes who have a `WROTE` relationship with `Movie` nodes.
2. We need to filter those `Movie` nodes to only include those released before the year 2000.
3. We will return the `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
RETURN p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
RETURN p.name","1. We need to find `Person` nodes who have a `WROTE` relationship with `Movie` nodes.
2. We need to filter those `Movie` nodes to only include those released before the year 2000.
3. We will return the `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
RETURN p.name
```"
What are the titles of movies directed by people born before 1955?,movies,"<explanation>
This query first finds all people born before 1955.  Then, for each person, it finds all the movies they directed. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This matches all Person nodes that have a DIRECTED relationship to a Movie node.
2. **WHERE p.born < 1955**: This filters the Person nodes to only include those born before 1955.
3. **RETURN m.title**: This returns the title property of each Movie node found.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title
```",Simple Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title","This query first finds all people born before 1955.  Then, for each person, it finds all the movies they directed. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This matches all Person nodes that have a DIRECTED relationship to a Movie node.
2. **WHERE p.born < 1955**: This filters the Person nodes to only include those born before 1955.
3. **RETURN m.title**: This returns the title property of each Movie node found."
Which people acted in movies produced by Joel Silver?,movies,"<explanation>
1. **Find Joel Silver:** Start by finding the `Person` node with the `name` ""Joel Silver"".
2. **Movies produced by Joel Silver:** Traverse the `PRODUCED` relationships from Joel Silver to find all the `Movie` nodes he produced.
3. **People who acted in those movies:** For each movie, traverse the `ACTED_IN` relationships in reverse to find all the `Person` nodes who acted in them.
4. **Return the actors:** Return the `name` property of each `Person` found in step 3, representing the actors who acted in movies produced by Joel Silver.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT a.name
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT a.name
```",Simple Retrieval Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT a.name","1. **Find Joel Silver:** Start by finding the `Person` node with the `name` ""Joel Silver"".
2. **Movies produced by Joel Silver:** Traverse the `PRODUCED` relationships from Joel Silver to find all the `Movie` nodes he produced.
3. **People who acted in those movies:** For each movie, traverse the `ACTED_IN` relationships in reverse to find all the `Person` nodes who acted in them.
4. **Return the actors:** Return the `name` property of each `Person` found in step 3, representing the actors who acted in movies produced by Joel Silver.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT a.name
```"
"List the first 5 movies with ""the"" in their title.",movies,"<explanation>
This Cypher query initially finds all movies that contain ""the"" in their title (case-insensitive). Then, it limits the results to the first 5 using `LIMIT`.

```cypher
MATCH (m:Movie)
WHERE toLower(m.title) CONTAINS 'the'
RETURN m.title
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE toLower(m.title) CONTAINS 'the'
RETURN m.title
LIMIT 5
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE toLower(m.title) CONTAINS 'the'
RETURN m.title
LIMIT 5","This Cypher query initially finds all movies that contain ""the"" in their title (case-insensitive). Then, it limits the results to the first 5 using `LIMIT`.

```cypher
MATCH (m:Movie)
WHERE toLower(m.title) CONTAINS 'the'
RETURN m.title
LIMIT 5
```"
Who directed movies with less than 100 votes?,movies,"<explanation>
This query starts with finding all movies with less than 100 votes, then matching the directors of those movies and returning the names of the directors.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable 'm'.
2. **WHERE m.votes < 100**: This line filters the movies, keeping only those where the 'votes' property is less than 100.
3. **MATCH (p:Person)-[:DIRECTED]->(m)**: This line looks for relationships of type 'DIRECTED' starting from a node with the label 'Person' and ending at the previously filtered movies ('m'). The person nodes are assigned to the variable 'p'.
4. **RETURN DISTINCT p.name**: Finally, this line returns the distinct names of the directors ('p.name') to avoid duplicates.

```cypher
MATCH (m:Movie)
WHERE m.votes < 100
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes < 100
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes < 100
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name","This query starts with finding all movies with less than 100 votes, then matching the directors of those movies and returning the names of the directors.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable 'm'.
2. **WHERE m.votes < 100**: This line filters the movies, keeping only those where the 'votes' property is less than 100.
3. **MATCH (p:Person)-[:DIRECTED]->(m)**: This line looks for relationships of type 'DIRECTED' starting from a node with the label 'Person' and ending at the previously filtered movies ('m'). The person nodes are assigned to the variable 'p'.
4. **RETURN DISTINCT p.name**: Finally, this line returns the distinct names of the directors ('p.name') to avoid duplicates.

```cypher
MATCH (m:Movie)
WHERE m.votes < 100
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name
```"
What are the release years of movies written by Nancy Meyers?,movies,"<explanation>
1. We need to find movies that are related to a person with the name 'Nancy Meyers' by the `:WROTE` relationship.
2. Then we need to return the `released` property of those movies.

```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.released
```
</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.released
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.released","1. We need to find movies that are related to a person with the name 'Nancy Meyers' by the `:WROTE` relationship.
2. Then we need to return the `released` property of those movies.

```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
RETURN m.released
```"
Which people acted in movies with more than 1000 votes?,movies,"<explanation>
This query starts by matching all ACTED_IN relationships. It then filters these relationships to only include those where the movie connected to the relationship has more than 1000 votes. Finally, it returns the names of all people connected to the filtered relationships.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 1000
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 1000
RETURN DISTINCT p.name","This query starts by matching all ACTED_IN relationships. It then filters these relationships to only include those where the movie connected to the relationship has more than 1000 votes. Finally, it returns the names of all people connected to the filtered relationships."
List the first 3 people born between 1950 and 1960.,movies,"<explanation>
This query looks for `Person` nodes with the `born` property between 1950 and 1960, orders them by `born` property in ascending order and limits the result to the first 3 nodes.
</explanation>
```cypher
MATCH (p:Person)
WHERE 1950 <= p.born <= 1960
RETURN p.name
ORDER BY p.born
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person)
WHERE 1950 <= p.born <= 1960
RETURN p.name
ORDER BY p.born
LIMIT 3","This query looks for `Person` nodes with the `born` property between 1950 and 1960, orders them by `born` property in ascending order and limits the result to the first 3 nodes."
Who produced movies released after 2005?,movies,"<explanation>
1. **Start with the Movie nodes:** Match all movies (m:Movie).
2. **Filter by release year:** Use a WHERE clause to keep only movies released after 2005 (m.released > 2005).
3. **Traverse the PRODUCED relationship:** Match the persons (p:Person) who produced those movies (p)-[:PRODUCED]->(m).
4. **Return the names:** Return the distinct names of the persons (DISTINCT p.name).
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name","1. **Start with the Movie nodes:** Match all movies (m:Movie).
2. **Filter by release year:** Use a WHERE clause to keep only movies released after 2005 (m.released > 2005).
3. **Traverse the PRODUCED relationship:** Match the persons (p:Person) who produced those movies (p)-[:PRODUCED]->(m).
4. **Return the names:** Return the distinct names of the persons (DISTINCT p.name)."
"What are the titles of movies with taglines containing the word ""end""?",movies,"<explanation>
This query looks for movies with the word ""end"" in the tagline. 

1. **MATCH (m:Movie)** - We start by looking at all nodes with the label ""Movie"".
2. **WHERE m.tagline CONTAINS 'end'** - We then filter down to only movies where the tagline property contains ""end"".
3. **RETURN m.title** - Finally, for all movies matching our criteria, we return the title.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN m.title","This query looks for movies with the word ""end"" in the tagline. 

1. **MATCH (m:Movie)** - We start by looking at all nodes with the label ""Movie"".
2. **WHERE m.tagline CONTAINS 'end'** - We then filter down to only movies where the tagline property contains ""end"".
3. **RETURN m.title** - Finally, for all movies matching our criteria, we return the title."
Which people acted in movies directed by people born before 1950?,movies,"<explanation>
This query identifies all people who acted in movies directed by individuals born before 1950. 

1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)**: We start by matching two patterns: 
    - People who acted in movies.
    - Directors who directed those movies.
2. **WHERE director.born < 1950**: This filters for directors born before 1950.
3. **RETURN DISTINCT person.name**: Finally, we return the names of the actors, ensuring distinct results to avoid duplicates. 

</explanation>
```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1950
RETURN DISTINCT person.name
```",Simple Retrieval Queries,"MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1950
RETURN DISTINCT person.name","This query identifies all people who acted in movies directed by individuals born before 1950. 

1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)**: We start by matching two patterns: 
    - People who acted in movies.
    - Directors who directed those movies.
2. **WHERE director.born < 1950**: This filters for directors born before 1950.
3. **RETURN DISTINCT person.name**: Finally, we return the names of the actors, ensuring distinct results to avoid duplicates."
"What are the first 3 reviews' summaries for the movie ""Something's Gotta Give""?",movies,"<explanation>
This query looks for a movie with the title ""Something's Gotta Give"". Then, it retrieves the reviews associated with that movie and returns the summaries of the first three reviews. 
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
RETURN r.summary
LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
RETURN r.summary
LIMIT 3","This query looks for a movie with the title ""Something's Gotta Give"". Then, it retrieves the reviews associated with that movie and returns the summaries of the first three reviews."
"What is the average rating for the movie ""The Matrix Revolutions""?",movies,"<explanation>
1. **Match the movie with the title ""The Matrix Revolutions"".** 
2. **Match the ""REVIEWED"" relationships connected to the movie.**
3. **Calculate the average rating using the `avg` function on the `rating` property of the `REVIEWED` relationship.**
4. **Return the average rating.**
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating) AS average_rating
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating) AS average_rating","1. **Match the movie with the title ""The Matrix Revolutions"".** 
2. **Match the ""REVIEWED"" relationships connected to the movie.**
3. **Calculate the average rating using the `avg` function on the `rating` property of the `REVIEWED` relationship.**
4. **Return the average rating.**"
"Who reviewed the movie ""Something's Gotta Give"" with a rating above 80?",movies,"<explanation>
This Cypher query identifies people who gave the movie ""Something's Gotta Give"" a rating above 80.

1. **MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)**: This part finds the movie with the title ""Something's Gotta Give"" and looks for any ""REVIEWED"" relationships connected to it, originating from any ""Person"" nodes.
2. **WHERE r.rating > 80**: This filters the ""REVIEWED"" relationships, keeping only those where the ""rating"" property is greater than 80.
3. **RETURN p.name**: Finally, the query returns the ""name"" property of the ""Person"" nodes who meet the criteria.

In essence, the query first locates all reviews for the specified movie and then narrows down to those with a rating greater than 80. The names of the reviewers associated with these high-rated reviews are then returned as the result.
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 80
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 80
RETURN p.name","This Cypher query identifies people who gave the movie ""Something's Gotta Give"" a rating above 80.

1. **MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)**: This part finds the movie with the title ""Something's Gotta Give"" and looks for any ""REVIEWED"" relationships connected to it, originating from any ""Person"" nodes.
2. **WHERE r.rating > 80**: This filters the ""REVIEWED"" relationships, keeping only those where the ""rating"" property is greater than 80.
3. **RETURN p.name**: Finally, the query returns the ""name"" property of the ""Person"" nodes who meet the criteria.

In essence, the query first locates all reviews for the specified movie and then narrows down to those with a rating greater than 80. The names of the reviewers associated with these high-rated reviews are then returned as the result."
"List the first 3 people who reviewed movies with the summary ""A solid romp"".",movies,"<explanation>
This query first finds all the movies with the review summary ""A solid romp"". Then, it finds all the people who reviewed those movies. Finally, it returns the first three distinct reviewers.

1. **Find movies with the specific review summary:**
   - `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)`: This matches all movies (`m`) that have a `REVIEWED` relationship (`r`) with a person (`p`).
   - `WHERE r.summary = ""A solid romp""`: This filters for movies where the review summary is ""A solid romp"".

2. **Find the reviewers:**
   - `WITH DISTINCT p`: This passes the distinct reviewers (`p`) to the next part of the query.

3. **Limit to the first three reviewers:**
   - `RETURN p LIMIT 3`: This returns the first three reviewers.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH DISTINCT p
RETURN p LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH DISTINCT p
RETURN p LIMIT 3","This query first finds all the movies with the review summary ""A solid romp"". Then, it finds all the people who reviewed those movies. Finally, it returns the first three distinct reviewers.

1. **Find movies with the specific review summary:**
   - `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)`: This matches all movies (`m`) that have a `REVIEWED` relationship (`r`) with a person (`p`).
   - `WHERE r.summary = ""A solid romp""`: This filters for movies where the review summary is ""A solid romp"".

2. **Find the reviewers:**
   - `WITH DISTINCT p`: This passes the distinct reviewers (`p`) to the next part of the query.

3. **Limit to the first three reviewers:**
   - `RETURN p LIMIT 3`: This returns the first three reviewers."
"What are the ratings for the movie ""The Matrix Revolutions"" given by people born after 1960?",movies,"<explanation>
1. **Match the movie node:** We start by finding the movie with the title ""The Matrix Revolutions"".
2. **Match the reviewers:** We then match all persons who have a `REVIEWED` relationship with the movie and filter those people by birth year.
3. **Return the ratings:** Finally, we return the ratings given by these people.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:REVIEWED]->(m) WHERE p.born > 1960
RETURN p.name AS reviewer, m.title AS movie, p.born AS birth_year
```
</explanation>",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:REVIEWED]->(m) WHERE p.born > 1960
RETURN p.name AS reviewer, m.title AS movie, p.born AS birth_year","1. **Match the movie node:** We start by finding the movie with the title ""The Matrix Revolutions"".
2. **Match the reviewers:** We then match all persons who have a `REVIEWED` relationship with the movie and filter those people by birth year.
3. **Return the ratings:** Finally, we return the ratings given by these people.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:REVIEWED]->(m) WHERE p.born > 1960
RETURN p.name AS reviewer, m.title AS movie, p.born AS birth_year
```"
"Which movies have been reviewed with the summary ""Pretty funny at times""?",movies,"<explanation>
This query looks for all movies that have a `REVIEWED` relationship with a `summary` property equal to ""Pretty funny at times"".

1. **MATCH** the `REVIEWED` relationship connected to a `Movie` node.
2. **WHERE** the `summary` property of the `REVIEWED` relationship is ""Pretty funny at times"".
3. **RETURN** the `title` property of the `Movie` node. 

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times""
RETURN m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times""
RETURN m.title","This query looks for all movies that have a `REVIEWED` relationship with a `summary` property equal to ""Pretty funny at times"".

1. **MATCH** the `REVIEWED` relationship connected to a `Movie` node.
2. **WHERE** the `summary` property of the `REVIEWED` relationship is ""Pretty funny at times"".
3. **RETURN** the `title` property of the `Movie` node."
"Who gave the highest rating to the movie ""Something's Gotta Give""?",movies,"<explanation>
1. We need to find the movie with the title ""Something's Gotta Give"".
2. We need to find the person who reviewed this movie.
3. We need to filter the reviewers to find the one who gave the highest rating. 

</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WITH  p, MAX(r.rating) AS max_rating
MATCH (p:Person)-[r:REVIEWED]->(:Movie {title: ""Something's Gotta Give""})
WHERE r.rating = max_rating
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WITH  p, MAX(r.rating) AS max_rating
MATCH (p:Person)-[r:REVIEWED]->(:Movie {title: ""Something's Gotta Give""})
WHERE r.rating = max_rating
RETURN p.name","1. We need to find the movie with the title ""Something's Gotta Give"".
2. We need to find the person who reviewed this movie.
3. We need to filter the reviewers to find the one who gave the highest rating."
What are the summaries of reviews for movies released in 2003?,movies,"<explanation>
This Cypher query answers the question by:
1. Matching all `Movie` nodes with the `released` property equal to 2003
2. Traversing the `REVIEWED` relationship from those movies to `Person` nodes
3. Returning the `summary` property of each `REVIEWED` relationship.
</explanation>
```cypher
MATCH (m:Movie{released: 2003})<-[r:REVIEWED]-()
RETURN r.summary
```",Simple Retrieval Queries,"MATCH (m:Movie{released: 2003})<-[r:REVIEWED]-()
RETURN r.summary","This Cypher query answers the question by:
1. Matching all `Movie` nodes with the `released` property equal to 2003
2. Traversing the `REVIEWED` relationship from those movies to `Person` nodes
3. Returning the `summary` property of each `REVIEWED` relationship."
List the first 3 movies reviewed by Keanu Reeves.,movies,"<explanation>
This query starts with finding the person named Keanu Reeves. Then it traverses the `REVIEWED` relationships outgoing from that person node.  We will then return the `title` property of the `Movie` nodes returned.  We will limit the result to the first 3 using `LIMIT`.
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
RETURN m.title
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
RETURN m.title
LIMIT 3",This query starts with finding the person named Keanu Reeves. Then it traverses the `REVIEWED` relationships outgoing from that person node.  We will then return the `title` property of the `Movie` nodes returned.  We will limit the result to the first 3 using `LIMIT`.
Which people reviewed movies with a rating between 70 and 90?,movies,"<explanation>
This query looks for all people who reviewed a movie with a rating between 70 and 90.  
1. We match on the `REVIEWED` relationship. 
2. We filter on the `rating` property being between 70 and 90.
3. We return the names of the people.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=90
RETURN DISTINCT p.name 
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=90
RETURN DISTINCT p.name 
```",Simple Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=90
RETURN DISTINCT p.name","This query looks for all people who reviewed a movie with a rating between 70 and 90.  
1. We match on the `REVIEWED` relationship. 
2. We filter on the `rating` property being between 70 and 90.
3. We return the names of the people.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=90
RETURN DISTINCT p.name 
```"
What is the average rating given by people born before 1960?,movies,"<explanation>
1. **MATCH** all Person nodes with born property less than 1960
2. **MATCH** relationships to reviewed movies
3. **WITH** average rating
4. **RETURN** the average rating

```cypher
MATCH (p:Person {born: {lt:1960}})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (p:Person {born: {lt:1960}})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Simple Retrieval Queries,"MATCH (p:Person {born: {lt:1960}})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **MATCH** all Person nodes with born property less than 1960
2. **MATCH** relationships to reviewed movies
3. **WITH** average rating
4. **RETURN** the average rating

```cypher
MATCH (p:Person {born: {lt:1960}})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
"Who reviewed the movie ""The Matrix Revolutions"" with a summary containing the word ""amazing""?",movies,"<explanation>
1. **Match the movie node**: We'll start by finding the movie with the title ""The Matrix Revolutions"".
2. **Match the REVIEWED relationship**: We'll then traverse the `REVIEWED` relationships originating from `Person` nodes to this movie.
3. **Filter on review summary**: We'll use a `WHERE` clause to filter for reviews that contain the word ""amazing"" in the `summary` property.
4. **Return the reviewers**: Finally, we'll return the `name` property of the `Person` nodes who wrote those reviews.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS ""amazing""
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS ""amazing""
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS ""amazing""
RETURN p.name","1. **Match the movie node**: We'll start by finding the movie with the title ""The Matrix Revolutions"".
2. **Match the REVIEWED relationship**: We'll then traverse the `REVIEWED` relationships originating from `Person` nodes to this movie.
3. **Filter on review summary**: We'll use a `WHERE` clause to filter for reviews that contain the word ""amazing"" in the `summary` property.
4. **Return the reviewers**: Finally, we'll return the `name` property of the `Person` nodes who wrote those reviews.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS ""amazing""
RETURN p.name
```"
List the first 3 movies with at least 3 reviews.,movies,"<explanation>
This Cypher query identifies movies with at least three reviews and returns the first three encountered. 

1. **MATCH**: We start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship.
2. **WITH, WHERE, and size()**: We use `WITH` to perform an aggregation, counting the number of reviews (`r`) for each movie (`m`) using `size(collect(r))`. We filter for movies with at least 3 reviews (`WHERE size(collect(r)) >= 3`).
3. **RETURN and LIMIT**: Finally, we return the title of the movie (`m.title`) and limit the result set to the first 3 movies encountered using `LIMIT 3`.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, size(collect(r)) AS review_count
WHERE review_count >= 3
RETURN m.title
LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, size(collect(r)) AS review_count
WHERE review_count >= 3
RETURN m.title
LIMIT 3","This Cypher query identifies movies with at least three reviews and returns the first three encountered. 

1. **MATCH**: We start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship.
2. **WITH, WHERE, and size()**: We use `WITH` to perform an aggregation, counting the number of reviews (`r`) for each movie (`m`) using `size(collect(r))`. We filter for movies with at least 3 reviews (`WHERE size(collect(r)) >= 3`).
3. **RETURN and LIMIT**: Finally, we return the title of the movie (`m.title`) and limit the result set to the first 3 movies encountered using `LIMIT 3`."
Which movies received a rating of 100?,movies,"<explanation>
This query starts with all `Person` nodes. Then it traverses the `REVIEWED` relationship. It filters for reviews with a `rating` of 100 and finally returns the titles of those movies. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title
```",Simple Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title","This query starts with all `Person` nodes. Then it traverses the `REVIEWED` relationship. It filters for reviews with a `rating` of 100 and finally returns the titles of those movies. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title
```"
Who gave the lowest rating to movies released in 2003?,movies,"<explanation>
This query starts with finding all movies released in 2003. Then, it matches to people who reviewed those movies. Finally, it orders the results by rating in ascending order, limits the result to the top 1, and returns the name of the person who gave the lowest rating.

```cypher
MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-(p:Person)
WITH p, r ORDER BY r.rating ASC
LIMIT 1
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-(p:Person)
WITH p, r ORDER BY r.rating ASC
LIMIT 1
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-(p:Person)
WITH p, r ORDER BY r.rating ASC
LIMIT 1
RETURN p.name","This query starts with finding all movies released in 2003. Then, it matches to people who reviewed those movies. Finally, it orders the results by rating in ascending order, limits the result to the top 1, and returns the name of the person who gave the lowest rating.

```cypher
MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-(p:Person)
WITH p, r ORDER BY r.rating ASC
LIMIT 1
RETURN p.name
```"
What are the summaries of reviews with a rating higher than 95?,movies,"<explanation>
This query looks for all reviews with a rating property higher than 95 and returns the summary of those reviews.

1. **MATCH** the `REVIEWED` relationship, looking for relationships with a rating greater than 95.
2. **RETURN** the `summary` property of the `REVIEWED` relationship.
</explanation>
```cypher
MATCH ()-[r:REVIEWED]->()
WHERE r.rating > 95
RETURN r.summary
```",Simple Retrieval Queries,"MATCH ()-[r:REVIEWED]->()
WHERE r.rating > 95
RETURN r.summary","This query looks for all reviews with a rating property higher than 95 and returns the summary of those reviews.

1. **MATCH** the `REVIEWED` relationship, looking for relationships with a rating greater than 95.
2. **RETURN** the `summary` property of the `REVIEWED` relationship."
List the top 3 people who wrote the most reviews.,movies,"<explanation>
This query needs to identify the people who wrote the most movie reviews and return the top 3. We can achieve this by:

1. **MATCH** people and their reviewed movies using the `REVIEWED` relationship.
2. **WITH** people and count the number of their reviews using `count(movie)`.
3. **ORDER BY** the count of reviews in descending order.
4. **RETURN** the top 3 reviewers using `LIMIT`.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS personName, reviewCount
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS personName, reviewCount
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS personName, reviewCount
LIMIT 3","This query needs to identify the people who wrote the most movie reviews and return the top 3. We can achieve this by:

1. **MATCH** people and their reviewed movies using the `REVIEWED` relationship.
2. **WITH** people and count the number of their reviews using `count(movie)`.
3. **ORDER BY** the count of reviews in descending order.
4. **RETURN** the top 3 reviewers using `LIMIT`.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS personName, reviewCount
LIMIT 3
```"
"Which movies have reviews with both ""funny"" and ""compelling"" summaries?",movies,"<explanation>
This query first finds all reviews that contain the word ""funny"" and all reviews that contain the word ""compelling"". Then it finds the movies connected to both a ""funny"" review and a ""compelling"" review. 

1. **Find reviews containing ""funny""**: Locate all `REVIEWED` relationships where the `summary` property contains the word ""funny"".
2. **Find reviews containing ""compelling""**: Similarly, locate all `REVIEWED` relationships where the `summary` property contains the word ""compelling"".
3. **Identify movies with both**: Find movies that have both types of reviews connected to them. We achieve this by using `WITH` clause to separate our matches, then matching on the Movie nodes.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) 
WHERE toLower(r.summary) CONTAINS ""funny""
WITH m
MATCH (m)<-[r2:REVIEWED]-(p2:Person) 
WHERE toLower(r2.summary) CONTAINS ""compelling""
RETURN DISTINCT m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) 
WHERE toLower(r.summary) CONTAINS ""funny""
WITH m
MATCH (m)<-[r2:REVIEWED]-(p2:Person) 
WHERE toLower(r2.summary) CONTAINS ""compelling""
RETURN DISTINCT m.title","This query first finds all reviews that contain the word ""funny"" and all reviews that contain the word ""compelling"". Then it finds the movies connected to both a ""funny"" review and a ""compelling"" review. 

1. **Find reviews containing ""funny""**: Locate all `REVIEWED` relationships where the `summary` property contains the word ""funny"".
2. **Find reviews containing ""compelling""**: Similarly, locate all `REVIEWED` relationships where the `summary` property contains the word ""compelling"".
3. **Identify movies with both**: Find movies that have both types of reviews connected to them. We achieve this by using `WITH` clause to separate our matches, then matching on the Movie nodes."
Who reviewed movies directed by Nancy Meyers?,movies,"<explanation>
1. We need to find all directors with the name ""Nancy Meyers"" 
2. Then we need to find all the movies directed by those directors.
3. Finally we return all the reviewers who reviewed these movies.

```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE d.name = 'Nancy Meyers'
WITH m
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE d.name = 'Nancy Meyers'
WITH m
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name
```",Simple Retrieval Queries,"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE d.name = 'Nancy Meyers'
WITH m
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name","1. We need to find all directors with the name ""Nancy Meyers"" 
2. Then we need to find all the movies directed by those directors.
3. Finally we return all the reviewers who reviewed these movies.

```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE d.name = 'Nancy Meyers'
WITH m
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name
```"
What are the ratings given to movies produced by Joel Silver?,movies,"<explanation>
1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver.""
2. **Traverse PRODUCED relationships:** Traverse the `PRODUCED` relationships outgoing from Joel Silver to the `Movie` nodes he produced.
3. **Find REVIEWED relationships:** For each of those movies, find incoming `REVIEWED` relationships from other `Person` nodes.
4. **Return ratings:** Return the `rating` property of each `REVIEWED` relationship found.

This approach ensures that you are only considering ratings for movies produced by Joel Silver.
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
RETURN r.rating
```",Simple Retrieval Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
RETURN r.rating","1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver.""
2. **Traverse PRODUCED relationships:** Traverse the `PRODUCED` relationships outgoing from Joel Silver to the `Movie` nodes he produced.
3. **Find REVIEWED relationships:** For each of those movies, find incoming `REVIEWED` relationships from other `Person` nodes.
4. **Return ratings:** Return the `rating` property of each `REVIEWED` relationship found.

This approach ensures that you are only considering ratings for movies produced by Joel Silver."
List the first 3 people who follow Keanu Reeves.,movies,"<explanation>
1. We start by finding the node with the name ""Keanu Reeves"".
2. We then traverse the `FOLLOWS` relationship outgoing from that node.
3. We limit the results to the first 3 nodes found.
4. For each found person node, we return its name.
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(other)
RETURN other.name
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(other)
RETURN other.name
LIMIT 3","1. We start by finding the node with the name ""Keanu Reeves"".
2. We then traverse the `FOLLOWS` relationship outgoing from that node.
3. We limit the results to the first 3 nodes found.
4. For each found person node, we return its name."
Who does Carrie-Anne Moss follow?,movies,"<explanation>
This query starts with finding the Person node with the name 'Carrie-Anne Moss'. Then, it traverses the FOLLOWS relationships outgoing from that node to other Person nodes. Finally, it returns the names of those followed persons.
</explanation>
```cypher
MATCH (p:Person {name: 'Carrie-Anne Moss'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Carrie-Anne Moss'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name","This query starts with finding the Person node with the name 'Carrie-Anne Moss'. Then, it traverses the FOLLOWS relationships outgoing from that node to other Person nodes. Finally, it returns the names of those followed persons."
Which people are followed by more than 2 other people?,movies,"<explanation>
This query identifies people followed by more than two others. It first matches all FOLLOWS relationships, then uses `WITH` and `count(*)` to count followers for each person. Finally, it filters for people with more than two followers and returns their names.
</explanation>
```cypher
MATCH (p:Person)<-[:FOLLOWS]-(:Person)
WITH p, count(*) AS followerCount
WHERE followerCount > 2
RETURN p.name
```",Simple Retrieval Queries,"MATCH (p:Person)<-[:FOLLOWS]-(:Person)
WITH p, count(*) AS followerCount
WHERE followerCount > 2
RETURN p.name","This query identifies people followed by more than two others. It first matches all FOLLOWS relationships, then uses `WITH` and `count(*)` to count followers for each person. Finally, it filters for people with more than two followers and returns their names."
List the first 3 people who follow someone born before 1950.,movies,"<explanation>
1. **Find people born before 1950:** 
   - Start with a `MATCH` clause to find `Person` nodes where `born` is less than 1950.
2. **Find their followers:**
   - Use another `MATCH` clause to traverse the `FOLLOWS` relationship from those people to their followers.
3. **Return the followers' names:**
   - Use `RETURN` to specify that we want the `name` property of the people who follow the people found in step 1.
4. **Limit to the first 3 results:**
   - Use `LIMIT` to restrict the output to the first 3 results. 

```cypher
MATCH (p:Person) WHERE p.born < 1950
MATCH (p)<-[:FOLLOWS]-(follower)
RETURN follower.name
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person) WHERE p.born < 1950
MATCH (p)<-[:FOLLOWS]-(follower)
RETURN follower.name
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person) WHERE p.born < 1950
MATCH (p)<-[:FOLLOWS]-(follower)
RETURN follower.name
LIMIT 3","1. **Find people born before 1950:** 
   - Start with a `MATCH` clause to find `Person` nodes where `born` is less than 1950.
2. **Find their followers:**
   - Use another `MATCH` clause to traverse the `FOLLOWS` relationship from those people to their followers.
3. **Return the followers' names:**
   - Use `RETURN` to specify that we want the `name` property of the people who follow the people found in step 1.
4. **Limit to the first 3 results:**
   - Use `LIMIT` to restrict the output to the first 3 results. 

```cypher
MATCH (p:Person) WHERE p.born < 1950
MATCH (p)<-[:FOLLOWS]-(follower)
RETURN follower.name
LIMIT 3
```"
"Who follows people who acted in ""The Matrix Revolutions""?",movies,"<explanation>
1. **MATCH** the movie with title ""The Matrix Revolutions"".
2. **MATCH** people who acted in that movie.
3. **MATCH** other people who follow those actors.
4. **RETURN** the names of the followers.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
MATCH (f:Person)-[:FOLLOWS]->(p)
RETURN DISTINCT f.name AS followerName
```",Simple Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
MATCH (f:Person)-[:FOLLOWS]->(p)
RETURN DISTINCT f.name AS followerName","1. **MATCH** the movie with title ""The Matrix Revolutions"".
2. **MATCH** people who acted in that movie.
3. **MATCH** other people who follow those actors.
4. **RETURN** the names of the followers."
Which people are followed by people who directed a movie?,movies,"<explanation>
1. **Identify people who directed a movie:**
   - Match nodes with the label ""Person"" who have an outgoing ""DIRECTED"" relationship to a node with the label ""Movie"".
2. **Identify their followers:**
   - Traverse the ""FOLLOWS"" relationship in reverse to find the people who follow these directors.
3. **Return the followers' names:**
   - Return the distinct ""name"" property of the people found in step 2.

```cypher
MATCH (director:Person)-[:DIRECTED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN DISTINCT follower.name
```
</explanation>
```cypher
MATCH (director:Person)-[:DIRECTED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN DISTINCT follower.name
```",Simple Retrieval Queries,"MATCH (director:Person)-[:DIRECTED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN DISTINCT follower.name","1. **Identify people who directed a movie:**
   - Match nodes with the label ""Person"" who have an outgoing ""DIRECTED"" relationship to a node with the label ""Movie"".
2. **Identify their followers:**
   - Traverse the ""FOLLOWS"" relationship in reverse to find the people who follow these directors.
3. **Return the followers' names:**
   - Return the distinct ""name"" property of the people found in step 2.

```cypher
MATCH (director:Person)-[:DIRECTED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN DISTINCT follower.name
```"
List the first 3 people who follow someone who produced a movie.,movies,"<explanation>
1. **MATCH** people who produced a movie using the `PRODUCED` relationship.
2. **MATCH** other people who follow the producers found in the previous step using the `FOLLOWS` relationship.
3. **RETURN** the names of the followers.
4. **LIMIT** the result to the first 3 people.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN follower.name
LIMIT 3
```",Simple Retrieval Queries,"MATCH (p:Person)-[:PRODUCED]->(:Movie)<-[:FOLLOWS]-(follower:Person)
RETURN follower.name
LIMIT 3","1. **MATCH** people who produced a movie using the `PRODUCED` relationship.
2. **MATCH** other people who follow the producers found in the previous step using the `FOLLOWS` relationship.
3. **RETURN** the names of the followers.
4. **LIMIT** the result to the first 3 people."
Who follows people who reviewed a movie with a rating above 90?,movies,"<explanation>
1. **Find people who reviewed movies with a rating above 90.** We can start by matching all `REVIEWED` relationships with a `rating` property greater than 90.
2. **Identify the people who wrote those reviews.** We can traverse from the `REVIEWED` relationship to the `Person` node who created it.
3. **Find the followers of those reviewers.** We can then traverse outwards from the reviewers to find the `Person` nodes connected to them via the `FOLLOWS` relationship.
4. **Return the names of the followers.** Finally, we'll return the `name` property of the followers. 

```cypher
MATCH (reviewer:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH DISTINCT reviewer
MATCH (follower:Person)-[:FOLLOWS]->(reviewer)
RETURN DISTINCT follower.name
```
</explanation>
```cypher
MATCH (reviewer:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH DISTINCT reviewer
MATCH (follower:Person)-[:FOLLOWS]->(reviewer)
RETURN DISTINCT follower.name
```",Simple Retrieval Queries,"MATCH (reviewer:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH DISTINCT reviewer
MATCH (follower:Person)-[:FOLLOWS]->(reviewer)
RETURN DISTINCT follower.name","1. **Find people who reviewed movies with a rating above 90.** We can start by matching all `REVIEWED` relationships with a `rating` property greater than 90.
2. **Identify the people who wrote those reviews.** We can traverse from the `REVIEWED` relationship to the `Person` node who created it.
3. **Find the followers of those reviewers.** We can then traverse outwards from the reviewers to find the `Person` nodes connected to them via the `FOLLOWS` relationship.
4. **Return the names of the followers.** Finally, we'll return the `name` property of the followers. 

```cypher
MATCH (reviewer:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH DISTINCT reviewer
MATCH (follower:Person)-[:FOLLOWS]->(reviewer)
RETURN DISTINCT follower.name
```"
Which people follow Nancy Meyers and Joel Silver?,movies,"<explanation>
1. **Identify starting nodes:** We need to find the 'Person' nodes with names 'Nancy Meyers' and 'Joel Silver'.
2. **Traverse relationships:**  We need to traverse the 'FOLLOWS' relationship outgoing from these nodes to find who they follow.
3. **Return information:** The question asks for the 'Person' nodes that are being followed, so we return their names. 

Therefore, the query first finds the two persons with the specified names. Then, for each of those persons, the query traverses the `FOLLOWS` relationships and retrieves the names of the people they follow. The results are then returned as two separate lists, one for each input person. 
</explanation>
```cypher
MATCH (nancy:Person {name: 'Nancy Meyers'}), (joel:Person {name: 'Joel Silver'})
WITH nancy, joel
MATCH (nancy)-[:FOLLOWS]->(nancyFollows:Person)
WITH nancy, joel, collect(nancyFollows.name) AS nancyFollowsNames
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
RETURN nancyFollowsNames, collect(joelFollows.name) AS joelFollowsNames
```",Simple Retrieval Queries,"MATCH (nancy:Person {name: 'Nancy Meyers'}), (joel:Person {name: 'Joel Silver'})
WITH nancy, joel
MATCH (nancy)-[:FOLLOWS]->(nancyFollows:Person)
WITH nancy, joel, collect(nancyFollows.name) AS nancyFollowsNames
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
RETURN nancyFollowsNames, collect(joelFollows.name) AS joelFollowsNames","1. **Identify starting nodes:** We need to find the 'Person' nodes with names 'Nancy Meyers' and 'Joel Silver'.
2. **Traverse relationships:**  We need to traverse the 'FOLLOWS' relationship outgoing from these nodes to find who they follow.
3. **Return information:** The question asks for the 'Person' nodes that are being followed, so we return their names. 

Therefore, the query first finds the two persons with the specified names. Then, for each of those persons, the query traverses the `FOLLOWS` relationships and retrieves the names of the people they follow. The results are then returned as two separate lists, one for each input person."
List the 3 movies with the lowest number of votes.,movies,"<explanation>
This query finds the 3 movies with the lowest number of votes.
1. **MATCH** all Movie nodes.
2. **RETURN** the movie title and number of votes,  order the results in ascending order based on the number of votes and limit to the first 3 results. 

```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes ASC
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes ASC
LIMIT 3
```
",Simple Retrieval Queries,"MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes ASC
LIMIT 3","This query finds the 3 movies with the lowest number of votes.
1. **MATCH** all Movie nodes.
2. **RETURN** the movie title and number of votes,  order the results in ascending order based on the number of votes and limit to the first 3 results. 

```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes ASC
LIMIT 3
```"
Who directed the movie with the fewest votes?,movies,"<explanation>
1. **Find the movie with the fewest votes:** 
   - Start with `MATCH (m:Movie)` to look at all movies.
   - Use `ORDER BY m.votes ASC` to sort movies by votes in ascending order.
   - Use `LIMIT 1` to select only the movie with the fewest votes.

2. **Find the director of that movie:**
   - Use `MATCH (p:Person)-[:DIRECTED]->(m)` to find the person who directed the movie.

3. **Return the director's name:**
   - `RETURN p.name` to output the name of the director.
</explanation>

```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","1. **Find the movie with the fewest votes:** 
   - Start with `MATCH (m:Movie)` to look at all movies.
   - Use `ORDER BY m.votes ASC` to sort movies by votes in ascending order.
   - Use `LIMIT 1` to select only the movie with the fewest votes.

2. **Find the director of that movie:**
   - Use `MATCH (p:Person)-[:DIRECTED]->(m)` to find the person who directed the movie.

3. **Return the director's name:**
   - `RETURN p.name` to output the name of the director."
What is the tagline of the movie with the earliest release date?,movies,"<explanation>
This query identifies the movie with the earliest release date and returns its tagline.

1. **Find the earliest movie:**
   - Use `MATCH` to find all `Movie` nodes.
   - Use `ORDER BY` to sort the movies by their `released` property in ascending order.
   - Use `LIMIT 1` to select only the movie with the earliest release date.

2. **Return the tagline:**
   - Use `RETURN` to specify that we want the `tagline` property of the selected movie.
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.released ASC
LIMIT 1
RETURN m.tagline
```",Simple Retrieval Queries,"MATCH (m:Movie)
ORDER BY m.released ASC
LIMIT 1
RETURN m.tagline","This query identifies the movie with the earliest release date and returns its tagline.

1. **Find the earliest movie:**
   - Use `MATCH` to find all `Movie` nodes.
   - Use `ORDER BY` to sort the movies by their `released` property in ascending order.
   - Use `LIMIT 1` to select only the movie with the earliest release date.

2. **Return the tagline:**
   - Use `RETURN` to specify that we want the `tagline` property of the selected movie."
Which person acted in the most movies?,movies,"<explanation>
This Cypher query identifies the person who acted in the most movies. 

1. **MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)**: This matches all persons and the movies they acted in.
2. **WITH p, count(m) AS movies_acted_in**: This counts the number of movies each person acted in and stores it as `movies_acted_in`.
3. **RETURN p.name, movies_acted_in ORDER BY movies_acted_in DESC LIMIT 1**: This returns the name of the person and the number of movies they acted in, ordered by the number of movies in descending order and limited to the top result. 
</explanation>
```cypher
MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH p, count(m) AS movies_acted_in
RETURN p.name, movies_acted_in ORDER BY movies_acted_in DESC LIMIT 1
```",Simple Retrieval Queries,"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH p, count(m) AS movies_acted_in
RETURN p.name, movies_acted_in ORDER BY movies_acted_in DESC LIMIT 1","This Cypher query identifies the person who acted in the most movies. 

1. **MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)**: This matches all persons and the movies they acted in.
2. **WITH p, count(m) AS movies_acted_in**: This counts the number of movies each person acted in and stores it as `movies_acted_in`.
3. **RETURN p.name, movies_acted_in ORDER BY movies_acted_in DESC LIMIT 1**: This returns the name of the person and the number of movies they acted in, ordered by the number of movies in descending order and limited to the top result."
Who are the people who have both directed and produced a movie?,movies,"<explanation>
This query looks for people who have both directed and produced movies. It achieves this by:

1. **Matching**: Finding people who have directed movies using the `DIRECTED` relationship and people who have produced movies using the `PRODUCED` relationship.
2. **Collecting**: Getting the titles of movies directed by each person and storing them in `directedMovies`, and similarly collecting the titles of movies produced by each person into `producedMovies`.
3. **Filtering**: Keeping only the people who have at least one movie in both `directedMovies` and `producedMovies`. This ensures the person has worked as both a director and producer.
4. **Returning**: Outputting the names of the people who meet these criteria.

```cypher
MATCH (p:Person)-[:DIRECTED]->(d:Movie)
WITH p, collect(d.title) AS directedMovies
MATCH (p)-[:PRODUCED]->(pr:Movie)
WITH p, directedMovies, collect(pr.title) AS producedMovies
WHERE size(directedMovies) > 0 AND size(producedMovies) > 0
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(d:Movie)
WITH p, collect(d.title) AS directedMovies
MATCH (p)-[:PRODUCED]->(pr:Movie)
WITH p, directedMovies, collect(pr.title) AS producedMovies
WHERE size(directedMovies) > 0 AND size(producedMovies) > 0
RETURN p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(d:Movie)
WITH p, collect(d.title) AS directedMovies
MATCH (p)-[:PRODUCED]->(pr:Movie)
WITH p, directedMovies, collect(pr.title) AS producedMovies
WHERE size(directedMovies) > 0 AND size(producedMovies) > 0
RETURN p.name","This query looks for people who have both directed and produced movies. It achieves this by:

1. **Matching**: Finding people who have directed movies using the `DIRECTED` relationship and people who have produced movies using the `PRODUCED` relationship.
2. **Collecting**: Getting the titles of movies directed by each person and storing them in `directedMovies`, and similarly collecting the titles of movies produced by each person into `producedMovies`.
3. **Filtering**: Keeping only the people who have at least one movie in both `directedMovies` and `producedMovies`. This ensures the person has worked as both a director and producer.
4. **Returning**: Outputting the names of the people who meet these criteria.

```cypher
MATCH (p:Person)-[:DIRECTED]->(d:Movie)
WITH p, collect(d.title) AS directedMovies
MATCH (p)-[:PRODUCED]->(pr:Movie)
WITH p, directedMovies, collect(pr.title) AS producedMovies
WHERE size(directedMovies) > 0 AND size(producedMovies) > 0
RETURN p.name
```"
What is the average number of votes for movies released after 2000?,movies,"<explanation>
1. **Find movies released after 2000:** We can use the `WHERE` clause to filter movies with `released` property greater than 2000.
2. **Calculate the average vote count:** We will use the `avg()` function on the `votes` property of the filtered movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
RETURN avg(m.votes) AS average_votes
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
RETURN avg(m.votes) AS average_votes
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 2000
RETURN avg(m.votes) AS average_votes","1. **Find movies released after 2000:** We can use the `WHERE` clause to filter movies with `released` property greater than 2000.
2. **Calculate the average vote count:** We will use the `avg()` function on the `votes` property of the filtered movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
RETURN avg(m.votes) AS average_votes
```"
Which movies have no tagline?,movies,"<explanation>This query looks for all movies that have a NULL tagline property.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.tagline IS NULL**: This line filters the matched movies, keeping only those where the ""tagline"" property is NULL.
3. **RETURN m.title**: This line returns the ""title"" property of each movie that passed the filter. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline IS NULL
RETURN m.title
```",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline IS NULL
RETURN m.title","This query looks for all movies that have a NULL tagline property.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.tagline IS NULL**: This line filters the matched movies, keeping only those where the ""tagline"" property is NULL.
3. **RETURN m.title**: This line returns the ""title"" property of each movie that passed the filter."
Who is the oldest person who acted in a movie?,movies,"<explanation>
This query first matches all persons and their acted-in movies. Then, it orders the persons by their age in descending order (oldest first). Finally, it returns the name of the oldest person.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name ORDER BY p.born ASC LIMIT 1
```",Simple Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name ORDER BY p.born ASC LIMIT 1","This query first matches all persons and their acted-in movies. Then, it orders the persons by their age in descending order (oldest first). Finally, it returns the name of the oldest person."
What is the average release year of movies with more than 500 votes?,movies,"<explanation>
This Cypher query identifies movies with over 500 votes and calculates the average release year of those movies.

1. **MATCH Clause**: We start by matching all `Movie` nodes.
2. **WHERE Clause**:  We filter these movies to only include those where the `votes` property is greater than 500.
3. **WITH Clause**: We use `WITH` to pass the average release year as an aggregate value to the return statement
4. **RETURN Clause**: We return the average release year, aliased as `averageReleaseYear`.

```cypher
MATCH (m:Movie)
WHERE m.votes > 500
WITH avg(m.released) AS averageReleaseYear
RETURN averageReleaseYear
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 500
WITH avg(m.released) AS averageReleaseYear
RETURN averageReleaseYear
```
",Simple Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes > 500
WITH avg(m.released) AS averageReleaseYear
RETURN averageReleaseYear","This Cypher query identifies movies with over 500 votes and calculates the average release year of those movies.

1. **MATCH Clause**: We start by matching all `Movie` nodes.
2. **WHERE Clause**:  We filter these movies to only include those where the `votes` property is greater than 500.
3. **WITH Clause**: We use `WITH` to pass the average release year as an aggregate value to the return statement
4. **RETURN Clause**: We return the average release year, aliased as `averageReleaseYear`.

```cypher
MATCH (m:Movie)
WHERE m.votes > 500
WITH avg(m.released) AS averageReleaseYear
RETURN averageReleaseYear
```"
Which pair of people acted in the same movie?,movies,"<explanation>
This query identifies pairs of actors who have both appeared in the same movie.

1. **MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)**: This part of the query finds all pairs of people (p1 and p2) who have both acted in the same movie (m).
2. **WHERE id(p1) < id(p2)**: This condition ensures that each pair of actors is only counted once, avoiding duplicates where the order of p1 and p2 is reversed. 
3. **RETURN p1.name, p2.name**:  This part returns the names of the actors in each pair.

</explanation>
```cypher
MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
WHERE id(p1) < id(p2)
RETURN p1.name, p2.name
```",Simple Retrieval Queries,"MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
WHERE id(p1) < id(p2)
RETURN p1.name, p2.name","This query identifies pairs of actors who have both appeared in the same movie.

1. **MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)**: This part of the query finds all pairs of people (p1 and p2) who have both acted in the same movie (m).
2. **WHERE id(p1) < id(p2)**: This condition ensures that each pair of actors is only counted once, avoiding duplicates where the order of p1 and p2 is reversed. 
3. **RETURN p1.name, p2.name**:  This part returns the names of the actors in each pair."
Who acted in movies directed by the youngest director?,movies,"<explanation>
1. **Find the youngest director**: We need to find the `Person` node with the highest `born` property value who has a `DIRECTED` relationship to a `Movie` node.
2. **Get the movies directed by the youngest director**: Retrieve all `Movie` nodes connected to the youngest director through the `DIRECTED` relationship.
3. **Find the actors**: Finally, retrieve all `Person` nodes that have an `ACTED_IN` relationship with the movies directed by the youngest director.

```cypher
MATCH (youngestDirector:Person)-[:DIRECTED]->(m:Movie)
WITH youngestDirector ORDER BY youngestDirector.born DESC LIMIT 1
MATCH (youngestDirector)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```
</explanation>
```cypher
MATCH (youngestDirector:Person)-[:DIRECTED]->(m:Movie)
WITH youngestDirector ORDER BY youngestDirector.born DESC LIMIT 1
MATCH (youngestDirector)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```
",Simple Retrieval Queries,"MATCH (youngestDirector:Person)-[:DIRECTED]->(m:Movie)
WITH youngestDirector ORDER BY youngestDirector.born DESC LIMIT 1
MATCH (youngestDirector)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name","1. **Find the youngest director**: We need to find the `Person` node with the highest `born` property value who has a `DIRECTED` relationship to a `Movie` node.
2. **Get the movies directed by the youngest director**: Retrieve all `Movie` nodes connected to the youngest director through the `DIRECTED` relationship.
3. **Find the actors**: Finally, retrieve all `Person` nodes that have an `ACTED_IN` relationship with the movies directed by the youngest director.

```cypher
MATCH (youngestDirector:Person)-[:DIRECTED]->(m:Movie)
WITH youngestDirector ORDER BY youngestDirector.born DESC LIMIT 1
MATCH (youngestDirector)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```"
What is the difference in release years between the oldest and newest movies?,movies,"<explanation>
This query finds the oldest and newest movies by their `released` property, then calculates the difference between their release years.

1. **Find the oldest movie:** Find the movie with the minimum `released` year.
2. **Find the newest movie:** Find the movie with the maximum `released` year.
3. **Calculate the difference:**  Subtract the `released` year of the oldest movie from the `released` year of the newest movie.
4. **Return the difference.**
</explanation>
```cypher
MATCH (oldest:Movie)
WITH min(oldest.released) AS oldestRelease
MATCH (newest:Movie)
WITH oldestRelease, max(newest.released) AS newestRelease
RETURN newestRelease - oldestRelease AS difference
```",Simple Retrieval Queries,"MATCH (oldest:Movie)
WITH min(oldest.released) AS oldestRelease
MATCH (newest:Movie)
WITH oldestRelease, max(newest.released) AS newestRelease
RETURN newestRelease - oldestRelease AS difference","This query finds the oldest and newest movies by their `released` property, then calculates the difference between their release years.

1. **Find the oldest movie:** Find the movie with the minimum `released` year.
2. **Find the newest movie:** Find the movie with the maximum `released` year.
3. **Calculate the difference:**  Subtract the `released` year of the oldest movie from the `released` year of the newest movie.
4. **Return the difference.**"
Which movie has the longest tagline?,movies,"<explanation>
This query finds the movie with the longest tagline.
1. It starts by matching all Movie nodes.
2. It then uses `order by` to sort the movies by the length of their tagline in descending order.
3. It uses `limit 1` to return only the movie with the longest tagline.
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS length
ORDER BY length DESC
LIMIT 1
```",Simple Retrieval Queries,"MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS length
ORDER BY length DESC
LIMIT 1","This query finds the movie with the longest tagline.
1. It starts by matching all Movie nodes.
2. It then uses `order by` to sort the movies by the length of their tagline in descending order.
3. It uses `limit 1` to return only the movie with the longest tagline."
Who are the people who acted in movies released in the same year they were born?,movies,"<explanation>
1. **Find people and movies they acted in:** We need to match `Person` nodes that have an `ACTED_IN` relationship with a `Movie` node.
2. **Matching birth year and release year:**  We will use a `WHERE` clause to filter for cases where the `born` property of the `Person` node equals the `released` property of the `Movie` node. 
3. **Return the names**:  Finally, we `RETURN` the `name` property of the `Person` nodes that meet our criteria.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
```",Simple Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name","1. **Find people and movies they acted in:** We need to match `Person` nodes that have an `ACTED_IN` relationship with a `Movie` node.
2. **Matching birth year and release year:**  We will use a `WHERE` clause to filter for cases where the `born` property of the `Person` node equals the `released` property of the `Movie` node. 
3. **Return the names**:  Finally, we `RETURN` the `name` property of the `Person` nodes that meet our criteria.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
```"
What is the average rating given for movies released before 2000?,movies,"<explanation>
This query calculates the average rating for movies released before the year 2000. 

1. **MATCH Clause:** We start by matching all movies (:Movie) that were released before the year 2000.
2. **WITH Clause:** We use the WITH clause to pass the average rating to the RETURN clause.
3. **RETURN Clause:** We return the average rating as average_rating.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating","This query calculates the average rating for movies released before the year 2000. 

1. **MATCH Clause:** We start by matching all movies (:Movie) that were released before the year 2000.
2. **WITH Clause:** We use the WITH clause to pass the average rating to the RETURN clause.
3. **RETURN Clause:** We return the average rating as average_rating.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Which movies have received reviews with all available summaries?,movies,"<explanation>
To answer this question, we need to find movies that have reviews matching all distinct review summaries.

1. First, we collect all distinct review summaries into a list.
2. Then, for each movie, we collect the review summaries.
3. Finally, we compare the size of the list of distinct review summaries with the size of the list of review summaries for each movie. If they are equal, then the movie has received reviews with all available summaries.

</explanation>
```cypher
WITH collect(DISTINCT r.summary) AS all_summaries
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, size(collect(DISTINCT r.summary)) AS movie_summary_count, all_summaries
WHERE movie_summary_count = size(all_summaries)
RETURN m.title
```",Simple Retrieval Queries,"WITH collect(DISTINCT r.summary) AS all_summaries
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, size(collect(DISTINCT r.summary)) AS movie_summary_count, all_summaries
WHERE movie_summary_count = size(all_summaries)
RETURN m.title","To answer this question, we need to find movies that have reviews matching all distinct review summaries.

1. First, we collect all distinct review summaries into a list.
2. Then, for each movie, we collect the review summaries.
3. Finally, we compare the size of the list of distinct review summaries with the size of the list of review summaries for each movie. If they are equal, then the movie has received reviews with all available summaries."
Who reviewed the most movies released after 2005?,movies,"<explanation>
This Cypher query identifies the person who reviewed the most movies released after 2005 by:
1. **Matching**: Finding all movies released after 2005 and the people who reviewed those movies.
2. **Counting Reviews**: Grouping the results by the reviewer and counting the number of movies reviewed by each person.
3. **Ordering**: Arranging the results in descending order based on the review count to find the person with the most reviews.
4. **Returning**: Returning the name of the person with the most reviews and the count of their reviews.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS reviewerName, reviewCount LIMIT 1
```
</explanation>",Simple Retrieval Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS reviewerName, reviewCount LIMIT 1","This Cypher query identifies the person who reviewed the most movies released after 2005 by:
1. **Matching**: Finding all movies released after 2005 and the people who reviewed those movies.
2. **Counting Reviews**: Grouping the results by the reviewer and counting the number of movies reviewed by each person.
3. **Ordering**: Arranging the results in descending order based on the review count to find the person with the most reviews.
4. **Returning**: Returning the name of the person with the most reviews and the count of their reviews.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name AS reviewerName, reviewCount LIMIT 1
```"
What is the average number of roles played by people born after 1960?,movies,"<explanation>
1. **MATCH** all people born after 1960 and their ACTED_IN relationships to movies.
2. Use a **WITH** clause to calculate the size of the roles array using `size()` for each person.
3. Use a second **WITH** clause to aggregate the average role count using `avg()`.
4. **RETURN** the average role count.

```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
WITH p, size(ai.roles) AS roleCount
WITH avg(roleCount) AS averageRoleCount
RETURN averageRoleCount
```
</explanation>
```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
WITH p, size(ai.roles) AS roleCount
WITH avg(roleCount) AS averageRoleCount
RETURN averageRoleCount
```",Simple Retrieval Queries,"MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
WITH p, size(ai.roles) AS roleCount
WITH avg(roleCount) AS averageRoleCount
RETURN averageRoleCount","1. **MATCH** all people born after 1960 and their ACTED_IN relationships to movies.
2. Use a **WITH** clause to calculate the size of the roles array using `size()` for each person.
3. Use a second **WITH** clause to aggregate the average role count using `avg()`.
4. **RETURN** the average role count.

```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
WITH p, size(ai.roles) AS roleCount
WITH avg(roleCount) AS averageRoleCount
RETURN averageRoleCount
```"
Which movies have been reviewed by everyone who follows Keanu Reeves?,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the `Person` node with `name: ""Keanu Reeves""`.
2. **Get Keanu's followers:** Traverse the `FOLLOWS` relationships outgoing from Keanu Reeves to find all his followers.
3. **Get movies reviewed by each follower:** For each follower, find all the `Movie` nodes connected by the `REVIEWED` relationship.
4. **Find common movies:** Use `collect(m)` to create a list of movies reviewed by each follower, and then use `apoc.coll.intersection` function to identify movies reviewed by all followers. 

</explanation>
```cypher
MATCH (kr:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(follower)
WITH kr, collect(DISTINCT follower) AS followers
UNWIND followers AS follower
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH kr, collect(m) AS moviesReviewedByEachFollower
WITH kr, apoc.coll.intersection(moviesReviewedByEachFollower[0], moviesReviewedByEachFollower[1..]) AS commonMovies
UNWIND commonMovies AS commonMovie
RETURN DISTINCT commonMovie
```",Simple Retrieval Queries,"MATCH (kr:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(follower)
WITH kr, collect(DISTINCT follower) AS followers
UNWIND followers AS follower
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH kr, collect(m) AS moviesReviewedByEachFollower
WITH kr, apoc.coll.intersection(moviesReviewedByEachFollower[0], moviesReviewedByEachFollower[1..]) AS commonMovies
UNWIND commonMovies AS commonMovie
RETURN DISTINCT commonMovie","1. **Find Keanu Reeves:** Start by finding the `Person` node with `name: ""Keanu Reeves""`.
2. **Get Keanu's followers:** Traverse the `FOLLOWS` relationships outgoing from Keanu Reeves to find all his followers.
3. **Get movies reviewed by each follower:** For each follower, find all the `Movie` nodes connected by the `REVIEWED` relationship.
4. **Find common movies:** Use `collect(m)` to create a list of movies reviewed by each follower, and then use `apoc.coll.intersection` function to identify movies reviewed by all followers."
Who follows the person who directed the most movies?,movies,"<explanation>
1. **Find the director with the most movies:**
   - Start with the `Person` node and match those who have a `DIRECTED` relationship to a `Movie`.
   - Count the number of movies directed by each person using `size((person)-[:DIRECTED]->())`.
   - Use `with` and aggregate functions to find the person who directed the most movies (`maxMovies` and the corresponding `director`).
2. **Find the followers of the director:**
   - Match the `director` found in the previous step.
   - Traverse the `FOLLOWS` relationship in the reverse direction (incoming relationship to the `director`) to find the `followers`.
3. **Return the names of the followers:**
   - Return the `name` property of each `follower`.

```cypher
MATCH (person:Person)-[:DIRECTED]->(movie:Movie)
WITH person, count(movie) AS numMovies
WITH max(numMovies) AS maxMovies, collect(person) AS directors
UNWIND directors AS director
WITH director WHERE size((director)-[:DIRECTED]->()) = maxMovies
MATCH (follower:Person)-[:FOLLOWS]->(director)
RETURN follower.name
```
</explanation>",Simple Retrieval Queries,"MATCH (person:Person)-[:DIRECTED]->(movie:Movie)
WITH person, count(movie) AS numMovies
WITH max(numMovies) AS maxMovies, collect(person) AS directors
UNWIND directors AS director
WITH director WHERE size((director)-[:DIRECTED]->()) = maxMovies
MATCH (follower:Person)-[:FOLLOWS]->(director)
RETURN follower.name","1. **Find the director with the most movies:**
   - Start with the `Person` node and match those who have a `DIRECTED` relationship to a `Movie`.
   - Count the number of movies directed by each person using `size((person)-[:DIRECTED]->())`.
   - Use `with` and aggregate functions to find the person who directed the most movies (`maxMovies` and the corresponding `director`).
2. **Find the followers of the director:**
   - Match the `director` found in the previous step.
   - Traverse the `FOLLOWS` relationship in the reverse direction (incoming relationship to the `director`) to find the `followers`.
3. **Return the names of the followers:**
   - Return the `name` property of each `follower`.

```cypher
MATCH (person:Person)-[:DIRECTED]->(movie:Movie)
WITH person, count(movie) AS numMovies
WITH max(numMovies) AS maxMovies, collect(person) AS directors
UNWIND directors AS director
WITH director WHERE size((director)-[:DIRECTED]->()) = maxMovies
MATCH (follower:Person)-[:FOLLOWS]->(director)
RETURN follower.name
```"
What is the average born year of people who follow someone who produced a movie?,movies,"<explanation>
This Cypher query identifies the average born year of people who follow someone who has produced a movie.
1. **Find producers**: Identify all people who have produced a movie using the `PRODUCED` relationship.
2. **Find followers**: Find all the people who are following the identified producers using the `FOLLOWS` relationship.
3. **Calculate average born year**: Calculate the average born year of the followers found in the previous step.

```cypher
MATCH (producer:Person)-[:PRODUCED]->(movie:Movie)
WITH DISTINCT producer
MATCH (follower:Person)-[:FOLLOWS]->(producer)
WITH avg(follower.born) AS average_born_year
RETURN average_born_year
```
</explanation>
```cypher
MATCH (producer:Person)-[:PRODUCED]->(movie:Movie)
WITH DISTINCT producer
MATCH (follower:Person)-[:FOLLOWS]->(producer)
WITH avg(follower.born) AS average_born_year
RETURN average_born_year
```",Simple Retrieval Queries,"MATCH (producer:Person)-[:PRODUCED]->(movie:Movie)
WITH DISTINCT producer
MATCH (follower:Person)-[:FOLLOWS]->(producer)
WITH avg(follower.born) AS average_born_year
RETURN average_born_year","This Cypher query identifies the average born year of people who follow someone who has produced a movie.
1. **Find producers**: Identify all people who have produced a movie using the `PRODUCED` relationship.
2. **Find followers**: Find all the people who are following the identified producers using the `FOLLOWS` relationship.
3. **Calculate average born year**: Calculate the average born year of the followers found in the previous step.

```cypher
MATCH (producer:Person)-[:PRODUCED]->(movie:Movie)
WITH DISTINCT producer
MATCH (follower:Person)-[:FOLLOWS]->(producer)
WITH avg(follower.born) AS average_born_year
RETURN average_born_year
```"
Which people have reviewed movies acted in by everyone they follow?,movies,"<explanation>
1. **MATCH followed actors:** For each person (p1), find all people they follow (p2) and the movies those followed people have acted in (m).
2. **Collect reviewed movies:** For each person (p1), collect all the movies they've reviewed (reviewedMovies).
3. **Filter by acted movies:** Filter for people (p1) where all the movies acted in by people they follow (m) are present in the collection of movies they've reviewed (reviewedMovies).
4. **Return the names:** Return the names of the people who meet this condition.

```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)-[:ACTED_IN]->(m:Movie)
WITH p1, collect(DISTINCT m) AS actedMovies
MATCH (p1)-[:REVIEWED]->(reviewedMovies:Movie)
WITH p1, actedMovies, collect(DISTINCT reviewedMovies) AS reviewedMoviesCollection
WHERE ALL(movie IN actedMovies WHERE movie IN reviewedMoviesCollection)
RETURN DISTINCT p1.name
```
</explanation>
```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)-[:ACTED_IN]->(m:Movie)
WITH p1, collect(DISTINCT m) AS actedMovies
MATCH (p1)-[:REVIEWED]->(reviewedMovies:Movie)
WITH p1, actedMovies, collect(DISTINCT reviewedMovies) AS reviewedMoviesCollection
WHERE ALL(movie IN actedMovies WHERE movie IN reviewedMoviesCollection)
RETURN DISTINCT p1.name
```
",Simple Retrieval Queries,"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)-[:ACTED_IN]->(m:Movie)
WITH p1, collect(DISTINCT m) AS actedMovies
MATCH (p1)-[:REVIEWED]->(reviewedMovies:Movie)
WITH p1, actedMovies, collect(DISTINCT reviewedMovies) AS reviewedMoviesCollection
WHERE ALL(movie IN actedMovies WHERE movie IN reviewedMoviesCollection)
RETURN DISTINCT p1.name","1. **MATCH followed actors:** For each person (p1), find all people they follow (p2) and the movies those followed people have acted in (m).
2. **Collect reviewed movies:** For each person (p1), collect all the movies they've reviewed (reviewedMovies).
3. **Filter by acted movies:** Filter for people (p1) where all the movies acted in by people they follow (m) are present in the collection of movies they've reviewed (reviewedMovies).
4. **Return the names:** Return the names of the people who meet this condition.

```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)-[:ACTED_IN]->(m:Movie)
WITH p1, collect(DISTINCT m) AS actedMovies
MATCH (p1)-[:REVIEWED]->(reviewedMovies:Movie)
WITH p1, actedMovies, collect(DISTINCT reviewedMovies) AS reviewedMoviesCollection
WHERE ALL(movie IN actedMovies WHERE movie IN reviewedMoviesCollection)
RETURN DISTINCT p1.name
```"
List the first 3 movies with the highest average rating.,movies,"<explanation>
1. **Calculate the average rating for each movie:**
   - For each movie, calculate the average rating given by all persons who reviewed it using `avg(review.rating)`.
2. **Order the movies by average rating:**
   - Use `ORDER BY avgRating DESC` to sort the movies in descending order of their average rating.
3. **Limit the results to the top 3 movies:**
   - Use `LIMIT 3` to return only the first 3 movies with the highest average rating.
4. **Return the movie title and its average rating:**
   -  Use `RETURN m.title, avgRating` to display the title of the movie and its calculated average rating.

```cypher
MATCH (m:Movie)<-[review:REVIEWED]-()
WITH m, avg(review.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN m.title, avgRating
```
</explanation>
```cypher
MATCH (m:Movie)<-[review:REVIEWED]-()
WITH m, avg(review.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN m.title, avgRating
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[review:REVIEWED]-()
WITH m, avg(review.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN m.title, avgRating","1. **Calculate the average rating for each movie:**
   - For each movie, calculate the average rating given by all persons who reviewed it using `avg(review.rating)`.
2. **Order the movies by average rating:**
   - Use `ORDER BY avgRating DESC` to sort the movies in descending order of their average rating.
3. **Limit the results to the top 3 movies:**
   - Use `LIMIT 3` to return only the first 3 movies with the highest average rating.
4. **Return the movie title and its average rating:**
   -  Use `RETURN m.title, avgRating` to display the title of the movie and its calculated average rating.

```cypher
MATCH (m:Movie)<-[review:REVIEWED]-()
WITH m, avg(review.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN m.title, avgRating
```"
Who directed movies reviewed by the person born the earliest?,movies,"<explanation>
1. **Find the earliest born person:** Find the person with the minimum value for the 'born' property.
2. **Find the movies they reviewed:** Traverse the 'REVIEWED' relationship from that person to find the movies they reviewed.
3. **Find the directors of those movies:** Traverse the 'DIRECTED' relationship from those movies to find the directors.
4. **Return the directors:** Output the 'name' property of the directors.

```cypher
MATCH (p:Person)
WITH min(p.born) AS earliestBorn
MATCH (earliestPerson:Person {born: earliestBorn})
MATCH (earliestPerson)-[:REVIEWED]->(reviewedMovie)<-[:DIRECTED]-(director:Person)
RETURN DISTINCT director.name
```
</explanation>
```cypher
MATCH (p:Person)
WITH min(p.born) AS earliestBorn
MATCH (earliestPerson:Person {born: earliestBorn})
MATCH (earliestPerson)-[:REVIEWED]->(reviewedMovie)<-[:DIRECTED]-(director:Person)
RETURN DISTINCT director.name
```",Simple Retrieval Queries,"MATCH (p:Person)
WITH min(p.born) AS earliestBorn
MATCH (earliestPerson:Person {born: earliestBorn})
MATCH (earliestPerson)-[:REVIEWED]->(reviewedMovie)<-[:DIRECTED]-(director:Person)
RETURN DISTINCT director.name","1. **Find the earliest born person:** Find the person with the minimum value for the 'born' property.
2. **Find the movies they reviewed:** Traverse the 'REVIEWED' relationship from that person to find the movies they reviewed.
3. **Find the directors of those movies:** Traverse the 'DIRECTED' relationship from those movies to find the directors.
4. **Return the directors:** Output the 'name' property of the directors.

```cypher
MATCH (p:Person)
WITH min(p.born) AS earliestBorn
MATCH (earliestPerson:Person {born: earliestBorn})
MATCH (earliestPerson)-[:REVIEWED]->(reviewedMovie)<-[:DIRECTED]-(director:Person)
RETURN DISTINCT director.name
```"
What is the average number of votes for movies written by Nancy Meyers?,movies,"<explanation>
1. **Find Nancy Meyers:** Start by finding the `Person` node with `name: 'Nancy Meyers'`.
2. **Match Written Movies:** Traverse the `WROTE` relationships outgoing from Nancy Meyers to find all movies she has written.
3. **Calculate Average Votes:** Calculate the average of the `votes` property for all the movies found in the previous step. 

</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Simple Retrieval Queries,"MATCH (p:Person {name: 'Nancy Meyers'})-[:WROTE]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Find Nancy Meyers:** Start by finding the `Person` node with `name: 'Nancy Meyers'`.
2. **Match Written Movies:** Traverse the `WROTE` relationships outgoing from Nancy Meyers to find all movies she has written.
3. **Calculate Average Votes:** Calculate the average of the `votes` property for all the movies found in the previous step."
Which movie released after 2000 has the lowest average rating?,movies,"<explanation>
1. **Find movies released after 2000**: We will filter movies with the `released` property greater than 2000. 
2. **Calculate the average rating for each movie**: We'll use `avg(review.rating)` to calculate the average rating for each movie from the `REVIEWED` relationships.
3. **Order the results by average rating**: We'll use `ORDER BY` to sort the movies based on their average rating in ascending order.
4. **Return the title of the movie with the lowest average rating**: We'll use `LIMIT 1` to return only the top result, which will be the movie with the lowest average rating.

```cypher
MATCH (m:Movie)<-[review:REVIEWED]-()
WHERE m.released > 2000
WITH m, avg(review.rating) AS avg_rating
RETURN m.title, avg_rating ORDER BY avg_rating LIMIT 1
```
</explanation>",Simple Retrieval Queries,"MATCH (m:Movie)<-[review:REVIEWED]-()
WHERE m.released > 2000
WITH m, avg(review.rating) AS avg_rating
RETURN m.title, avg_rating ORDER BY avg_rating LIMIT 1","1. **Find movies released after 2000**: We will filter movies with the `released` property greater than 2000. 
2. **Calculate the average rating for each movie**: We'll use `avg(review.rating)` to calculate the average rating for each movie from the `REVIEWED` relationships.
3. **Order the results by average rating**: We'll use `ORDER BY` to sort the movies based on their average rating in ascending order.
4. **Return the title of the movie with the lowest average rating**: We'll use `LIMIT 1` to return only the top result, which will be the movie with the lowest average rating.

```cypher
MATCH (m:Movie)<-[review:REVIEWED]-()
WHERE m.released > 2000
WITH m, avg(review.rating) AS avg_rating
RETURN m.title, avg_rating ORDER BY avg_rating LIMIT 1
```"
Who acted in the movie with the highest average rating?,movies,"<explanation>
1. **Calculate the average rating for each movie:**
   - We need to find all `REVIEWED` relationships connected to each movie.
   - For each movie, calculate the average rating using the `avg` function on the `rating` property of the `REVIEWED` relationships.

2. **Find the movie with the highest average rating:**
   - We order the movies in descending order based on their calculated average rating.
   - We use `LIMIT 1` to get only the movie with the highest average rating.

3. **Find the actors who acted in that movie:**
   - From the movie with the highest average rating, we traverse the `ACTED_IN` relationship in reverse to find all the `Person` nodes connected to it.

4. **Return the names of the actors:**
   - We return the `name` property of the `Person` nodes found in the previous step.
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 1
MATCH (m)<-[:ACTED_IN]-(p:Person)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 1
MATCH (m)<-[:ACTED_IN]-(p:Person)
RETURN p.name
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 1
MATCH (m)<-[:ACTED_IN]-(p:Person)
RETURN p.name","1. **Calculate the average rating for each movie:**
   - We need to find all `REVIEWED` relationships connected to each movie.
   - For each movie, calculate the average rating using the `avg` function on the `rating` property of the `REVIEWED` relationships.

2. **Find the movie with the highest average rating:**
   - We order the movies in descending order based on their calculated average rating.
   - We use `LIMIT 1` to get only the movie with the highest average rating.

3. **Find the actors who acted in that movie:**
   - From the movie with the highest average rating, we traverse the `ACTED_IN` relationship in reverse to find all the `Person` nodes connected to it.

4. **Return the names of the actors:**
   - We return the `name` property of the `Person` nodes found in the previous step.
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 1
MATCH (m)<-[:ACTED_IN]-(p:Person)
RETURN p.name
```"
What is the difference between the highest and lowest rating given by the same person?,movies,"<explanation>
1. We need to find the person who reviewed movies.
2. Then we aggregate on each person to get their highest and lowest ratings.
3. Then we calculate the difference between these highest and lowest ratings.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN p.name, maxRating - minRating AS difference
ORDER BY difference DESC
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN p.name, maxRating - minRating AS difference
ORDER BY difference DESC
```",Simple Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN p.name, maxRating - minRating AS difference
ORDER BY difference DESC","1. We need to find the person who reviewed movies.
2. Then we aggregate on each person to get their highest and lowest ratings.
3. Then we calculate the difference between these highest and lowest ratings.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN p.name, maxRating - minRating AS difference
ORDER BY difference DESC
```"
Which movies have been reviewed by both Keanu Reeves and Carrie-Anne Moss?,movies,"<explanation>
This query identifies movies reviewed by both Keanu Reeves and Carrie-Anne Moss through these steps:

1. **Find Keanu Reeves:** Match a Person node with name 'Keanu Reeves'.
2. **Find Carrie-Anne Moss:** Match a Person node with name 'Carrie-Anne Moss'.
3. **Identify Movies Reviewed by Both:** Match Movie nodes that are connected to both Keanu Reeves and Carrie-Anne Moss through the `REVIEWED` relationship.
4. **Return the Movie Titles:** Return the `title` property of the matched movies.

</explanation>
```cypher
MATCH (keanu:Person {name: 'Keanu Reeves'})
MATCH (carrie:Person {name: 'Carrie-Anne Moss'})
MATCH (keanu)-[:REVIEWED]->(movie)<-[:REVIEWED]-(carrie)
RETURN movie.title
```",Simple Retrieval Queries,"MATCH (keanu:Person {name: 'Keanu Reeves'})
MATCH (carrie:Person {name: 'Carrie-Anne Moss'})
MATCH (keanu)-[:REVIEWED]->(movie)<-[:REVIEWED]-(carrie)
RETURN movie.title","This query identifies movies reviewed by both Keanu Reeves and Carrie-Anne Moss through these steps:

1. **Find Keanu Reeves:** Match a Person node with name 'Keanu Reeves'.
2. **Find Carrie-Anne Moss:** Match a Person node with name 'Carrie-Anne Moss'.
3. **Identify Movies Reviewed by Both:** Match Movie nodes that are connected to both Keanu Reeves and Carrie-Anne Moss through the `REVIEWED` relationship.
4. **Return the Movie Titles:** Return the `title` property of the matched movies."
Who follows people who have written and directed a movie?,movies,"<explanation>
1. **Find people who have written and directed a movie:** 
   - Match nodes with the label 'Person' who have outgoing relationships of type 'WROTE' to a movie and outgoing relationships of type 'DIRECTED' to a movie.
2. **Find the people who follow them:**
   - Match other 'Person' nodes that have an outgoing 'FOLLOWS' relationship to the people found in the previous step.
3. **Return the names of the followers:**
   - Return the distinct 'name' property of the 'Person' nodes found in the previous step.

```cypher
MATCH (writer_director:Person)-[:WROTE]->(movie:Movie)<-[:DIRECTED]-(writer_director)
MATCH (follower:Person)-[:FOLLOWS]->(writer_director)
RETURN DISTINCT follower.name
```
</explanation>
```cypher
MATCH (writer_director:Person)-[:WROTE]->(movie:Movie)<-[:DIRECTED]-(writer_director)
MATCH (follower:Person)-[:FOLLOWS]->(writer_director)
RETURN DISTINCT follower.name
```
",Simple Retrieval Queries,"MATCH (writer_director:Person)-[:WROTE]->(movie:Movie)<-[:DIRECTED]-(writer_director)
MATCH (follower:Person)-[:FOLLOWS]->(writer_director)
RETURN DISTINCT follower.name","1. **Find people who have written and directed a movie:** 
   - Match nodes with the label 'Person' who have outgoing relationships of type 'WROTE' to a movie and outgoing relationships of type 'DIRECTED' to a movie.
2. **Find the people who follow them:**
   - Match other 'Person' nodes that have an outgoing 'FOLLOWS' relationship to the people found in the previous step.
3. **Return the names of the followers:**
   - Return the distinct 'name' property of the 'Person' nodes found in the previous step.

```cypher
MATCH (writer_director:Person)-[:WROTE]->(movie:Movie)<-[:DIRECTED]-(writer_director)
MATCH (follower:Person)-[:FOLLOWS]->(writer_director)
RETURN DISTINCT follower.name
```"
What is the average born year of people who have reviewed a movie with a rating of 100?,movies,"<explanation>
1. **Match reviewers:** Find all `Person` nodes that have a `REVIEWED` relationship with a `Movie` node.
2. **Filter by rating:** Filter for `REVIEWED` relationships where the `rating` property is 100.
3. **Calculate average born year:** Calculate the average `born` year of the reviewers.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
WITH avg(p.born) AS average_born_year
RETURN average_born_year
```",Simple Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
WITH avg(p.born) AS average_born_year
RETURN average_born_year","1. **Match reviewers:** Find all `Person` nodes that have a `REVIEWED` relationship with a `Movie` node.
2. **Filter by rating:** Filter for `REVIEWED` relationships where the `rating` property is 100.
3. **Calculate average born year:** Calculate the average `born` year of the reviewers."
Which people have acted in movies directed by someone they follow?,movies,"<explanation>
1. **Find the actors:** We need to start by finding people who have acted in movies. This can be achieved by matching nodes with the label ""Person"" and an outgoing ""ACTED_IN"" relationship to a ""Movie"" node.
2. **Match the director:** Next, we need to check if these movies were directed by someone the actor follows. We can do this by traversing the ""FOLLOWS"" relationship from the actor and then checking if that person has a ""DIRECTED"" relationship with the same movie.
3. **Return the actors:** Finally, we only want to return the names of the actors who fulfill both conditions.

```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE (actor)-[:FOLLOWS]->(director)
RETURN DISTINCT actor.name
```
</explanation>
```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE (actor)-[:FOLLOWS]->(director)
RETURN DISTINCT actor.name
```",Simple Retrieval Queries,"MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE (actor)-[:FOLLOWS]->(director)
RETURN DISTINCT actor.name","1. **Find the actors:** We need to start by finding people who have acted in movies. This can be achieved by matching nodes with the label ""Person"" and an outgoing ""ACTED_IN"" relationship to a ""Movie"" node.
2. **Match the director:** Next, we need to check if these movies were directed by someone the actor follows. We can do this by traversing the ""FOLLOWS"" relationship from the actor and then checking if that person has a ""DIRECTED"" relationship with the same movie.
3. **Return the actors:** Finally, we only want to return the names of the actors who fulfill both conditions.

```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE (actor)-[:FOLLOWS]->(director)
RETURN DISTINCT actor.name
```"
List the top 3 movies with the largest difference between the highest and lowest rating received.,movies,"<explanation>
1. **Find movies with reviews and their ratings**: We need to find all movies that have been reviewed and get the highest and lowest ratings for each movie. We'll use `WITH` to carry the movie information along.
2. **Calculate the rating difference**: Calculate the difference between the maximum and minimum ratings for each movie.
3. **Order by rating difference and limit results**: Order the movies in descending order based on the rating difference and pick the top 3 movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN m.title AS movieTitle, maxRating - minRating AS ratingDifference
ORDER BY ratingDifference DESC
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN m.title AS movieTitle, maxRating - minRating AS ratingDifference
ORDER BY ratingDifference DESC
LIMIT 3
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN m.title AS movieTitle, maxRating - minRating AS ratingDifference
ORDER BY ratingDifference DESC
LIMIT 3","1. **Find movies with reviews and their ratings**: We need to find all movies that have been reviewed and get the highest and lowest ratings for each movie. We'll use `WITH` to carry the movie information along.
2. **Calculate the rating difference**: Calculate the difference between the maximum and minimum ratings for each movie.
3. **Order by rating difference and limit results**: Order the movies in descending order based on the rating difference and pick the top 3 movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS minRating, max(r.rating) AS maxRating
RETURN m.title AS movieTitle, maxRating - minRating AS ratingDifference
ORDER BY ratingDifference DESC
LIMIT 3
```"
"Who directed the movie with the highest number of reviews with the summary ""A solid romp""?",movies,"<explanation>
1. We need to find the movie with the highest number of reviews with the summary ""A solid romp"". We can do this by filtering on the `REVIEWED` relationship based on the summary and then grouping the results by movie and using `count(*)` to count the number of reviews.
2. We then need to find the person who directed that movie. We can do this by traversing the `DIRECTED` relationship from the movie node to the person node.
3. Finally, we will return the name of the director.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
WITH m, count(*) AS review_count
ORDER BY review_count DESC
LIMIT 1
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
WITH m, count(*) AS review_count
ORDER BY review_count DESC
LIMIT 1
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Simple Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
WITH m, count(*) AS review_count
ORDER BY review_count DESC
LIMIT 1
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","1. We need to find the movie with the highest number of reviews with the summary ""A solid romp"". We can do this by filtering on the `REVIEWED` relationship based on the summary and then grouping the results by movie and using `count(*)` to count the number of reviews.
2. We then need to find the person who directed that movie. We can do this by traversing the `DIRECTED` relationship from the movie node to the person node.
3. Finally, we will return the name of the director.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
WITH m, count(*) AS review_count
ORDER BY review_count DESC
LIMIT 1
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
Which movies released in 2003 did Laurence Fishburne act in?,movies,"<explanation>
1. **Find Laurence Fishburne:** Start by finding the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse relationships:** Follow the `ACTED_IN` relationships from the `Person` node to find all movies he acted in.
3. **Filter by release year:** Filter the `Movie` nodes to only include those released in 2003.
4. **Return movie titles:** Return the `title` property of the filtered `Movie` nodes. 

```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN m.title
```",Complex Retrieval Queries,"MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN m.title","1. **Find Laurence Fishburne:** Start by finding the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse relationships:** Follow the `ACTED_IN` relationships from the `Person` node to find all movies he acted in.
3. **Filter by release year:** Filter the `Movie` nodes to only include those released in 2003.
4. **Return movie titles:** Return the `title` property of the filtered `Movie` nodes. 

```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN m.title
```"
List the movies produced by Joel Silver with less than 1000 votes.,movies,"<explanation>
This query identifies movies produced by Joel Silver that have received fewer than 1000 votes.
1. **MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)**: We start by finding the `Person` node with the `name` property equal to ""Joel Silver."" We then traverse the `PRODUCED` relationship to find all the `Movie` nodes connected to this person.
2. **WHERE m.votes < 1000**: We filter the `Movie` nodes to only include those where the `votes` property is less than 1000.
3. **RETURN m.title**: Finally, we return the `title` property of the filtered `Movie` nodes.

This query effectively answers the question by first locating all movies produced by Joel Silver and then filtering that list to only include those with fewer than 1000 votes.
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes < 1000
RETURN m.title
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes < 1000
RETURN m.title","This query identifies movies produced by Joel Silver that have received fewer than 1000 votes.
1. **MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)**: We start by finding the `Person` node with the `name` property equal to ""Joel Silver."" We then traverse the `PRODUCED` relationship to find all the `Movie` nodes connected to this person.
2. **WHERE m.votes < 1000**: We filter the `Movie` nodes to only include those where the `votes` property is less than 1000.
3. **RETURN m.title**: Finally, we return the `title` property of the filtered `Movie` nodes.

This query effectively answers the question by first locating all movies produced by Joel Silver and then filtering that list to only include those with fewer than 1000 votes."
"What are the titles of the movies Tom Hanks acted in, released before 2000?",movies,"<explanation>
1. We need to find a `Person` node with `name` equal to ""Tom Hanks"".
2. Then we need to traverse the `ACTED_IN` relationships from that `Person` node to the `Movie` nodes.
3. We need to filter the `Movie` nodes to only include those where the `released` property is less than 2000.
4. For the filtered `Movie` nodes, we need to return their `title` property.

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title","1. We need to find a `Person` node with `name` equal to ""Tom Hanks"".
2. Then we need to traverse the `ACTED_IN` relationships from that `Person` node to the `Movie` nodes.
3. We need to filter the `Movie` nodes to only include those where the `released` property is less than 2000.
4. For the filtered `Movie` nodes, we need to return their `title` property.

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
```"
"Who acted in ""Cloud Atlas"" and were born after 1950?",movies,"<explanation>
1. **MATCH** the movie with the title ""Cloud Atlas"".
2. **MATCH** the actors who have the `ACTED_IN` relationship with the movie.
3. **WHERE** clause filters the actors who were born after 1950.
4. **RETURN** the `name` property of the actors.
</explanation>
```cypher
MATCH (m:Movie {title: ""Cloud Atlas""})
MATCH (a:Person)-[:ACTED_IN]->(m)
WHERE a.born > 1950
RETURN a.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""Cloud Atlas""})
MATCH (a:Person)-[:ACTED_IN]->(m)
WHERE a.born > 1950
RETURN a.name","1. **MATCH** the movie with the title ""Cloud Atlas"".
2. **MATCH** the actors who have the `ACTED_IN` relationship with the movie.
3. **WHERE** clause filters the actors who were born after 1950.
4. **RETURN** the `name` property of the actors."
Find the movies with more than 100 votes where Hugo Weaving acted.,movies,"<explanation>
This Cypher query first matches all movies with more than 100 votes. Then it goes on to find which of those movies Hugo Weaving acted in.
1. **MATCH (m:Movie)** - This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable `m`.
2. **WHERE m.votes > 100** - This line filters the movies to only include those with more than 100 votes.
3. **WITH m MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m)** - This line introduces a new match, looking for a Person node with the name 'Hugo Weaving' that has an ACTED_IN relationship with the previously filtered movies.
4. **RETURN m** - Finally, the query returns the movie nodes that fulfill both conditions.

```cypher
MATCH (m:Movie)
WHERE m.votes > 100
WITH m 
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m)
RETURN m
```
</explanation>",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes > 100
WITH m 
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m)
RETURN m","This Cypher query first matches all movies with more than 100 votes. Then it goes on to find which of those movies Hugo Weaving acted in.
1. **MATCH (m:Movie)** - This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable `m`.
2. **WHERE m.votes > 100** - This line filters the movies to only include those with more than 100 votes.
3. **WITH m MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m)** - This line introduces a new match, looking for a Person node with the name 'Hugo Weaving' that has an ACTED_IN relationship with the previously filtered movies.
4. **RETURN m** - Finally, the query returns the movie nodes that fulfill both conditions.

```cypher
MATCH (m:Movie)
WHERE m.votes > 100
WITH m 
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m)
RETURN m
```"
List the names of people who acted in movies released in 1995.,movies,"<explanation>
This query starts by finding all movies released in 1995. Then, it traverses the ACTED_IN relationships backward to find the people who acted in those movies. Finally, it returns the names of those people. 
</explanation>
```cypher
MATCH (m:Movie {released: 1995})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {released: 1995})<-[:ACTED_IN]-(p:Person)
RETURN p.name","This query starts by finding all movies released in 1995. Then, it traverses the ACTED_IN relationships backward to find the people who acted in those movies. Finally, it returns the names of those people."
"What is the release year of the movie with the tagline ""Houston, we have a problem.""?",movies,"<explanation>
This query first finds the movie with the tagline ""Houston, we have a problem."" and then returns the `released` property of that movie. 
</explanation>
```cypher
MATCH (m:Movie {tagline: ""Houston, we have a problem.""})
RETURN m.released
```",Complex Retrieval Queries,"MATCH (m:Movie {tagline: ""Houston, we have a problem.""})
RETURN m.released","This query first finds the movie with the tagline ""Houston, we have a problem."" and then returns the `released` property of that movie."
"Which movies have ""Fun"" in their review summary?",movies,"<explanation>
1. We need to find all `REVIEWED` relationships where the `summary` property contains ""Fun"".
2. Then, we return the `title` property of the `Movie` nodes connected to those relationships.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'Fun'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'Fun'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'Fun'
RETURN m.title","1. We need to find all `REVIEWED` relationships where the `summary` property contains ""Fun"".
2. Then, we return the `title` property of the `Movie` nodes connected to those relationships.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'Fun'
RETURN m.title
```"
Find the movies reviewed with a rating greater than 90.,movies,"<explanation>
This query looks for all movies that have a `REVIEWED` relationship with a rating property greater than 90. It returns the titles of those movies. 

1. **MATCH Clause:** We start by matching the `REVIEWED` relationship between a `Person` node and a `Movie` node. 
2. **WHERE Clause:** We filter for relationships where the `rating` property is greater than 90.
3. **RETURN Clause:** We return the `title` property of the `Movie` node.

</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title
```",Complex Retrieval Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title","This query looks for all movies that have a `REVIEWED` relationship with a rating property greater than 90. It returns the titles of those movies. 

1. **MATCH Clause:** We start by matching the `REVIEWED` relationship between a `Person` node and a `Movie` node. 
2. **WHERE Clause:** We filter for relationships where the `rating` property is greater than 90.
3. **RETURN Clause:** We return the `title` property of the `Movie` node."
List the people born before 1965 who acted in movies with over 50 votes.,movies,"<explanation>
1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by born date:** We filter these nodes to only include persons born before 1965. 
3. **Match to movies:** We traverse the `ACTED_IN` relationship to find all movies these people acted in. 
4. **Filter by vote count:** We filter these movies to only include those with more than 50 votes. 
5. **Return the actors:** We return the names of the actors who meet these criteria.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.votes > 50
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.votes > 50
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.votes > 50
RETURN DISTINCT p.name","1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by born date:** We filter these nodes to only include persons born before 1965. 
3. **Match to movies:** We traverse the `ACTED_IN` relationship to find all movies these people acted in. 
4. **Filter by vote count:** We filter these movies to only include those with more than 50 votes. 
5. **Return the actors:** We return the names of the actors who meet these criteria.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.votes > 50
RETURN DISTINCT p.name
```"
What are the roles Laurence Fishburne played in movies released after 2000?,movies,"<explanation>
1. **Find the person named ""Laurence Fishburne""**: We start by matching the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse `ACTED_IN` relationships**: From the found person, we traverse outgoing `ACTED_IN` relationships to find the movies in which Laurence Fishburne acted.
3. **Filter movies based on release year**: We filter the movies to include only those released after the year 2000.
4. **Return the movie titles and roles**: For the filtered movies, we return the titles of the movies and the corresponding roles played by Laurence Fishburne.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title, m.released, m.tagline
```
</explanation>```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title, m.roles
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title, m.released, m.tagline","1. **Find the person named ""Laurence Fishburne""**: We start by matching the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse `ACTED_IN` relationships**: From the found person, we traverse outgoing `ACTED_IN` relationships to find the movies in which Laurence Fishburne acted.
3. **Filter movies based on release year**: We filter the movies to include only those released after the year 2000.
4. **Return the movie titles and roles**: For the filtered movies, we return the titles of the movies and the corresponding roles played by Laurence Fishburne.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title, m.released, m.tagline
```"
"Find the people who acted in movies with a tagline containing the word ""connected"".",movies,"<explanation>
1. **Find movies with ""connected"" in the tagline:** 
   - Start with `MATCH (m:Movie)` to look for all movies.
   - Use `WHERE` to filter movies where `m.tagline CONTAINS 'connected'`.

2. **Find people who acted in those movies:**
   - Use `MATCH (p:Person)-[:ACTED_IN]->(m)` to find people connected to those movies through the `ACTED_IN` relationship.

3. **Return the people:**
   - Use `RETURN DISTINCT p.name` to return the names of the people, making sure to avoid duplicates with `DISTINCT`.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","1. **Find movies with ""connected"" in the tagline:** 
   - Start with `MATCH (m:Movie)` to look for all movies.
   - Use `WHERE` to filter movies where `m.tagline CONTAINS 'connected'`.

2. **Find people who acted in those movies:**
   - Use `MATCH (p:Person)-[:ACTED_IN]->(m)` to find people connected to those movies through the `ACTED_IN` relationship.

3. **Return the people:**
   - Use `RETURN DISTINCT p.name` to return the names of the people, making sure to avoid duplicates with `DISTINCT`.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```"
Which movies released before 2010 were reviewed with a rating less than 70?,movies,"<explanation>
This query starts by matching all `Movie` nodes. Then, it filters these movies to those released before 2010 and that have an incoming `REVIEWED` relationship where the rating is less than 70. Finally, it returns the titles of these movies. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2010 AND r.rating < 70
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2010 AND r.rating < 70
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2010 AND r.rating < 70
RETURN m.title","This query starts by matching all `Movie` nodes. Then, it filters these movies to those released before 2010 and that have an incoming `REVIEWED` relationship where the rating is less than 70. Finally, it returns the titles of these movies. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2010 AND r.rating < 70
RETURN m.title
```"
"List the names of people who acted in movies with ""The Matrix"" in the title.",movies,"<explanation>
This query identifies people who acted in movies with ""The Matrix"" in the title.

1. **MATCH (m:Movie)**: We start by matching all nodes with the label ""Movie"" to consider all movies in the database.
2. **WHERE m.title CONTAINS ""The Matrix""**: We filter these movies to only include those with ""The Matrix"" in their title.
3. **MATCH (p:Person)-[:ACTED_IN]->(m)**: We match all ""Person"" nodes that have an ""ACTED_IN"" relationship with the filtered movies.
4. **RETURN p.name**: Finally, we return the ""name"" property of the ""Person"" nodes, giving us a list of people who acted in movies with ""The Matrix"" in the title.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS ""The Matrix""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS ""The Matrix""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name","This query identifies people who acted in movies with ""The Matrix"" in the title.

1. **MATCH (m:Movie)**: We start by matching all nodes with the label ""Movie"" to consider all movies in the database.
2. **WHERE m.title CONTAINS ""The Matrix""**: We filter these movies to only include those with ""The Matrix"" in their title.
3. **MATCH (p:Person)-[:ACTED_IN]->(m)**: We match all ""Person"" nodes that have an ""ACTED_IN"" relationship with the filtered movies.
4. **RETURN p.name**: Finally, we return the ""name"" property of the ""Person"" nodes, giving us a list of people who acted in movies with ""The Matrix"" in the title."
What is the average rating of movies released after 1990?,movies,"<explanation>
1. We start by matching all movies released after 1990: `MATCH (m:Movie) WHERE m.released > 1990`
2. We then use `WITH` to carry over the movie variable `m`.
3. We then calculate the average rating of these movies using `avg(r.rating)` and alias it as `average_rating`.
4. Finally, we return the `average_rating`.

```cypher
MATCH (m:Movie) WHERE m.released > 1990
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>```cypher
MATCH (m:Movie) WHERE m.released > 1990
WITH m
MATCH (:Person)-[r:REVIEWED]->(m)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Complex Retrieval Queries,"MATCH (m:Movie) WHERE m.released > 1990
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. We start by matching all movies released after 1990: `MATCH (m:Movie) WHERE m.released > 1990`
2. We then use `WITH` to carry over the movie variable `m`.
3. We then calculate the average rating of these movies using `avg(r.rating)` and alias it as `average_rating`.
4. Finally, we return the `average_rating`.

```cypher
MATCH (m:Movie) WHERE m.released > 1990
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Find the movies with the lowest number of votes that Hugo Weaving acted in.,movies,"<explanation>
1. **Find Hugo Weaving**: We need to first match the `Person` node with the name 'Hugo Weaving'.
2. **Match acted in movies**: From the Hugo Weaving node, we traverse the `ACTED_IN` relationship to find all the movies he acted in.
3. **Get the movie with the lowest number of votes**: We use the `min()` aggregation function on the `votes` property of the movies to find the movie with the lowest number of votes. Note that there might be multiple movies with the same minimum number of votes.
4. **Return the titles of the movies**: Finally, we return the titles of the movies with the lowest number of votes.

```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH min(m.votes) AS min_votes
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.votes = min_votes
RETURN m.title AS movieTitle
```
</explanation>
```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH min(m.votes) AS min_votes
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.votes = min_votes
RETURN m.title AS movieTitle
```",Complex Retrieval Queries,"MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH min(m.votes) AS min_votes
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.votes = min_votes
RETURN m.title AS movieTitle","1. **Find Hugo Weaving**: We need to first match the `Person` node with the name 'Hugo Weaving'.
2. **Match acted in movies**: From the Hugo Weaving node, we traverse the `ACTED_IN` relationship to find all the movies he acted in.
3. **Get the movie with the lowest number of votes**: We use the `min()` aggregation function on the `votes` property of the movies to find the movie with the lowest number of votes. Note that there might be multiple movies with the same minimum number of votes.
4. **Return the titles of the movies**: Finally, we return the titles of the movies with the lowest number of votes.

```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH min(m.votes) AS min_votes
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.votes = min_votes
RETURN m.title AS movieTitle
```"
"Which person acted in both ""Apollo 13"" and ""Cloud Atlas""?",movies,"<explanation>
This query starts by finding the two movies ""Apollo 13"" and ""Cloud Atlas"". It then finds all people who have an ACTED_IN relationship to both movies. The DISTINCT keyword in the RETURN clause ensures that each person's name is only returned once, even if they had multiple roles in either movie.
</explanation>
```cypher
MATCH (m1:Movie {title: ""Apollo 13""})
MATCH (m2:Movie {title: ""Cloud Atlas""})
MATCH (p:Person)-[:ACTED_IN]->(m1)
MATCH (p)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (m1:Movie {title: ""Apollo 13""})
MATCH (m2:Movie {title: ""Cloud Atlas""})
MATCH (p:Person)-[:ACTED_IN]->(m1)
MATCH (p)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name","This query starts by finding the two movies ""Apollo 13"" and ""Cloud Atlas"". It then finds all people who have an ACTED_IN relationship to both movies. The DISTINCT keyword in the RETURN clause ensures that each person's name is only returned once, even if they had multiple roles in either movie."
List the movies released between 1990 and 2005 with more than 50 votes.,movies,"<explanation>
This query looks for movies released between 1990 and 2005 that have more than 50 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies based on their release year (`released`) being between 1990 and 2005 and having more than 50 votes (`votes`).
3. **RETURN Clause:** We return the `title` of the movies that meet our criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE  m.released >= 1990 AND m.released <= 2005 AND m.votes > 50
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE  m.released >= 1990 AND m.released <= 2005 AND m.votes > 50
RETURN m.title","This query looks for movies released between 1990 and 2005 that have more than 50 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies based on their release year (`released`) being between 1990 and 2005 and having more than 50 votes (`votes`).
3. **RETURN Clause:** We return the `title` of the movies that meet our criteria."
What are the taglines of movies with a rating higher than 85?,movies,"<explanation>
1. We need to find all `REVIEWED` relationships with a `rating` higher than 85.
2. We then need to traverse from the `REVIEWED` relationship to the `Movie` node it connects to.
3. We then need to return the `tagline` property for each `Movie` node found.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 85
RETURN m.tagline
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 85
RETURN m.tagline
```",Complex Retrieval Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 85
RETURN m.tagline","1. We need to find all `REVIEWED` relationships with a `rating` higher than 85.
2. We then need to traverse from the `REVIEWED` relationship to the `Movie` node it connects to.
3. We then need to return the `tagline` property for each `Movie` node found.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 85
RETURN m.tagline
```"
Find the people born after 1955 who acted in movies released before 2000.,movies,"<explanation>
This query starts by identifying people born after 1955. It then traverses the ACTED_IN relationships to find movies those people acted in. It filters these movies to only include those released before 2000. Finally, it returns the names of the actors.

1. **MATCH (person:Person)**: This line starts the query by finding all nodes with the label ""Person.""
2. **WHERE person.born > 1955**: This line filters the found persons to only include those born after 1955.
3. **MATCH (person)-[:ACTED_IN]->(movie:Movie)**: This line matches the persons with the movies they ACTED_IN.
4. **WHERE movie.released < 2000**: This line filters the found movies to only include those released before 2000.
5. **RETURN DISTINCT person.name**: This line returns the names of the actors who meet the criteria. The DISTINCT keyword ensures that each actor's name is only returned once, even if they acted in multiple movies that meet the criteria.
</explanation>
```cypher
MATCH (person:Person)
WHERE person.born > 1955
MATCH (person)-[:ACTED_IN]->(movie:Movie)
WHERE movie.released < 2000
RETURN DISTINCT person.name
```",Complex Retrieval Queries,"MATCH (person:Person)
WHERE person.born > 1955
MATCH (person)-[:ACTED_IN]->(movie:Movie)
WHERE movie.released < 2000
RETURN DISTINCT person.name","This query starts by identifying people born after 1955. It then traverses the ACTED_IN relationships to find movies those people acted in. It filters these movies to only include those released before 2000. Finally, it returns the names of the actors.

1. **MATCH (person:Person)**: This line starts the query by finding all nodes with the label ""Person.""
2. **WHERE person.born > 1955**: This line filters the found persons to only include those born after 1955.
3. **MATCH (person)-[:ACTED_IN]->(movie:Movie)**: This line matches the persons with the movies they ACTED_IN.
4. **WHERE movie.released < 2000**: This line filters the found movies to only include those released before 2000.
5. **RETURN DISTINCT person.name**: This line returns the names of the actors who meet the criteria. The DISTINCT keyword ensures that each actor's name is only returned once, even if they acted in multiple movies that meet the criteria."
"Which movies have a review summary containing ""amazing""?",movies,"<explanation>
This query looks for all movies that have at least one review with a summary containing the word ""amazing"".
1. It starts by matching all `Movie` nodes.
2. Then, it traverses the `REVIEWED` relationship to find all `Person` nodes that have reviewed each movie.
3. It filters these `Person` nodes based on whether their review summary contains the word ""amazing"".
4. Finally, it returns the titles of the movies that have at least one review matching the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
RETURN DISTINCT m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
RETURN DISTINCT m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
RETURN DISTINCT m.title","This query looks for all movies that have at least one review with a summary containing the word ""amazing"".
1. It starts by matching all `Movie` nodes.
2. Then, it traverses the `REVIEWED` relationship to find all `Person` nodes that have reviewed each movie.
3. It filters these `Person` nodes based on whether their review summary contains the word ""amazing"".
4. Finally, it returns the titles of the movies that have at least one review matching the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
RETURN DISTINCT m.title
```"
List the names of people who produced movies with less than 500 votes.,movies,"<explanation>
1. **Start with the `Movie` nodes:** We begin by matching all `Movie` nodes.
2. **Filter `Movie` nodes based on `votes`:** We only keep the movies that have less than 500 votes.
3. **Traverse the `PRODUCED` relationship:** From the filtered movies, we traverse the `PRODUCED` relationship to find the people who produced them.
4. **Return the names of the people:** Finally, we return the `name` property of the people found. 

```cypher
MATCH (m:Movie)
WHERE m.votes < 500
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes < 500
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes < 500
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name","1. **Start with the `Movie` nodes:** We begin by matching all `Movie` nodes.
2. **Filter `Movie` nodes based on `votes`:** We only keep the movies that have less than 500 votes.
3. **Traverse the `PRODUCED` relationship:** From the filtered movies, we traverse the `PRODUCED` relationship to find the people who produced them.
4. **Return the names of the people:** Finally, we return the `name` property of the people found. 

```cypher
MATCH (m:Movie)
WHERE m.votes < 500
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```"
What is the release year of the movie with the highest rating?,movies,"<explanation>
This query finds the movie with the highest rating and returns its release year. 
1. **MATCH & WITH (Finding the highest-rated movie):**
   - `MATCH (m:Movie)<-[r:REVIEWED]-()` finds all movies (`m:Movie`) that have been reviewed.
   - `WITH max(r.rating) AS max_rating` calculates the highest rating among all reviews and stores it in the variable `max_rating`.

2. **MATCH & RETURN (Retrieving the movie details):**
   - `MATCH (m:Movie)<-[r:REVIEWED]-()` finds all movies (`m:Movie`) that have been reviewed (again).
   - `WHERE r.rating = max_rating` filters for movies whose review rating matches the highest rating (`max_rating`) identified earlier.
   - `RETURN m.released` returns the release year (`m.released`) of the movie(s) that meet the criteria.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = max_rating
RETURN m.released
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = max_rating
RETURN m.released","This query finds the movie with the highest rating and returns its release year. 
1. **MATCH & WITH (Finding the highest-rated movie):**
   - `MATCH (m:Movie)<-[r:REVIEWED]-()` finds all movies (`m:Movie`) that have been reviewed.
   - `WITH max(r.rating) AS max_rating` calculates the highest rating among all reviews and stores it in the variable `max_rating`.

2. **MATCH & RETURN (Retrieving the movie details):**
   - `MATCH (m:Movie)<-[r:REVIEWED]-()` finds all movies (`m:Movie`) that have been reviewed (again).
   - `WHERE r.rating = max_rating` filters for movies whose review rating matches the highest rating (`max_rating`) identified earlier.
   - `RETURN m.released` returns the release year (`m.released`) of the movie(s) that meet the criteria."
Find the movies acted in by people born before 1960 with a rating over 90.,movies,"<explanation>
This query starts by matching all people born before 1960. Then, it traverses the ACTED_IN relationships to find movies those people have acted in. It further filters these movies based on the condition that the rating on the REVIEWED relationship is over 90. Finally, it returns the titles of the movies that meet all the criteria.

1. **MATCH (p:Person)**: This part starts the query by finding all nodes with the label ""Person"".
2. **WHERE p.born < 1960**: This part filters the people to only include those born before 1960.
3. **WITH p MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()**: This part looks for movies (m:Movie) that are connected to the previously filtered people (p:Person) via the ""ACTED_IN"" relationship and also have an incoming ""REVIEWED"" relationship (r:REVIEWED).
4. **WHERE r.rating > 90**: This part filters the movies further by only including those with a rating greater than 90 on the ""REVIEWED"" relationship.
5. **RETURN DISTINCT m.title**: Finally, this part returns the distinct titles of the movies that have met all the previous criteria. 
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1960
WITH p
MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN DISTINCT m.title
```",Complex Retrieval Queries,"MATCH (p:Person)
WHERE p.born < 1960
WITH p
MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN DISTINCT m.title","This query starts by matching all people born before 1960. Then, it traverses the ACTED_IN relationships to find movies those people have acted in. It further filters these movies based on the condition that the rating on the REVIEWED relationship is over 90. Finally, it returns the titles of the movies that meet all the criteria.

1. **MATCH (p:Person)**: This part starts the query by finding all nodes with the label ""Person"".
2. **WHERE p.born < 1960**: This part filters the people to only include those born before 1960.
3. **WITH p MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()**: This part looks for movies (m:Movie) that are connected to the previously filtered people (p:Person) via the ""ACTED_IN"" relationship and also have an incoming ""REVIEWED"" relationship (r:REVIEWED).
4. **WHERE r.rating > 90**: This part filters the movies further by only including those with a rating greater than 90 on the ""REVIEWED"" relationship.
5. **RETURN DISTINCT m.title**: Finally, this part returns the distinct titles of the movies that have met all the previous criteria."
"Which person directed ""The Matrix Revolutions""?",movies,"<explanation>
This Cypher query first finds the movie with the title ""The Matrix Revolutions"". Then, it traverses the `DIRECTED` relationship from that movie to the person who directed it. Finally, it returns the name of the director. 
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:DIRECTED]-(p:Person)
RETURN p.name","This Cypher query first finds the movie with the title ""The Matrix Revolutions"". Then, it traverses the `DIRECTED` relationship from that movie to the person who directed it. Finally, it returns the name of the director."
"List the movies with a tagline containing the word ""Real"" and released after 1995.",movies,"<explanation>This query looks for movies with the word ""Real"" in the tagline and filters for movies released after 1995. It returns the title of those movies. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 1995 AND toLower(m.tagline) CONTAINS ""real""
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 1995 AND toLower(m.tagline) CONTAINS ""real""
RETURN m.title","This query looks for movies with the word ""Real"" in the tagline and filters for movies released after 1995. It returns the title of those movies."
What are the roles of Tom Hanks in movies released before 2000?,movies,"<explanation>
1. We start by matching the person node with the name 'Tom Hanks'.
2. Then we traverse the ACTED_IN relationships, connecting the person node to the corresponding movie nodes.
3. We filter these movies based on their release year, keeping only those released before 2000.
4. Finally, we return the titles of the movies and the roles Tom Hanks played in them.

```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released,  m.tagline
```
</explanation>
```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released,  m.tagline
```",Complex Retrieval Queries,"MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released,  m.tagline","1. We start by matching the person node with the name 'Tom Hanks'.
2. Then we traverse the ACTED_IN relationships, connecting the person node to the corresponding movie nodes.
3. We filter these movies based on their release year, keeping only those released before 2000.
4. Finally, we return the titles of the movies and the roles Tom Hanks played in them.

```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released,  m.tagline
```"
Find the people who wrote movies with more than 1000 votes.,movies,"<explanation>
This query starts with a MATCH clause, looking for people who WROTE a Movie. Then it uses a WHERE clause to filter for movies with more than 1000 votes. Finally, it returns the name of the writers.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes > 1000
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes > 1000
RETURN p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes > 1000
RETURN p.name","This query starts with a MATCH clause, looking for people who WROTE a Movie. Then it uses a WHERE clause to filter for movies with more than 1000 votes. Finally, it returns the name of the writers.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes > 1000
RETURN p.name
```"
"Which movies have a review summary containing the word ""compelling""?",movies,"<explanation>
1. We need to find all `Movie` nodes that have an incoming `REVIEWED` relationship.
2. The `REVIEWED` relationship must have a `summary` property that contains the word ""compelling"".
3. We will return the `title` of each matching movie.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'compelling'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'compelling'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'compelling'
RETURN m.title","1. We need to find all `Movie` nodes that have an incoming `REVIEWED` relationship.
2. The `REVIEWED` relationship must have a `summary` property that contains the word ""compelling"".
3. We will return the `title` of each matching movie.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'compelling'
RETURN m.title
```"
List the names of people who produced movies released between 1990 and 2010.,movies,"<explanation>
1. **Start with the `Movie` node**: We begin by matching all `Movie` nodes.
2. **Filter by `released` property:** We apply a `WHERE` clause to filter for movies released between 1990 and 2010.
3. **Traverse the `PRODUCED` relationship**: We traverse the `PRODUCED` relationship from those movies to find the people who produced them.
4. **Return the `name` property**: We return the `name` property of the `Person` nodes found.

This query finds all movies released between 1990 and 2010, then identifies the people who produced those movies, and finally returns their names.
</explanation>
```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2010
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE 1990 <= m.released <= 2010
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN DISTINCT p.name","1. **Start with the `Movie` node**: We begin by matching all `Movie` nodes.
2. **Filter by `released` property:** We apply a `WHERE` clause to filter for movies released between 1990 and 2010.
3. **Traverse the `PRODUCED` relationship**: We traverse the `PRODUCED` relationship from those movies to find the people who produced them.
4. **Return the `name` property**: We return the `name` property of the `Person` nodes found.

This query finds all movies released between 1990 and 2010, then identifies the people who produced those movies, and finally returns their names."
What is the average number of votes for movies released before 2000?,movies,"<explanation>
1. **Match movies released before 2000:** We start by matching all `Movie` nodes with a `released` property less than 2000. 
2. **Calculate the average votes:** We use `WITH` and `avg()` function to calculate the average number of votes for the matched movies.
3. **Return the average votes:** Finally, we return the average number of votes.

```cypher
MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Match movies released before 2000:** We start by matching all `Movie` nodes with a `released` property less than 2000. 
2. **Calculate the average votes:** We use `WITH` and `avg()` function to calculate the average number of votes for the matched movies.
3. **Return the average votes:** Finally, we return the average number of votes.

```cypher
MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
Find the movies with the highest rating reviewed by people born after 1960.,movies,"<explanation>
This query will identify the movies with the highest rating based on reviews from people born after 1960.
1. We start by matching all people born after 1960.
2. Then we traverse the `REVIEWED` relationships to find movies reviewed by those people, retrieving the rating for each review.
3. The results are then ordered in descending order based on the rating and the top-rated movies are returned.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
WITH m, max(r.rating) AS maxRating
RETURN m.title, maxRating
ORDER BY maxRating DESC
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
WITH m, max(r.rating) AS maxRating
RETURN m.title, maxRating
ORDER BY maxRating DESC
```
",Complex Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
WITH m, max(r.rating) AS maxRating
RETURN m.title, maxRating
ORDER BY maxRating DESC","This query will identify the movies with the highest rating based on reviews from people born after 1960.
1. We start by matching all people born after 1960.
2. Then we traverse the `REVIEWED` relationships to find movies reviewed by those people, retrieving the rating for each review.
3. The results are then ordered in descending order based on the rating and the top-rated movies are returned.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
WITH m, max(r.rating) AS maxRating
RETURN m.title, maxRating
ORDER BY maxRating DESC
```"
Which person acted in the movie with the lowest number of votes?,movies,"<explanation>
This query identifies the person who acted in the movie with the fewest votes.

1. **MATCH**: We start by finding the movie with the lowest number of votes.
2. **WITH**: We use `WITH` to carry the found movie into the next part of the query. 
3. **MATCH**: We then match the movie to any person who acted in it. 
4. **RETURN**: Finally, we return the name of the person.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name","This query identifies the person who acted in the movie with the fewest votes.

1. **MATCH**: We start by finding the movie with the lowest number of votes.
2. **WITH**: We use `WITH` to carry the found movie into the next part of the query. 
3. **MATCH**: We then match the movie to any person who acted in it. 
4. **RETURN**: Finally, we return the name of the person.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```"
"List the movies released after 2000 with a tagline containing the word ""end"".",movies,"<explanation>
This query looks for movies released after 2000 that contain the word ""end"" in their tagline.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these nodes to only include movies released after 2000 and containing the word ""end"" in the tagline.
3. **RETURN Clause:** We return the titles of the movies matching the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND toLower(m.tagline) CONTAINS ""end""
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND toLower(m.tagline) CONTAINS ""end""
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 2000 AND toLower(m.tagline) CONTAINS ""end""
RETURN m.title","This query looks for movies released after 2000 that contain the word ""end"" in their tagline.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these nodes to only include movies released after 2000 and containing the word ""end"" in the tagline.
3. **RETURN Clause:** We return the titles of the movies matching the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND toLower(m.tagline) CONTAINS ""end""
RETURN m.title
```"
What are the review summaries for movies with a rating less than 60?,movies,"<explanation>
This query looks for movies with reviews rated less than 60 and returns the summaries of those reviews.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This finds all movies with reviews.
2. **WHERE r.rating < 60** - This filters results to only include movies with ratings less than 60.
3. **RETURN  r.summary** - This returns the summaries of the reviews for those movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN r.summary
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN r.summary
```
",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN r.summary","This query looks for movies with reviews rated less than 60 and returns the summaries of those reviews.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This finds all movies with reviews.
2. **WHERE r.rating < 60** - This filters results to only include movies with ratings less than 60.
3. **RETURN  r.summary** - This returns the summaries of the reviews for those movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN r.summary
```"
Find the people born before 1950 who directed movies with more than 500 votes.,movies,"<explanation>
This query first matches all people born before 1950. Then, it traverses the `DIRECTED` relationship to find all movies directed by those people. Finally, it filters these movies to only include those that have received more than 500 votes and returns the names of the directors. 
<br/>
1. **MATCH (p:Person)**: This part of the query starts by matching all nodes with the label ""Person"" and assigns them to the variable ""p.""
2. **WHERE p.born < 1950**: This line filters the matched ""Person"" nodes to only include those where the ""born"" property is less than 1950.
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This part of the query looks for relationships of type ""DIRECTED"" starting from the ""Person"" nodes (p) matched in the previous step and ending at ""Movie"" nodes (m).
4. **WHERE m.votes > 500**: This line filters the matched ""Movie"" nodes to only include those where the ""votes"" property is greater than 500.
5. **RETURN p.name**: This line returns the ""name"" property of the ""Person"" nodes (p) that satisfied all the previous conditions. 
<br/>
This query effectively combines matching and filtering to pinpoint the directors born before 1950 who have directed movies with more than 500 votes.
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1950
MATCH (p)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name
```",Complex Retrieval Queries,"MATCH (p:Person)
WHERE p.born < 1950
MATCH (p)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name","This query first matches all people born before 1950. Then, it traverses the `DIRECTED` relationship to find all movies directed by those people. Finally, it filters these movies to only include those that have received more than 500 votes and returns the names of the directors. 
<br/>
1. **MATCH (p:Person)**: This part of the query starts by matching all nodes with the label ""Person"" and assigns them to the variable ""p.""
2. **WHERE p.born < 1950**: This line filters the matched ""Person"" nodes to only include those where the ""born"" property is less than 1950.
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This part of the query looks for relationships of type ""DIRECTED"" starting from the ""Person"" nodes (p) matched in the previous step and ending at ""Movie"" nodes (m).
4. **WHERE m.votes > 500**: This line filters the matched ""Movie"" nodes to only include those where the ""votes"" property is greater than 500.
5. **RETURN p.name**: This line returns the ""name"" property of the ""Person"" nodes (p) that satisfied all the previous conditions. 
<br/>
This query effectively combines matching and filtering to pinpoint the directors born before 1950 who have directed movies with more than 500 votes."
"Which movies have a tagline containing the word ""Speed""?",movies,"<explanation>This query searches for all movies that contain the word ""Speed"" in their tagline.
1. It starts by matching all Movie nodes.
2. It filters these nodes, keeping only the movies where the tagline contains the word ""Speed"". 
3. It then returns the titles of these movies. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN m.title","This query searches for all movies that contain the word ""Speed"" in their tagline.
1. It starts by matching all Movie nodes.
2. It filters these nodes, keeping only the movies where the tagline contains the word ""Speed"". 
3. It then returns the titles of these movies."
List the names of people who wrote movies released before 1990.,movies,"<explanation>
This query first finds all movies released before 1990. Then, for each of those movies, it finds the people who wrote the movie and returns their names.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them to the variable ""m"". 
2. **WHERE m.released < 1990** - This line filters the matched ""Movie"" nodes, keeping only those released before 1990. 
3. **MATCH (p:Person)-[:WROTE]->(m)** - This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered movies.
4. **RETURN p.name** - This line returns the ""name"" property of the ""Person"" nodes found in the previous step.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name","This query first finds all movies released before 1990. Then, for each of those movies, it finds the people who wrote the movie and returns their names.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them to the variable ""m"". 
2. **WHERE m.released < 1990** - This line filters the matched ""Movie"" nodes, keeping only those released before 1990. 
3. **MATCH (p:Person)-[:WROTE]->(m)** - This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered movies.
4. **RETURN p.name** - This line returns the ""name"" property of the ""Person"" nodes found in the previous step."
What is the release year of the movie with the lowest rating?,movies,"<explanation>
This query identifies the movie with the lowest review rating and returns its release year. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: This line matches all movies that have been reviewed.
2. **WITH m, min(r.rating) AS min_rating**: This line finds the minimum rating among all reviews.
3. **MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.rating = min_rating**: This line matches movies that have a review with the minimum rating.
4. **RETURN m.released**: This line returns the release year of the movie with the lowest rating.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, min(r.rating) AS min_rating
MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.rating = min_rating
RETURN m.released
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, min(r.rating) AS min_rating
MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.rating = min_rating
RETURN m.released","This query identifies the movie with the lowest review rating and returns its release year. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: This line matches all movies that have been reviewed.
2. **WITH m, min(r.rating) AS min_rating**: This line finds the minimum rating among all reviews.
3. **MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.rating = min_rating**: This line matches movies that have a review with the minimum rating.
4. **RETURN m.released**: This line returns the release year of the movie with the lowest rating."
Find the movies acted in by people born after 1965 with a rating under 70.,movies,"<explanation>
1. **MATCH** the pattern of a person acting in a movie, and that same person having reviewed that movie.
2. **WHERE** the person's birth year is after 1965 and the rating they gave the movie is below 70.
3. **RETURN** the titles of those movies.

</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
WHERE p.born > 1965 AND r.rating < 70
RETURN DISTINCT m.title
```",Complex Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
WHERE p.born > 1965 AND r.rating < 70
RETURN DISTINCT m.title","1. **MATCH** the pattern of a person acting in a movie, and that same person having reviewed that movie.
2. **WHERE** the person's birth year is after 1965 and the rating they gave the movie is below 70.
3. **RETURN** the titles of those movies."
"Which person directed the movie ""Cloud Atlas""?",movies,"<explanation>This query starts by matching a Movie node with the title ""Cloud Atlas."" Then, it traverses the DIRECTED relationship to find the Person node who directed that movie. Finally, it returns the name of that Person.
</explanation>
```cypher
MATCH (m:Movie {title: ""Cloud Atlas""})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""Cloud Atlas""})<-[:DIRECTED]-(p:Person)
RETURN p.name","This query starts by matching a Movie node with the title ""Cloud Atlas."" Then, it traverses the DIRECTED relationship to find the Person node who directed that movie. Finally, it returns the name of that Person."
"List the movies with a tagline containing the word ""problem"" released before 2000.",movies,"<explanation>
This query looks for all movies that contain the word ""problem"" in their tagline, filters those results down to only movies released before the year 2000, and then returns the titles of those movies. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'problem' AND m.released < 2000
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'problem' AND m.released < 2000
RETURN m.title","This query looks for all movies that contain the word ""problem"" in their tagline, filters those results down to only movies released before the year 2000, and then returns the titles of those movies."
What are the roles of Laurence Fishburne in movies with more than 100 votes?,movies,"<explanation>
1. We need to find the person named ""Laurence Fishburne"".
2. We then traverse his ACTED_IN relationships to find the movies he acted in.
3. We filter these movies to only those with more than 100 votes.
4. Finally, we return the titles of those movies and the roles Laurence Fishburne played in each.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 100
RETURN m.title, m.votes, p.name, collect(m.tagline) AS taglines
```
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 100
RETURN m.title AS movie, collect(m.tagline) AS taglines, collect(r.roles) AS roles
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 100
RETURN m.title, m.votes, p.name, collect(m.tagline) AS taglines","1. We need to find the person named ""Laurence Fishburne"".
2. We then traverse his ACTED_IN relationships to find the movies he acted in.
3. We filter these movies to only those with more than 100 votes.
4. Finally, we return the titles of those movies and the roles Laurence Fishburne played in each.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 100
RETURN m.title, m.votes, p.name, collect(m.tagline) AS taglines
```"
Find the people who produced movies with a rating higher than 95.,movies,"<explanation>
This query first matches all people who have a PRODUCED relationship with a movie. Then, it filters those results to only include movies with a rating property on the REVIEWED relationship greater than 95. Finally, it returns the names of the people who produced those movies. 

1. **MATCH**: Start by matching the `PRODUCED` relationship between a `Person` and a `Movie`.
2. **MATCH**: Match the `REVIEWED` relationship on the `Movie`.
3. **WHERE**: Filter for `REVIEWED` relationships where the rating is greater than 95.
4. **RETURN**: Return the `name` of the `Person`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 95
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 95
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 95
RETURN DISTINCT p.name","This query first matches all people who have a PRODUCED relationship with a movie. Then, it filters those results to only include movies with a rating property on the REVIEWED relationship greater than 95. Finally, it returns the names of the people who produced those movies. 

1. **MATCH**: Start by matching the `PRODUCED` relationship between a `Person` and a `Movie`.
2. **MATCH**: Match the `REVIEWED` relationship on the `Movie`.
3. **WHERE**: Filter for `REVIEWED` relationships where the rating is greater than 95.
4. **RETURN**: Return the `name` of the `Person`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 95
RETURN DISTINCT p.name
```"
"Which movies have a review summary containing the word ""journey""?",movies,"<explanation>
This Cypher query should find all movies with reviews containing the word ""journey"".
1. We find all `REVIEWED` relationships with the word ""journey"" in the `summary` property.
2. We return the `title` of each of the movies associated with the returned relationships.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'journey'
RETURN m.title","This Cypher query should find all movies with reviews containing the word ""journey"".
1. We find all `REVIEWED` relationships with the word ""journey"" in the `summary` property.
2. We return the `title` of each of the movies associated with the returned relationships.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```"
List the names of people who directed movies released between 2000 and 2012.,movies,"<explanation>
This query looks for `Person` nodes that have a `DIRECTED` relationship with a `Movie` node. It filters the `Movie` nodes to only include those released between 2000 and 2012 and then returns the names of the `Person` nodes. 
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 2000 AND 2012
RETURN p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 2000 AND 2012
RETURN p.name",This query looks for `Person` nodes that have a `DIRECTED` relationship with a `Movie` node. It filters the `Movie` nodes to only include those released between 2000 and 2012 and then returns the names of the `Person` nodes.
What is the average rating of movies with less than 100 votes?,movies,"<explanation>
1. **Find movies with less than 100 votes:**
   - Start with `MATCH (m:Movie)` to look at all movies.
   - Use `WHERE m.votes < 100` to filter for movies with less than 100 votes.

2. **Find the reviews for these movies:**
   - Traverse the `REVIEWED` relationship from the movie nodes using `WITH (m)-[:REVIEWED]->(r)` to access the review nodes.

3. **Calculate the average rating:**
   - Use `WITH avg(r.rating) AS average_rating` to calculate the average rating of the reviews.

4. **Return the average rating:**
   - Use `RETURN average_rating` to return the calculated average rating.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes < 100
WITH (m)-[:REVIEWED]->(r)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes < 100
WITH (m)-[:REVIEWED]->(r)
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find movies with less than 100 votes:**
   - Start with `MATCH (m:Movie)` to look at all movies.
   - Use `WHERE m.votes < 100` to filter for movies with less than 100 votes.

2. **Find the reviews for these movies:**
   - Traverse the `REVIEWED` relationship from the movie nodes using `WITH (m)-[:REVIEWED]->(r)` to access the review nodes.

3. **Calculate the average rating:**
   - Use `WITH avg(r.rating) AS average_rating` to calculate the average rating of the reviews.

4. **Return the average rating:**
   - Use `RETURN average_rating` to return the calculated average rating."
Find the movies with the lowest rating reviewed by people born before 1955.,movies,"<explanation>
This query finds all movies reviewed by people born before 1955, orders them by rating in ascending order, and returns only the movie with the lowest rating. 

1. **MATCH**: We start by matching two nodes: (p:Person) and (m:Movie) connected by the relationship [:REVIEWED].
2. **WHERE**: We filter for people born before 1955 using the 'born' property. 
3. **WITH**: We use WITH to pass the relevant variables (m, rating) to the next part of the query.
4. **ORDER BY**: We order the results by the 'rating' property in ascending order to find the lowest-rated movie.
5. **RETURN**: We return the 'title' property of the movie node (m) and its corresponding 'rating'.
6. **LIMIT**: We use LIMIT 1 to return only the movie with the lowest rating.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1955
WITH m, r.rating
ORDER BY r.rating ASC
RETURN m.title, r.rating
LIMIT 1
```",Complex Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1955
WITH m, r.rating
ORDER BY r.rating ASC
RETURN m.title, r.rating
LIMIT 1","This query finds all movies reviewed by people born before 1955, orders them by rating in ascending order, and returns only the movie with the lowest rating. 

1. **MATCH**: We start by matching two nodes: (p:Person) and (m:Movie) connected by the relationship [:REVIEWED].
2. **WHERE**: We filter for people born before 1955 using the 'born' property. 
3. **WITH**: We use WITH to pass the relevant variables (m, rating) to the next part of the query.
4. **ORDER BY**: We order the results by the 'rating' property in ascending order to find the lowest-rated movie.
5. **RETURN**: We return the 'title' property of the movie node (m) and its corresponding 'rating'.
6. **LIMIT**: We use LIMIT 1 to return only the movie with the lowest rating."
"Which person acted in the movie with the tagline ""Welcome to the Real World""?",movies,"<explanation>
1. We start by matching the Movie node with the tagline ""Welcome to the Real World"".
2. Then, we traverse the ACTED_IN relationship backwards to find the Person node connected to that movie.
3. Finally, we return the name of the Person.

```cypher
MATCH (m:Movie {tagline: ""Welcome to the Real World""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {tagline: ""Welcome to the Real World""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {tagline: ""Welcome to the Real World""})<-[:ACTED_IN]-(p:Person)
RETURN p.name","1. We start by matching the Movie node with the tagline ""Welcome to the Real World"".
2. Then, we traverse the ACTED_IN relationship backwards to find the Person node connected to that movie.
3. Finally, we return the name of the Person.

```cypher
MATCH (m:Movie {tagline: ""Welcome to the Real World""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```"
"List the movies released before 1990 with a tagline containing the word ""beginning"".",movies,"<explanation>
This query looks for `Movie` nodes that were released before 1990 and have a tagline containing the word ""beginning"".

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these nodes to only include movies released before 1990 and having the word ""beginning"" in their tagline.
3. **RETURN Clause:**  We return the title of those movies. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990 AND toLower(m.tagline) CONTAINS ""beginning""
RETURN m.title
```
",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released < 1990 AND toLower(m.tagline) CONTAINS ""beginning""
RETURN m.title","This query looks for `Movie` nodes that were released before 1990 and have a tagline containing the word ""beginning"".

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these nodes to only include movies released before 1990 and having the word ""beginning"" in their tagline.
3. **RETURN Clause:**  We return the title of those movies."
What are the review summaries for movies with more than 500 votes?,movies,"<explanation>
1. We start by matching all movies with more than 500 votes.
2. Then find all the `REVIEWED` relationships associated with those movies.
3. Finally, return the movie title and the review summary.

```cypher
MATCH (m:Movie)
WHERE m.votes > 500
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN m.title, p.summary
```
",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes > 500
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN m.title, p.summary",
Find the people born after 1960 who wrote movies with less than 100 votes.,movies,"<explanation>
This query first identifies people born after 1960. Then it matches those people to movies they wrote. Finally, it filters those results to only include movies with less than 100 votes.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960 AND m.votes < 100
RETURN p.name, m.title
```",Complex Retrieval Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960 AND m.votes < 100
RETURN p.name, m.title","This query first identifies people born after 1960. Then it matches those people to movies they wrote. Finally, it filters those results to only include movies with less than 100 votes."
"Which movies have a tagline containing the word ""limits""?",movies,"<explanation>This query looks for all movies that contain the word ""limits"" in their tagline.
- It starts by matching all Movie nodes.
- Then it filters these nodes, keeping only the movies where the tagline property contains the word ""limits"".
- Finally, the query returns the titles of those movies.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN m.title","This query looks for all movies that contain the word ""limits"" in their tagline.
- It starts by matching all Movie nodes.
- Then it filters these nodes, keeping only the movies where the tagline property contains the word ""limits"".
- Finally, the query returns the titles of those movies."
List the names of people who directed movies with a rating over 90.,movies,"<explanation>
This query starts by matching all `Person` nodes that have a `DIRECTED` relationship with a `Movie` node. Then it filters these pairs based on the `rating` property of the `REVIEWED` relationship associated with those movies, only keeping the ones with a `rating` greater than 90. Finally, it returns the distinct `name` property of the `Person` nodes. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()**: This part of the query finds all persons who directed a movie which has been reviewed.
2. **WHERE r.rating > 90**: This filters the results, only keeping the movies with a rating higher than 90.
3. **RETURN DISTINCT p.name**: This returns the names of the directors of those highly rated movies, making sure to remove any duplicate names. 
<explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN DISTINCT p.name",
What is the release year of the movie with the second highest rating?  (Limit to 3),movies,"<explanation>
1. **Find movies with ratings:** Match all movies and their associated reviewers and ratings using `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)`.
2. **Order the movies by rating:** Use `WITH m, r ORDER BY r.rating DESC` to order the movies in descending order of their ratings.
3. **Limit to the top three movies:** Use `LIMIT 3` to select only the top three movies with the highest ratings.
4. **Return the release year of the second movie:** Use `RETURN collect(m.released)[1]` to return the release year of the second movie in the ordered list. `collect(m.released)` aggregates the release years into a list, and `[1]` accesses the second element (index 1) of that list.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, r ORDER BY r.rating DESC
LIMIT 3
RETURN collect(m.released)[1]
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, r ORDER BY r.rating DESC
LIMIT 3
RETURN collect(m.released)[1]
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, r ORDER BY r.rating DESC
LIMIT 3
RETURN collect(m.released)[1]","1. **Find movies with ratings:** Match all movies and their associated reviewers and ratings using `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)`.
2. **Order the movies by rating:** Use `WITH m, r ORDER BY r.rating DESC` to order the movies in descending order of their ratings.
3. **Limit to the top three movies:** Use `LIMIT 3` to select only the top three movies with the highest ratings.
4. **Return the release year of the second movie:** Use `RETURN collect(m.released)[1]` to return the release year of the second movie in the ordered list. `collect(m.released)` aggregates the release years into a list, and `[1]` accesses the second element (index 1) of that list.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, r ORDER BY r.rating DESC
LIMIT 3
RETURN collect(m.released)[1]
```"
Find the movies acted in by Laurence Fishburne with a rating above 80.,movies,"<explanation>
1. **MATCH** the person named ""Laurence Fishburne"".
2. **MATCH** movies acted in by that person.
3. **WHERE** the rating of the movie is greater than 80.
4. **RETURN** the movie titles.
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})
MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN m.title
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})
MATCH (p)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN m.title","1. **MATCH** the person named ""Laurence Fishburne"".
2. **MATCH** movies acted in by that person.
3. **WHERE** the rating of the movie is greater than 80.
4. **RETURN** the movie titles."
Who directed the movie with the highest number of votes? (Limit to 3),movies,"<explanation>
This query first matches the Movie with the highest number of votes using `ORDER BY` and `LIMIT`. It then traverses the `DIRECTED` relationship from that movie to the Person nodes representing the directors. Finally, the query returns the names of the directors.

1. **Find the movie with the highest number of votes:**
   - `MATCH (m:Movie)` matches all nodes with the label ""Movie"".
   - `ORDER BY m.votes DESC` orders the matched movies in descending order based on their `votes` property.
   - `LIMIT 1` limits the result to the top movie with the highest number of votes.
2. **Find the director of that movie:**
   - `MATCH (p:Person)-[:DIRECTED]->(m)` matches all ""Person"" nodes that have a ""DIRECTED"" relationship with the previously matched movie.
3. **Return the director's name:**
   - `RETURN p.name` returns the `name` property of the directors.

</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.votes DESC
LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
ORDER BY m.votes DESC
LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","This query first matches the Movie with the highest number of votes using `ORDER BY` and `LIMIT`. It then traverses the `DIRECTED` relationship from that movie to the Person nodes representing the directors. Finally, the query returns the names of the directors.

1. **Find the movie with the highest number of votes:**
   - `MATCH (m:Movie)` matches all nodes with the label ""Movie"".
   - `ORDER BY m.votes DESC` orders the matched movies in descending order based on their `votes` property.
   - `LIMIT 1` limits the result to the top movie with the highest number of votes.
2. **Find the director of that movie:**
   - `MATCH (p:Person)-[:DIRECTED]->(m)` matches all ""Person"" nodes that have a ""DIRECTED"" relationship with the previously matched movie.
3. **Return the director's name:**
   - `RETURN p.name` returns the `name` property of the directors."
"List the movies with a review summary containing ""funny"" released after 1990.",movies,"<explanation>
This query looks for all movies that have a review containing the word ""funny"" and were released after 1990.
1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: We start by finding all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'funny' AND m.released > 1990**: We filter these movies to only include those that have the word ""funny"" in their review summary and were released after 1990.
3. **RETURN m.title**: Finally, we return the titles of the movies that meet these criteria.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'funny' AND m.released > 1990
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary CONTAINS 'funny' AND m.released > 1990
RETURN m.title","This query looks for all movies that have a review containing the word ""funny"" and were released after 1990.
1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: We start by finding all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'funny' AND m.released > 1990**: We filter these movies to only include those that have the word ""funny"" in their review summary and were released after 1990.
3. **RETURN m.title**: Finally, we return the titles of the movies that meet these criteria."
What are the roles of Hugo Weaving in movies with less than 200 votes?,movies,"<explanation>
1. We start by finding the `Person` node with the `name` ""Hugo Weaving"".
2. Then, we traverse the `ACTED_IN` relationships to find the `Movie` nodes connected to Hugo Weaving.
3. We filter these movies to only include those with less than 200 `votes`.
4. Finally, we return the `title` of these movies and the `roles` Hugo Weaving played in each.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 200
RETURN m.title, m.votes,  m.tagline, collect(m.released) AS years,  p.name, collect(m.released)
```
</explanation>
```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 200
RETURN m.title, m.roles
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 200
RETURN m.title, m.votes,  m.tagline, collect(m.released) AS years,  p.name, collect(m.released)","1. We start by finding the `Person` node with the `name` ""Hugo Weaving"".
2. Then, we traverse the `ACTED_IN` relationships to find the `Movie` nodes connected to Hugo Weaving.
3. We filter these movies to only include those with less than 200 `votes`.
4. Finally, we return the `title` of these movies and the `roles` Hugo Weaving played in each.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 200
RETURN m.title, m.votes,  m.tagline, collect(m.released) AS years,  p.name, collect(m.released)
```"
Find the people who wrote movies with a rating lower than 60.,movies,"<explanation>
This query starts by finding all `Person` nodes that have a `WROTE` relationship with a `Movie` node. Then it filters these results to only include movies with a `rating` property less than 60. Finally, it returns the names of the people who wrote those movies.

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)** - This part of the query finds all `Person` nodes that have a `WROTE` relationship with a `Movie` node. 
2. **WHERE m.rating < 60** - This filters the results to only include movies with a `rating` property less than 60.
3. **RETURN p.name** - This returns the names of the people who wrote those movies.

</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.rating < 60
RETURN p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.rating < 60
RETURN p.name","This query starts by finding all `Person` nodes that have a `WROTE` relationship with a `Movie` node. Then it filters these results to only include movies with a `rating` property less than 60. Finally, it returns the names of the people who wrote those movies.

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)** - This part of the query finds all `Person` nodes that have a `WROTE` relationship with a `Movie` node. 
2. **WHERE m.rating < 60** - This filters the results to only include movies with a `rating` property less than 60.
3. **RETURN p.name** - This returns the names of the people who wrote those movies."
"Which movies have a tagline containing the word ""connected"" and were released before 2010?",movies,"<explanation>
This query looks for movies with the word ""connected"" in the tagline and released before 2010. 

1. **MATCH (m:Movie)**: This starts by looking for all nodes with the label ""Movie"".
2. **WHERE m.tagline CONTAINS 'connected' AND m.released < 2010**: This filters those movies to only include those where the tagline property contains the word ""connected"" and the released property is less than 2010. 
3. **RETURN m**: This returns the movies that match the criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected' AND m.released < 2010
RETURN m
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'connected' AND m.released < 2010
RETURN m","This query looks for movies with the word ""connected"" in the tagline and released before 2010. 

1. **MATCH (m:Movie)**: This starts by looking for all nodes with the label ""Movie"".
2. **WHERE m.tagline CONTAINS 'connected' AND m.released < 2010**: This filters those movies to only include those where the tagline property contains the word ""connected"" and the released property is less than 2010. 
3. **RETURN m**: This returns the movies that match the criteria."
"List the names of people born after 1950 who acted in ""Apollo 13"".",movies,"<explanation>
This query starts by matching the movie with the title ""Apollo 13"". Then, it traverses the ACTED_IN relationships from that movie to find the actors who acted in it. Finally, it filters the actors based on their birth year being greater than 1950 and returns their names.
</explanation>
```cypher
MATCH (m:Movie {title: 'Apollo 13'})<-[:ACTED_IN]-(a:Person)
WHERE a.born > 1950
RETURN a.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: 'Apollo 13'})<-[:ACTED_IN]-(a:Person)
WHERE a.born > 1950
RETURN a.name","This query starts by matching the movie with the title ""Apollo 13"". Then, it traverses the ACTED_IN relationships from that movie to find the actors who acted in it. Finally, it filters the actors based on their birth year being greater than 1950 and returns their names."
What is the average number of votes for movies with a rating greater than 80?,movies,"<explanation>
1. **MATCH reviewed movies with a rating greater than 80:** We start by identifying movies that have been reviewed and have a rating greater than 80.
2. **Calculate the average vote count:**  We then calculate the average number of votes for the selected movies.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Complex Retrieval Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **MATCH reviewed movies with a rating greater than 80:** We start by identifying movies that have been reviewed and have a rating greater than 80.
2. **Calculate the average vote count:**  We then calculate the average number of votes for the selected movies.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
Find the movies with the highest rating directed by people born before 1960. (Limit to 3),movies,"<explanation>
This query starts by matching all directors born before 1960 and the movies they directed. It then orders those movies by rating in descending order, limits the result to 3, and returns the title of those movies along with their rating.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
WITH m, avg(m.votes) AS averageRating
ORDER BY averageRating DESC
RETURN m.title, averageRating
LIMIT 3
```",Complex Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
WITH m, avg(m.votes) AS averageRating
ORDER BY averageRating DESC
RETURN m.title, averageRating
LIMIT 3","This query starts by matching all directors born before 1960 and the movies they directed. It then orders those movies by rating in descending order, limits the result to 3, and returns the title of those movies along with their rating."
"Which person produced the movie ""Speed Racer""?",movies,"<explanation>
This Cypher query identifies the person who produced the movie ""Speed Racer"" through these steps:

1. **Match the Movie:** It starts by finding the movie with the title ""Speed Racer.""
2. **Traverse the PRODUCED Relationship:** It follows the ""PRODUCED"" relationship backward (incoming direction) to find the person who produced that movie. 
3. **Return the Person's Name:** It returns the `name` property of the identified person. 
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name","This Cypher query identifies the person who produced the movie ""Speed Racer"" through these steps:

1. **Match the Movie:** It starts by finding the movie with the title ""Speed Racer.""
2. **Traverse the PRODUCED Relationship:** It follows the ""PRODUCED"" relationship backward (incoming direction) to find the person who produced that movie. 
3. **Return the Person's Name:** It returns the `name` property of the identified person."
"List the movies released after 2005 with a tagline containing the word ""Everything"".",movies,"<explanation>
This query looks for movies released after 2005 and filters them based on whether their tagline contains the word ""Everything.""
1. **MATCH Clause**: It starts by finding all `Movie` nodes.
2. **WHERE Clause**: It filters these movies based on the `released` property being greater than 2005 and the `tagline` property containing the word ""Everything.""
3. **RETURN Clause**: Finally, it returns the `title` of the matching movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2005 AND toLower(m.tagline) CONTAINS ""everything""
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2005 AND toLower(m.tagline) CONTAINS ""everything""
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released > 2005 AND toLower(m.tagline) CONTAINS ""everything""
RETURN m.title","This query looks for movies released after 2005 and filters them based on whether their tagline contains the word ""Everything.""
1. **MATCH Clause**: It starts by finding all `Movie` nodes.
2. **WHERE Clause**: It filters these movies based on the `released` property being greater than 2005 and the `tagline` property containing the word ""Everything.""
3. **RETURN Clause**: Finally, it returns the `title` of the matching movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2005 AND toLower(m.tagline) CONTAINS ""everything""
RETURN m.title
```"
What are the review summaries for movies with a rating between 70 and 90?,movies,"<explanation>
This query starts with all `REVIEWED` relationships. Then, it filters these relationships based on the rating property to only include those with a rating between 70 (inclusive) and 90 (inclusive). Finally, the query returns the summary property of the selected `REVIEWED` relationships.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)** - This part of the query matches all relationships of type `REVIEWED` between nodes of type `Person` and nodes of type `Movie`.
2. **WHERE r.rating >= 70 AND r.rating <= 90** - This part filters the matched relationships to only include those where the rating property is between 70 and 90 (inclusive).
3. **RETURN r.summary** - This part of the query returns the summaries of the reviews for the filtered relationships.

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 70 AND r.rating <= 90
RETURN r.summary
```",Complex Retrieval Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 70 AND r.rating <= 90
RETURN r.summary","This query starts with all `REVIEWED` relationships. Then, it filters these relationships based on the rating property to only include those with a rating between 70 (inclusive) and 90 (inclusive). Finally, the query returns the summary property of the selected `REVIEWED` relationships.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)** - This part of the query matches all relationships of type `REVIEWED` between nodes of type `Person` and nodes of type `Movie`.
2. **WHERE r.rating >= 70 AND r.rating <= 90** - This part filters the matched relationships to only include those where the rating property is between 70 and 90 (inclusive).
3. **RETURN r.summary** - This part of the query returns the summaries of the reviews for the filtered relationships."
Find the people born before 1955 who wrote movies with more than 200 votes.,movies,"<explanation>
This query starts by matching `(:Person)` nodes where `born` property is less than 1955. Then it traverses `[:WROTE]` relationships to `(:Movie)` nodes. It filters these movies to only those with more than 200 votes using a `WHERE` clause. Finally, it returns the names of the people who meet those criteria.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1955 AND m.votes > 200
RETURN p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1955 AND m.votes > 200
RETURN p.name","This query starts by matching `(:Person)` nodes where `born` property is less than 1955. Then it traverses `[:WROTE]` relationships to `(:Movie)` nodes. It filters these movies to only those with more than 200 votes using a `WHERE` clause. Finally, it returns the names of the people who meet those criteria."
"Which movies have a tagline containing the word ""Houston""?",movies,"<explanation>
This query looks for movies that contain the word ""Houston"" in their tagline. 

1. **MATCH Clause:** We start by matching all Movie nodes.
2. **WHERE Clause:**  We then filter these nodes to only include movies where the tagline property contains the word ""Houston"".
3. **RETURN Clause:** Finally, we return the title of these movies.

```cypher
MATCH (m:Movie)
WHERE toLower(m.tagline) CONTAINS 'houston'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE toLower(m.tagline) CONTAINS 'houston'
RETURN m.title
```
",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE toLower(m.tagline) CONTAINS 'houston'
RETURN m.title","This query looks for movies that contain the word ""Houston"" in their tagline. 

1. **MATCH Clause:** We start by matching all Movie nodes.
2. **WHERE Clause:**  We then filter these nodes to only include movies where the tagline property contains the word ""Houston"".
3. **RETURN Clause:** Finally, we return the title of these movies.

```cypher
MATCH (m:Movie)
WHERE toLower(m.tagline) CONTAINS 'houston'
RETURN m.title
```"
List the names of people who acted in movies directed by Joel Silver.,movies,"<explanation>
This Cypher query identifies people who acted in movies directed by Joel Silver with these steps:

1. **Find the director:** Locate the ""Person"" node with the name ""Joel Silver"" 
2. **Identify movies directed:** Find all ""Movie"" nodes connected to the director node by the ""DIRECTED"" relationship.
3. **Identify actors:** Find all ""Person"" nodes connected to those movies by the ""ACTED_IN"" relationship.
4. **Return names:** Return the ""name"" property of each identified actor.

```cypher
MATCH (director:Person {name: ""Joel Silver""})-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```
</explanation>
```cypher
MATCH (director:Person {name: ""Joel Silver""})-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```",Complex Retrieval Queries,"MATCH (director:Person {name: ""Joel Silver""})-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name","This Cypher query identifies people who acted in movies directed by Joel Silver with these steps:

1. **Find the director:** Locate the ""Person"" node with the name ""Joel Silver"" 
2. **Identify movies directed:** Find all ""Movie"" nodes connected to the director node by the ""DIRECTED"" relationship.
3. **Identify actors:** Find all ""Person"" nodes connected to those movies by the ""ACTED_IN"" relationship.
4. **Return names:** Return the ""name"" property of each identified actor.

```cypher
MATCH (director:Person {name: ""Joel Silver""})-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```"
What is the release year of the movie with the third highest number of votes? (Limit to 3),movies,"<explanation>
1. **Find movies and their vote counts:** Start by matching all `Movie` nodes.
2. **Order by votes in descending order:** Use `ORDER BY` clause on the `votes` property in descending order to get the movies with the most votes first.
3. **Limit to the top three:** Use `LIMIT` clause to keep only the top three movies.
4. **Return the release year:**  Use `RETURN` clause to output the `released` property of the movies.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC
LIMIT 3
RETURN m.released AS release_year
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC
LIMIT 3
RETURN m.released AS release_year
```",Complex Retrieval Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC
LIMIT 3
RETURN m.released AS release_year","1. **Find movies and their vote counts:** Start by matching all `Movie` nodes.
2. **Order by votes in descending order:** Use `ORDER BY` clause on the `votes` property in descending order to get the movies with the most votes first.
3. **Limit to the top three:** Use `LIMIT` clause to keep only the top three movies.
4. **Return the release year:**  Use `RETURN` clause to output the `released` property of the movies.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC
LIMIT 3
RETURN m.released AS release_year
```"
Find the movies acted in by Tom Hanks with a rating below 80.,movies,"<explanation>
1. **Find Tom Hanks:** We need to start by finding the `Person` node with the name ""Tom Hanks.""
2. **Traverse relationships:** We then traverse the `ACTED_IN` relationships originating from Tom Hanks' node.
3. **Filter based on rating:** We'll filter these relationships based on the `rating` property of the `REVIEWED` relationship being less than 80.
4. **Return the movies:** Finally, we return the `title` of the `Movie` nodes connected to the filtered relationships.

```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN m.title
```",Complex Retrieval Queries,"MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN m.title","1. **Find Tom Hanks:** We need to start by finding the `Person` node with the name ""Tom Hanks.""
2. **Traverse relationships:** We then traverse the `ACTED_IN` relationships originating from Tom Hanks' node.
3. **Filter based on rating:** We'll filter these relationships based on the `rating` property of the `REVIEWED` relationship being less than 80.
4. **Return the movies:** Finally, we return the `title` of the `Movie` nodes connected to the filtered relationships.

```cypher
MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN m.title
```"
Who wrote the movie with the lowest number of votes? (Limit to 3),movies,"<explanation>
This query first matches all `Movie` nodes. Then, it uses the `ORDER BY` clause to sort the movies in ascending order of their `votes` property. The `WITH` clause allows to limit the number of results to 3 using `LIMIT`. Finally, the query returns the names of the writers of those movies. 
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes
WITH m LIMIT 3
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes
WITH m LIMIT 3
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name","This query first matches all `Movie` nodes. Then, it uses the `ORDER BY` clause to sort the movies in ascending order of their `votes` property. The `WITH` clause allows to limit the number of results to 3 using `LIMIT`. Finally, the query returns the names of the writers of those movies."
"List the movies with a review summary containing ""solid"" released before 2000.",movies,"<explanation>
This query looks for all movies that have a review with the word ""solid"" in the summary and were released before the year 2000. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'solid' AND m.released < 2000**: This filters those movies to only include ones that have the word ""solid"" in the review summary and were released before 2000.
3. **RETURN m.title**: Finally, we return the title of the movie. 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'solid' AND m.released < 2000
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'solid' AND m.released < 2000
RETURN m.title","This query looks for all movies that have a review with the word ""solid"" in the summary and were released before the year 2000. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'solid' AND m.released < 2000**: This filters those movies to only include ones that have the word ""solid"" in the review summary and were released before 2000.
3. **RETURN m.title**: Finally, we return the title of the movie."
What are the roles of Laurence Fishburne in movies released before 2000?,movies,"<explanation>
1. We need to find a Person node with name = ""Laurence Fishburne""
2. Then, we need to traverse ACTED_IN relationships, outgoing from this node to Movie nodes.
3. We will filter the movies by released property.
4. We will return the roles property from ACTED_IN relationship.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released, p.name, m.tagline
```
",Complex Retrieval Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, m.released, p.name, m.tagline",
Find the people who produced movies with a rating between 75 and 90.,movies,"<explanation>
This Cypher query starts by finding all people who have a PRODUCED relationship with a Movie node.  Then it filters down to the Movie nodes that have a rating property on their REVIEWED relationship that is between 75 and 90. Finally, it returns the name of the people who produced those movies. 
<explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating >= 75 AND r.rating <= 90
RETURN DISTINCT p.name 
```",Complex Retrieval Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating >= 75 AND r.rating <= 90
RETURN DISTINCT p.name",
"Which movies have a tagline containing the words ""has a beginning"" and were released after 2000?",movies,"<explanation>
This Cypher query will find all movies that have ""has a beginning"" in their tagline and were released after the year 2000. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.tagline CONTAINS 'has a beginning' AND m.released > 2000**: This line filters the matched movies to only include those where the `tagline` property contains the phrase ""has a beginning"" and the `released` property is greater than 2000.
3. **RETURN m.title**: Finally, the query returns the `title` property of the filtered movies.

This query effectively combines a match on a node label with filtering based on property values to pinpoint the specific movies the user is searching for. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'has a beginning' AND m.released > 2000
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'has a beginning' AND m.released > 2000
RETURN m.title","This Cypher query will find all movies that have ""has a beginning"" in their tagline and were released after the year 2000. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.tagline CONTAINS 'has a beginning' AND m.released > 2000**: This line filters the matched movies to only include those where the `tagline` property contains the phrase ""has a beginning"" and the `released` property is greater than 2000.
3. **RETURN m.title**: Finally, the query returns the `title` property of the filtered movies.

This query effectively combines a match on a node label with filtering based on property values to pinpoint the specific movies the user is searching for."
"List the names of people born after 1960 who acted in ""The Matrix Revolutions"".",movies,"<explanation>
1. We start by matching the movie with the title ""The Matrix Revolutions"".
2. Then we traverse the `ACTED_IN` relationship from that movie to the actors who acted in it.
3. We filter these actors to only include those born after 1960.
4. Finally, we return the names of the filtered actors.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WHERE p.born > 1960
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WHERE p.born > 1960
RETURN p.name
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WHERE p.born > 1960
RETURN p.name","1. We start by matching the movie with the title ""The Matrix Revolutions"".
2. Then we traverse the `ACTED_IN` relationship from that movie to the actors who acted in it.
3. We filter these actors to only include those born after 1960.
4. Finally, we return the names of the filtered actors.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WHERE p.born > 1960
RETURN p.name
```"
What is the average rating for movies released between 1995 and 2005?,movies,"<explanation>
1. **Find movies released between 1995 and 2005:** We'll start by matching all movies (`Movie` nodes) and filter them based on the `released` property.
2. **Match reviewed relationships:** We need to match the `REVIEWED` relationships connected to these movies to access the ratings.
3. **Calculate the average rating:** We'll use the `avg()` function to calculate the average of all `rating` properties on the `REVIEWED` relationships.
4. **Return the average rating:** We'll return the calculated average rating.

```cypher
MATCH (m:Movie)
WHERE 1995 <= m.released <= 2005
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE 1995 <= m.released <= 2005
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find movies released between 1995 and 2005:** We'll start by matching all movies (`Movie` nodes) and filter them based on the `released` property.
2. **Match reviewed relationships:** We need to match the `REVIEWED` relationships connected to these movies to access the ratings.
3. **Calculate the average rating:** We'll use the `avg()` function to calculate the average of all `rating` properties on the `REVIEWED` relationships.
4. **Return the average rating:** We'll return the calculated average rating.

```cypher
MATCH (m:Movie)
WHERE 1995 <= m.released <= 2005
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Find the 3 movies with the highest votes that Hugo Weaving acted in.,movies,"<explanation>
1. We need to find movies that `Hugo Weaving` acted in. So, we start by matching a `Person` node with the `name` property equal to `Hugo Weaving`.
2. Then we traverse the `ACTED_IN` relationship from that person to `Movie` nodes.
3. We order the movies in descending order based on their `votes` property.
4. Finally, we limit the result to the top 3 movies and return their titles.

```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH m
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH m
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```
",Complex Retrieval Queries,"MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH m
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title","1. We need to find movies that `Hugo Weaving` acted in. So, we start by matching a `Person` node with the `name` property equal to `Hugo Weaving`.
2. Then we traverse the `ACTED_IN` relationship from that person to `Movie` nodes.
3. We order the movies in descending order based on their `votes` property.
4. Finally, we limit the result to the top 3 movies and return their titles.

```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WITH m
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```"
Which person directed the movie with the lowest rating? (Limit to 3),movies,"<explanation>
1. **Find the movie with the lowest rating:** Match all movies and their ratings, order them by rating in ascending order, and take only the first one (lowest rating).
2. **Find the director of that movie:** Match the person who directed the movie with the lowest rating.
3. **Return the director's name:** Return the `name` property of the director.

This query utilizes `ORDER BY` to sort movies by rating and `LIMIT` to get the movie with the lowest rating. It then traverses the `DIRECTED` relationship to find the director.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS lowestRating
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name, lowestRating
LIMIT 3
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, min(r.rating) AS lowestRating
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name, lowestRating
LIMIT 3","1. **Find the movie with the lowest rating:** Match all movies and their ratings, order them by rating in ascending order, and take only the first one (lowest rating).
2. **Find the director of that movie:** Match the person who directed the movie with the lowest rating.
3. **Return the director's name:** Return the `name` property of the director.

This query utilizes `ORDER BY` to sort movies by rating and `LIMIT` to get the movie with the lowest rating. It then traverses the `DIRECTED` relationship to find the director."
"List the 5 movies released after 2000 with a review summary containing ""fun"".",movies,"<explanation>
1. We start by matching the `Movie` nodes with the `released` property greater than 2000.
2. Then we match the `REVIEWED` relationship connected to those movies where the `summary` property contains ""fun"".
3. We return the movie title and order the results in descending order based on the movie's released year.
4. We limit the result to the top 5 movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.summary CONTAINS 'fun'
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.summary CONTAINS 'fun'
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 5
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.summary CONTAINS 'fun'
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 5","1. We start by matching the `Movie` nodes with the `released` property greater than 2000.
2. Then we match the `REVIEWED` relationship connected to those movies where the `summary` property contains ""fun"".
3. We return the movie title and order the results in descending order based on the movie's released year.
4. We limit the result to the top 5 movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.summary CONTAINS 'fun'
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 5
```"
What are the roles of Tom Hanks in movies with more than 150 votes?,movies,"<explanation>
1. We need to find the movies with more than 150 votes: `MATCH (m:Movie {votes: {gt: 150}})`.
2. Then, we need to find 'Tom Hanks' and his acted movies: `MATCH (p:Person {name: 'Tom Hanks'})-[ai:ACTED_IN]->(m)`.
3. Finally, we return the movie title and Tom Hanks' roles in these movies: `RETURN m.title AS movie, ai.roles AS roles`.

```cypher
MATCH (m:Movie { votes: {gt: 150} })
MATCH (p:Person { name: 'Tom Hanks' })-[ai:ACTED_IN]->(m)
RETURN m.title AS movie, ai.roles AS roles
```
</explanation>
```cypher
MATCH (m:Movie { votes: {gt: 150} })
MATCH (p:Person { name: 'Tom Hanks' })-[ai:ACTED_IN]->(m)
RETURN m.title AS movie, ai.roles AS roles
```
",Complex Retrieval Queries,"MATCH (m:Movie { votes: {gt: 150} })
MATCH (p:Person { name: 'Tom Hanks' })-[ai:ACTED_IN]->(m)
RETURN m.title AS movie, ai.roles AS roles","1. We need to find the movies with more than 150 votes: `MATCH (m:Movie {votes: {gt: 150}})`.
2. Then, we need to find 'Tom Hanks' and his acted movies: `MATCH (p:Person {name: 'Tom Hanks'})-[ai:ACTED_IN]->(m)`.
3. Finally, we return the movie title and Tom Hanks' roles in these movies: `RETURN m.title AS movie, ai.roles AS roles`.

```cypher
MATCH (m:Movie { votes: {gt: 150} })
MATCH (p:Person { name: 'Tom Hanks' })-[ai:ACTED_IN]->(m)
RETURN m.title AS movie, ai.roles AS roles
```"
Find the 3 people who produced movies with the most votes.,movies,"<explanation>
1. **MATCH** all people who produced movies: `(p:Person)-[:PRODUCED]->(m:Movie)`
2. **WITH** the person `p` and the sum of all votes for their movies, aliased as `totalVotes`.
3. **ORDER BY** `totalVotes` in descending order to get the producers with the most votes first.
4. **RETURN** the top 3 people `p` and their `totalVotes`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
ORDER BY totalVotes DESC
RETURN p, totalVotes
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
ORDER BY totalVotes DESC
RETURN p, totalVotes
LIMIT 3
```",Complex Retrieval Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
ORDER BY totalVotes DESC
RETURN p, totalVotes
LIMIT 3","1. **MATCH** all people who produced movies: `(p:Person)-[:PRODUCED]->(m:Movie)`
2. **WITH** the person `p` and the sum of all votes for their movies, aliased as `totalVotes`.
3. **ORDER BY** `totalVotes` in descending order to get the producers with the most votes first.
4. **RETURN** the top 3 people `p` and their `totalVotes`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
ORDER BY totalVotes DESC
RETURN p, totalVotes
LIMIT 3
```"
"Which movies have a review summary containing the word ""dark"" and were released before 2010?",movies,"<explanation>
1. We need to find `Movie` nodes that have an incoming `REVIEWED` relationship.
2. The `REVIEWED` relationship must have a `summary` property containing the word ""dark"".
3. The `Movie` nodes should have been `released` before the year 2010.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'dark' AND m.released < 2010
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'dark' AND m.released < 2010
RETURN m.title","1. We need to find `Movie` nodes that have an incoming `REVIEWED` relationship.
2. The `REVIEWED` relationship must have a `summary` property containing the word ""dark"".
3. The `Movie` nodes should have been `released` before the year 2010."
List the names of people born before 1965 who acted in movies with a rating above 90.,movies,"<explanation>
This query starts by finding people born before 1965. It then traverses the ACTED_IN relationships to find movies they acted in. The query filters these movies to only include those with a rating above 90. Finally, it returns the names of the actors.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.rating > 90
RETURN DISTINCT p.name
```",Complex Retrieval Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1965 AND m.rating > 90
RETURN DISTINCT p.name","This query starts by finding people born before 1965. It then traverses the ACTED_IN relationships to find movies they acted in. The query filters these movies to only include those with a rating above 90. Finally, it returns the names of the actors."
What is the average number of votes for movies released between 1990 and 2000?,movies,"<explanation>
1. We start by matching all movies released between 1990 and 2000 using `MATCH (m:Movie)` and filtering by the `released` property.
2. We use `WITH` to perform an aggregation, calculating the average number of votes for the selected movies.
3. Finally, we return the average number of votes as `average_votes`.

```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. We start by matching all movies released between 1990 and 2000 using `MATCH (m:Movie)` and filtering by the `released` property.
2. We use `WITH` to perform an aggregation, calculating the average number of votes for the selected movies.
3. Finally, we return the average number of votes as `average_votes`.

```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
Find the 3 movies with the lowest rating directed by people born after 1950.,movies,"<explanation>
1. **MATCH** all people born after 1950 who directed movies:
   - Start with nodes labeled 'Person' and use `WHERE` to filter by `born` greater than 1950.
   - Use `MATCH` to traverse the `DIRECTED` relationship to 'Movie' nodes.
2. **WITH** the movie titles and ratings, order them by rating in ascending order.
3. **RETURN** the title of the movie and the rating for the top 3 movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950
WITH m.title AS movieTitle, AVG(r.rating) AS averageRating
ORDER BY averageRating ASC
LIMIT 3
RETURN movieTitle, averageRating
```
</explanation>",Complex Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950
WITH m.title AS movieTitle, AVG(r.rating) AS averageRating
ORDER BY averageRating ASC
LIMIT 3
RETURN movieTitle, averageRating","1. **MATCH** all people born after 1950 who directed movies:
   - Start with nodes labeled 'Person' and use `WHERE` to filter by `born` greater than 1950.
   - Use `MATCH` to traverse the `DIRECTED` relationship to 'Movie' nodes.
2. **WITH** the movie titles and ratings, order them by rating in ascending order.
3. **RETURN** the title of the movie and the rating for the top 3 movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950
WITH m.title AS movieTitle, AVG(r.rating) AS averageRating
ORDER BY averageRating ASC
LIMIT 3
RETURN movieTitle, averageRating
```"
"Which person wrote the movie ""Cloud Atlas""? (Limit to 3)",movies,"<explanation>
This query first matches the movie with the title ""Cloud Atlas"". Then, it traverses the `:WROTE` relationship to find the person nodes who wrote the movie. Finally, it returns the name of the writers, limiting the result to the top 3. 

```cypher
MATCH (m:Movie {title: ""Cloud Atlas""})<-[:WROTE]-(p:Person)
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Cloud Atlas""})<-[:WROTE]-(p:Person)
RETURN p.name
LIMIT 3
```",Complex Retrieval Queries,"MATCH (m:Movie {title: ""Cloud Atlas""})<-[:WROTE]-(p:Person)
RETURN p.name
LIMIT 3","This query first matches the movie with the title ""Cloud Atlas"". Then, it traverses the `:WROTE` relationship to find the person nodes who wrote the movie. Finally, it returns the name of the writers, limiting the result to the top 3. 

```cypher
MATCH (m:Movie {title: ""Cloud Atlas""})<-[:WROTE]-(p:Person)
RETURN p.name
LIMIT 3
```"
"List the 5 movies released before 2005 with a tagline containing the word ""Matrix"".",movies,"<explanation>
This Cypher query accomplishes the task by:

1. **Matching Movie Nodes:** It starts by finding all `Movie` nodes.
2. **Filtering by Release Year and Tagline:** It filters these movies to only include those released before 2005 and containing the word ""Matrix"" in their tagline.
3. **Limiting Results:** It limits the results to the top 5 movies.
4. **Returning Movie Titles:** Finally, it returns the titles of these movies.

```cypher
MATCH (m:Movie)
WHERE m.released < 2005 AND toLower(m.tagline) CONTAINS 'matrix'
RETURN m.title
LIMIT 5
```
</explanation>",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.released < 2005 AND toLower(m.tagline) CONTAINS 'matrix'
RETURN m.title
LIMIT 5","This Cypher query accomplishes the task by:

1. **Matching Movie Nodes:** It starts by finding all `Movie` nodes.
2. **Filtering by Release Year and Tagline:** It filters these movies to only include those released before 2005 and containing the word ""Matrix"" in their tagline.
3. **Limiting Results:** It limits the results to the top 5 movies.
4. **Returning Movie Titles:** Finally, it returns the titles of these movies.

```cypher
MATCH (m:Movie)
WHERE m.released < 2005 AND toLower(m.tagline) CONTAINS 'matrix'
RETURN m.title
LIMIT 5
```"
What are the review summaries for movies with less than 50 votes?,movies,"<explanation>
This query finds movies with fewer than 50 votes and then retrieves the summaries of reviews associated with those movies.

1. **MATCH (m:Movie)**: This starts the query by finding all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.votes < 50**: This filters those movies to only include those with fewer than 50 votes.
3. **WITH m MATCH (p:Person)-[r:REVIEWED]->(m)**: For each of the movies found, it then looks for relationships of type ""REVIEWED"" where a ""Person"" node (p) reviewed the movie (m). The relationship is assigned to the variable ""r"".
4. **RETURN r.summary**: This returns the summary property of the ""REVIEWED"" relationships, which represents the summaries of the reviews for the movies with fewer than 50 votes. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes < 50
WITH m 
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.votes < 50
WITH m 
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary","This query finds movies with fewer than 50 votes and then retrieves the summaries of reviews associated with those movies.

1. **MATCH (m:Movie)**: This starts the query by finding all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.votes < 50**: This filters those movies to only include those with fewer than 50 votes.
3. **WITH m MATCH (p:Person)-[r:REVIEWED]->(m)**: For each of the movies found, it then looks for relationships of type ""REVIEWED"" where a ""Person"" node (p) reviewed the movie (m). The relationship is assigned to the variable ""r"".
4. **RETURN r.summary**: This returns the summary property of the ""REVIEWED"" relationships, which represents the summaries of the reviews for the movies with fewer than 50 votes."
Find the 3 people born after 1955 who directed movies with more than 100 votes.,movies,"<explanation>
1. **Find directors:** Start with nodes labeled 'Person' and filter them based on 'born' being greater than 1955.
2. **Match directed movies:** Match those directors to movies they directed (DIRECTED relationship) and filter those movies to only include ones with more than 100 votes.
3. **Count directed movies:** Group by director and count the number of movies directed.
4. **Filter by count and return:** Filter for directors with a count of directed movies greater than 0. Return the director's name and the count of movies directed, ordered by the count in descending order and limited to the top 3 results.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1955 AND m.votes > 100
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 0
RETURN p.name, moviesDirected
ORDER BY moviesDirected DESC
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1955 AND m.votes > 100
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 0
RETURN p.name, moviesDirected
ORDER BY moviesDirected DESC
LIMIT 3
```",Complex Retrieval Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1955 AND m.votes > 100
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 0
RETURN p.name, moviesDirected
ORDER BY moviesDirected DESC
LIMIT 3","1. **Find directors:** Start with nodes labeled 'Person' and filter them based on 'born' being greater than 1955.
2. **Match directed movies:** Match those directors to movies they directed (DIRECTED relationship) and filter those movies to only include ones with more than 100 votes.
3. **Count directed movies:** Group by director and count the number of movies directed.
4. **Filter by count and return:** Filter for directors with a count of directed movies greater than 0. Return the director's name and the count of movies directed, ordered by the count in descending order and limited to the top 3 results.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1955 AND m.votes > 100
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 0
RETURN p.name, moviesDirected
ORDER BY moviesDirected DESC
LIMIT 3
```"
"Which movies have a tagline containing the word ""Atlas""?",movies,"<explanation>
This query looks for movies with the word ""Atlas"" in the tagline.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies, keeping only those where the `tagline` property contains the word ""Atlas"".
3. **RETURN Clause:**  We return the `title` of the movies that meet our criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Atlas'
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Atlas'
RETURN m.title","This query looks for movies with the word ""Atlas"" in the tagline.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies, keeping only those where the `tagline` property contains the word ""Atlas"".
3. **RETURN Clause:**  We return the `title` of the movies that meet our criteria."
List the names of people who acted in movies produced by Laurence Fishburne.,movies,"<explanation>
This query starts by finding the person named 'Laurence Fishburne', then traverses the PRODUCED relationships to find movies he produced. It then traverses the ACTED_IN relationships from those movies to find the actors, and finally returns the names of those actors. 
</explanation>
```cypher
MATCH (producer:Person {name: 'Laurence Fishburne'})-[:PRODUCED]->(movie:Movie)
WITH movie
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```",Complex Retrieval Queries,"MATCH (producer:Person {name: 'Laurence Fishburne'})-[:PRODUCED]->(movie:Movie)
WITH movie
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name","This query starts by finding the person named 'Laurence Fishburne', then traverses the PRODUCED relationships to find movies he produced. It then traverses the ACTED_IN relationships from those movies to find the actors, and finally returns the names of those actors."
What is the release year of the movie with the second lowest number of votes? (Limit to 3),movies,"<explanation>
1. **Find movies and their vote counts:** We begin by matching all `Movie` nodes and their corresponding `votes` properties.
2. **Order movies by vote count:** We order the movies in ascending order based on their `votes` property.
3. **Limit the results:** We limit the number of returned movies to 3 to only consider the ones with the lowest vote counts.
4. **Return the release year of the second movie:** We skip the first movie in the ordered list and return the `released` property of the second movie. 

```cypher
MATCH (m:Movie)
RETURN m.released, m.votes
ORDER BY m.votes ASC
SKIP 1
LIMIT 1
```
</explanation>```cypher
MATCH (m:Movie)
RETURN m.released, m.votes
ORDER BY m.votes ASC
SKIP 1
LIMIT 1
```",Complex Retrieval Queries,"MATCH (m:Movie)
RETURN m.released, m.votes
ORDER BY m.votes ASC
SKIP 1
LIMIT 1","1. **Find movies and their vote counts:** We begin by matching all `Movie` nodes and their corresponding `votes` properties.
2. **Order movies by vote count:** We order the movies in ascending order based on their `votes` property.
3. **Limit the results:** We limit the number of returned movies to 3 to only consider the ones with the lowest vote counts.
4. **Return the release year of the second movie:** We skip the first movie in the ordered list and return the `released` property of the second movie. 

```cypher
MATCH (m:Movie)
RETURN m.released, m.votes
ORDER BY m.votes ASC
SKIP 1
LIMIT 1
```"
Find the 3 movies acted in by Joel Silver with a rating above 70.,movies,"<explanation>
This query starts by finding the person named ""Joel Silver."" From there, it traverses the ACTED_IN relationships to find all movies produced by him. Finally, it filters these movies based on the rating property being above 70 and limits the results to the top 3. 
<explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS averageRating
WHERE averageRating > 70
RETURN m.title, averageRating
ORDER BY averageRating DESC
LIMIT 3
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS averageRating
WHERE averageRating > 70
RETURN m.title, averageRating
ORDER BY averageRating DESC
LIMIT 3",
Who produced the movie with the highest rating? (Limit to 3),movies,"<explanation>
1. **Find the movie with the highest rating:**
   - Match all `REVIEWED` relationships.
   - Find the maximum rating using `max()`.

2. **Identify the producers:**
   - Match the `PRODUCED` relationships connected to the movie with the highest rating.

3. **Return the producers:**
   - Return the `name` of the `Person` nodes who produced the movie.

4. **Limit the results:**
   - Limit the returned results to 3.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH max(r.rating) AS maxRating
MATCH (:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = maxRating
RETURN DISTINCT m.title, collect(m.title) AS Movie, collect(r.rating) AS Rating, collect(p.name) AS Producer
LIMIT 3
```
</explanation>",Complex Retrieval Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH max(r.rating) AS maxRating
MATCH (:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = maxRating
RETURN DISTINCT m.title, collect(m.title) AS Movie, collect(r.rating) AS Rating, collect(p.name) AS Producer
LIMIT 3","1. **Find the movie with the highest rating:**
   - Match all `REVIEWED` relationships.
   - Find the maximum rating using `max()`.

2. **Identify the producers:**
   - Match the `PRODUCED` relationships connected to the movie with the highest rating.

3. **Return the producers:**
   - Return the `name` of the `Person` nodes who produced the movie.

4. **Limit the results:**
   - Limit the returned results to 3.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH max(r.rating) AS maxRating
MATCH (:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = maxRating
RETURN DISTINCT m.title, collect(m.title) AS Movie, collect(r.rating) AS Rating, collect(p.name) AS Producer
LIMIT 3
```"
"List the 5 movies with a review summary containing ""romp"" released after 1995.",movies,"<explanation>
This query starts by finding movies with 'romp' in the review summary and released after 1995. Then, it orders these movies by their title in ascending order and returns the top 5. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'romp' AND m.released > 1995**: This filters for movies released after 1995 that have reviews containing the word 'romp'.
3. **WITH m ORDER BY m.title ASC LIMIT 5**: This orders the matching movies by title in ascending order and limits the results to the top 5. 
4. **RETURN m.title**: This returns the titles of the 5 selected movies. 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'romp' AND m.released > 1995
WITH m ORDER BY m.title ASC LIMIT 5 
RETURN m.title
```",Complex Retrieval Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'romp' AND m.released > 1995
WITH m ORDER BY m.title ASC LIMIT 5 
RETURN m.title","This query starts by finding movies with 'romp' in the review summary and released after 1995. Then, it orders these movies by their title in ascending order and returns the top 5. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed.
2. **WHERE r.summary CONTAINS 'romp' AND m.released > 1995**: This filters for movies released after 1995 that have reviews containing the word 'romp'.
3. **WITH m ORDER BY m.title ASC LIMIT 5**: This orders the matching movies by title in ascending order and limits the results to the top 5. 
4. **RETURN m.title**: This returns the titles of the 5 selected movies."
What are the roles of Hugo Weaving in movies with a rating below 80?,movies,"<explanation>
1. We need to find the `Person` node with `name` equal to ""Hugo Weaving"".
2. Then, traverse the `ACTED_IN` relationships to the `Movie` nodes.
3. Filter these `Movie` nodes by those having incoming `REVIEWED` relationships with a `rating` property less than 80.
4. Finally, return the `roles` property from the matching `ACTED_IN` relationships.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN r.roles
```
</explanation>
```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN {roles: roles}]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN roles
```",Complex Retrieval Queries,"MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN r.roles","1. We need to find the `Person` node with `name` equal to ""Hugo Weaving"".
2. Then, traverse the `ACTED_IN` relationships to the `Movie` nodes.
3. Filter these `Movie` nodes by those having incoming `REVIEWED` relationships with a `rating` property less than 80.
4. Finally, return the `roles` property from the matching `ACTED_IN` relationships.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 80
RETURN r.roles
```"
Which movies released in 2003 did Keanu Reeves act in?,movies,"<explanation>
1. We need to find movies, so we start with `MATCH (m:Movie)`
2. The question asks for movies released in 2003: `WHERE m.released = 2003`
3. We need to find movies in which Keany Reeves acted: `MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m)`
4. Finally, we return the found movies: `RETURN m`

Combining it all, we get the query below
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m)
RETURN m
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released = 2003
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m)
RETURN m","1. We need to find movies, so we start with `MATCH (m:Movie)`
2. The question asks for movies released in 2003: `WHERE m.released = 2003`
3. We need to find movies in which Keany Reeves acted: `MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m)`
4. Finally, we return the found movies: `RETURN m`

Combining it all, we get the query below"
What are the titles of the top 3 movies with the most votes?,movies,"<explanation>
This Cypher query identifies the top 3 movies with the most votes and retrieves their titles.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them the variable ""m.""
2. **WITH m, m.votes AS num_votes ORDER BY num_votes DESC LIMIT 3**: This line calculates the number of votes for each movie (m.votes) using the alias ""num_votes"" and orders the movies in descending order based on the number of votes. It then limits the result set to the top 3 movies.
3. **RETURN m.title AS title**: Finally, the query returns the title (m.title) of each of the top 3 movies using the alias ""title.""

This query effectively leverages the ""ORDER BY"" clause with the ""LIMIT"" keyword to retrieve the top movies based on the number of votes. 
</explanation>
```cypher
MATCH (m:Movie)
WITH m, m.votes AS num_votes ORDER BY num_votes DESC LIMIT 3
RETURN m.title AS title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m, m.votes AS num_votes ORDER BY num_votes DESC LIMIT 3
RETURN m.title AS title","This Cypher query identifies the top 3 movies with the most votes and retrieves their titles.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them the variable ""m.""
2. **WITH m, m.votes AS num_votes ORDER BY num_votes DESC LIMIT 3**: This line calculates the number of votes for each movie (m.votes) using the alias ""num_votes"" and orders the movies in descending order based on the number of votes. It then limits the result set to the top 3 movies.
3. **RETURN m.title AS title**: Finally, the query returns the title (m.title) of each of the top 3 movies using the alias ""title.""

This query effectively leverages the ""ORDER BY"" clause with the ""LIMIT"" keyword to retrieve the top movies based on the number of votes."
Find the names of the people who directed movies released between 1990 and 2000.,movies,"<explanation>This query starts with a MATCH clause looking for all the (:Person) nodes that are connected to (:Movie) nodes by the relationship type [:DIRECTED]. We then filter these results to only include movies with a released property between 1990 and 2000.  Finally, we return the name of each director.</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 1990 AND 2000
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 1990 AND 2000
RETURN p.name","This query starts with a MATCH clause looking for all the (:Person) nodes that are connected to (:Movie) nodes by the relationship type [:DIRECTED]. We then filter these results to only include movies with a released property between 1990 and 2000.  Finally, we return the name of each director."
List the top 5 movies with the highest ratings reviewed by Keanu Reeves.,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the node representing ""Keanu Reeves"" using the `Person` label and the `name` property.
2. **Match Reviewed Movies:** Traverse the `REVIEWED` relationships outgoing from Keanu Reeves' node to find all movies he reviewed.
3. **Order by Rating:** Order the found movies in descending order based on their `rating` property.
4. **Limit to Top 5:**  Limit the results to the top 5 movies.
5. **Return Movie Titles:** Return the `title` property of the top 5 highest-rated movies reviewed by Keanu Reeves.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating DESC
LIMIT 5
RETURN m.title AS movie_title
```
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating DESC
LIMIT 5
RETURN m.title AS movie_title
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating DESC
LIMIT 5
RETURN m.title AS movie_title","1. **Find Keanu Reeves:** Start by finding the node representing ""Keanu Reeves"" using the `Person` label and the `name` property.
2. **Match Reviewed Movies:** Traverse the `REVIEWED` relationships outgoing from Keanu Reeves' node to find all movies he reviewed.
3. **Order by Rating:** Order the found movies in descending order based on their `rating` property.
4. **Limit to Top 5:**  Limit the results to the top 5 movies.
5. **Return Movie Titles:** Return the `title` property of the top 5 highest-rated movies reviewed by Keanu Reeves.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating DESC
LIMIT 5
RETURN m.title AS movie_title
```"
What are the titles and release years of the first 3 movies acted in by Laurence Fishburne?,movies,"<explanation>
1. We need to find a Person node with the name ""Laurence Fishburne"".
2. Then, we traverse the ACTED_IN relationships outgoing from that Person node to the Movie nodes.
3. We order the movies by the release year in ascending order.
4. We limit the result to the first 3 movies.
5. Finally, we return the title and released properties of the movies.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3","1. We need to find a Person node with the name ""Laurence Fishburne"".
2. Then, we traverse the ACTED_IN relationships outgoing from that Person node to the Movie nodes.
3. We order the movies by the release year in ascending order.
4. We limit the result to the first 3 movies.
5. Finally, we return the title and released properties of the movies.

```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3
```"
"Who are the 3 people who acted in ""Something's Gotta Give""?",movies,"<explanation>This query starts by finding the movie with the title ""Something's Gotta Give"", then traverses the ACTED_IN relationships outgoing from that Movie node.  Finally, it returns the name of each related Person node.  The results are limited to the top 3. 
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
LIMIT 3
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
LIMIT 3","This query starts by finding the movie with the title ""Something's Gotta Give"", then traverses the ACTED_IN relationships outgoing from that Movie node.  Finally, it returns the name of each related Person node.  The results are limited to the top 3."
What is the average rating given by Keanu Reeves in his reviews?,movies,"<explanation>
1. We need to find the person named ""Keanu Reeves"".
2. Then, we need to traverse the `REVIEWED` relationships originating from that person node.
3. We then calculate the average rating from the `rating` property of the `REVIEWED` relationships.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. We need to find the person named ""Keanu Reeves"".
2. Then, we need to traverse the `REVIEWED` relationships originating from that person node.
3. We then calculate the average rating from the `rating` property of the `REVIEWED` relationships.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
List the names of the people who wrote movies released after 2000.,movies,"<explanation>
This query starts by finding all movies released after 2000. Then, it matches people who have a WROTE relationship with those movies. Finally, it returns the names of those people.

1. **MATCH (m:Movie)**: This line searches for all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released > 2000**: This line filters the found Movie nodes, keeping only those where the ""released"" property is greater than 2000.
3. **MATCH (p:Person)-[:WROTE]->(m)**: This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered Movie nodes. 
4. **RETURN DISTINCT p.name**: This line returns the ""name"" property of the ""Person"" nodes found in the previous step. The DISTINCT keyword ensures that each name is only returned once.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
MATCH (p:Person)-[:WROTE]->(m)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released > 2000
MATCH (p:Person)-[:WROTE]->(m)
RETURN DISTINCT p.name","This query starts by finding all movies released after 2000. Then, it matches people who have a WROTE relationship with those movies. Finally, it returns the names of those people.

1. **MATCH (m:Movie)**: This line searches for all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released > 2000**: This line filters the found Movie nodes, keeping only those where the ""released"" property is greater than 2000.
3. **MATCH (p:Person)-[:WROTE]->(m)**: This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered Movie nodes. 
4. **RETURN DISTINCT p.name**: This line returns the ""name"" property of the ""Person"" nodes found in the previous step. The DISTINCT keyword ensures that each name is only returned once."
Which movies were produced by Joel Silver and released before 2010?,movies,"<explanation>
This query starts by finding the person node with the name 'Joel Silver'. Then, it traverses the `PRODUCED` relationship to find all movies produced by him. Finally, it filters these movies to only include those released before 2010. 
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2010
RETURN m.title AS movieTitle
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2010
RETURN m.title AS movieTitle","This query starts by finding the person node with the name 'Joel Silver'. Then, it traverses the `PRODUCED` relationship to find all movies produced by him. Finally, it filters these movies to only include those released before 2010."
Find the top 3 movies with the lowest number of votes.,movies,"<explanation>
1. **Find all movies:** Start by matching all nodes with the label ""Movie"" using `MATCH (m:Movie)`.
2. **Order by vote count:** Order the movies in ascending order based on their `votes` property using `ORDER BY m.votes ASC`.
3. **Limit to top 3:** Limit the result set to the top 3 movies using `LIMIT 3`.
4. **Return movie titles:** Return the `title` property of the selected movies using `RETURN m.title`.
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 3
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 3
RETURN m.title","1. **Find all movies:** Start by matching all nodes with the label ""Movie"" using `MATCH (m:Movie)`.
2. **Order by vote count:** Order the movies in ascending order based on their `votes` property using `ORDER BY m.votes ASC`.
3. **Limit to top 3:** Limit the result set to the top 3 movies using `LIMIT 3`.
4. **Return movie titles:** Return the `title` property of the selected movies using `RETURN m.title`."
What are the taglines of movies directed by Nancy Meyers?,movies,"<explanation>
1. **MATCH** the person named ""Nancy Meyers""
2. **MATCH** movies directed by the person found in the previous step.
3. **RETURN** the taglines of those movies.

```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.tagline","1. **MATCH** the person named ""Nancy Meyers""
2. **MATCH** movies directed by the person found in the previous step.
3. **RETURN** the taglines of those movies.

```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```"
"Who directed ""The Matrix Revolutions""?",movies,"<explanation>
This query starts with finding the movie with the title ""The Matrix Revolutions"". Then, it traverses the `DIRECTED` relationship from that movie to the `Person` who directed it and returns the `name` of that person.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:DIRECTED]-(p:Person)
RETURN p.name","This query starts with finding the movie with the title ""The Matrix Revolutions"". Then, it traverses the `DIRECTED` relationship from that movie to the `Person` who directed it and returns the `name` of that person."
List the roles played by Laurence Fishburne in movies released in 2003.,movies,"<explanation>
1. **Find the person named ""Laurence Fishburne"":** We start by matching a `Person` node with the name ""Laurence Fishburne.""
2. **Match movies released in 2003:** Then, we traverse the `ACTED_IN` relationship to find `Movie` nodes where the `released` property is 2003.
3. **Return the roles:** Finally, we return the `roles` property from the `ACTED_IN` relationship.

This query effectively filters for movies released in 2003 and then returns the roles played by Laurence Fishburne in those specific films.
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie {released: 2003})
RETURN m.title, m.released, p.name, collect(m.title) AS movie_titles
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie {released: 2003})
RETURN m.title, m.released, p.name, collect(m.title) AS movie_titles","1. **Find the person named ""Laurence Fishburne"":** We start by matching a `Person` node with the name ""Laurence Fishburne.""
2. **Match movies released in 2003:** Then, we traverse the `ACTED_IN` relationship to find `Movie` nodes where the `released` property is 2003.
3. **Return the roles:** Finally, we return the `roles` property from the `ACTED_IN` relationship.

This query effectively filters for movies released in 2003 and then returns the roles played by Laurence Fishburne in those specific films."
What are the summaries of the reviews given by Keanu Reeves with a rating above 90?,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the `Person` node with `name` equal to ""Keanu Reeves.""
2. **Match Reviewed Relationships:** Traverse the `REVIEWED` relationships originating from Keanu Reeves to the `Movie` nodes he reviewed.
3. **Filter by Rating:** Filter these `REVIEWED` relationships to include only those with a `rating` greater than 90.
4. **Return Summaries:** Finally, return the `summary` property of the remaining `REVIEWED` relationships.

This query effectively identifies Keanu Reeves, follows his `REVIEWED` relationships, filters those relationships based on the rating, and returns the summaries of the reviews that meet the criteria.
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN r.summary
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN r.summary","1. **Find Keanu Reeves:** Start by finding the `Person` node with `name` equal to ""Keanu Reeves.""
2. **Match Reviewed Relationships:** Traverse the `REVIEWED` relationships originating from Keanu Reeves to the `Movie` nodes he reviewed.
3. **Filter by Rating:** Filter these `REVIEWED` relationships to include only those with a `rating` greater than 90.
4. **Return Summaries:** Finally, return the `summary` property of the remaining `REVIEWED` relationships.

This query effectively identifies Keanu Reeves, follows his `REVIEWED` relationships, filters those relationships based on the rating, and returns the summaries of the reviews that meet the criteria."
Find the release years of the 3 movies with the fewest votes.,movies,"<explanation>
This query first matches all Movie nodes. Then it orders them by the number of votes in ascending order and limits the result to the top 3 movies. Finally, it returns the release year of these movies.

1. **MATCH (m:Movie)** - This line matches all nodes with the label 'Movie'.
2. **WITH m ORDER BY m.votes ASC LIMIT 3** - This line orders the matched movies by the 'votes' property in ascending order and limits the result to the top 3 movies with the fewest votes.
3. **RETURN m.released** - This line returns the release year of each of the 3 movies. 
<explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 3
RETURN m.released
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes ASC LIMIT 3
RETURN m.released",
"Who are the people who produced ""Speed Racer""?",movies,"<explanation>
This query starts with finding the movie titled ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards to find the persons who produced the movie. Finally, it returns the names of those persons.
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name","This query starts with finding the movie titled ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards to find the persons who produced the movie. Finally, it returns the names of those persons."
What is the average number of votes for movies released in 2003?,movies,"<explanation>
1. We start by matching all movies with a `released` property value of 2003.
2. We then use `WITH` clause with aggregation function `avg` to calculate the average vote count. 
3. Finally, we return the average vote count.

```cypher
MATCH (m:Movie {released: 2003})
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (m:Movie {released: 2003})
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Simple Aggregation Queries,"MATCH (m:Movie {released: 2003})
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. We start by matching all movies with a `released` property value of 2003.
2. We then use `WITH` clause with aggregation function `avg` to calculate the average vote count. 
3. Finally, we return the average vote count.

```cypher
MATCH (m:Movie {released: 2003})
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
List the names of the people born before 1960 who directed a movie.,movies,"<explanation>
1. **MATCH** the nodes with label `Person` and `Movie` that have a relationship of type `DIRECTED`. 
2. **WHERE** clause filters these results to only include people who were born before 1960.
3. **RETURN** the `name` property of the `Person` node.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name","1. **MATCH** the nodes with label `Person` and `Movie` that have a relationship of type `DIRECTED`. 
2. **WHERE** clause filters these results to only include people who were born before 1960.
3. **RETURN** the `name` property of the `Person` node.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
```"
Which movies were written by people born after 1950?,movies,"<explanation>
1. **Find the writers:** Start by finding all people who have a `WROTE` relationship with a movie.
2. **Filter by birth year:** Filter these people to only include those born after 1950.
3. **Return the movies:** Return the titles of the movies that these writers wrote.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1950
RETURN m.title
```",Simple Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1950
RETURN m.title","1. **Find the writers:** Start by finding all people who have a `WROTE` relationship with a movie.
2. **Filter by birth year:** Filter these people to only include those born after 1950.
3. **Return the movies:** Return the titles of the movies that these writers wrote."
What are the titles and taglines of the 3 movies with the highest number of votes?,movies,"<explanation>
This query starts with all Movie nodes and orders them in descending order of vote count. Then, it limits the results to the top 3 and returns their titles and taglines.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WITH m ORDER BY m.votes DESC LIMIT 3**: This line orders the matched movies by their `votes` property in descending order and limits the results to the top 3.
3. **RETURN m.title, m.tagline**: Finally, we return the `title` and `tagline` properties of the top 3 most voted movies.
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
RETURN m.title, m.tagline
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
RETURN m.title, m.tagline","This query starts with all Movie nodes and orders them in descending order of vote count. Then, it limits the results to the top 3 and returns their titles and taglines.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WITH m ORDER BY m.votes DESC LIMIT 3**: This line orders the matched movies by their `votes` property in descending order and limits the results to the top 3.
3. **RETURN m.title, m.tagline**: Finally, we return the `title` and `tagline` properties of the top 3 most voted movies."
Find the names of the people who acted in movies with more than 1000 votes.,movies,"<explanation>
This Cypher query first finds all movies with more than 1000 votes. Then, it matches people who ACTED_IN those movies and returns their names.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 1000
WITH m
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.votes > 1000
WITH m
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","This Cypher query first finds all movies with more than 1000 votes. Then, it matches people who ACTED_IN those movies and returns their names."
What is the earliest release year of a movie directed by Nancy Meyers?,movies,"<explanation>
1. **Find the person named ""Nancy Meyers"".**  We'll start by matching the `Person` node with the name 'Nancy Meyers'.
2. **Traverse outgoing DIRECTED relationships.** We'll traverse the `DIRECTED` relationships from the 'Nancy Meyers' node to the `Movie` nodes.
3. **Find the earliest release year.** We'll use the `min()` function on the `released` property of the `Movie` nodes to get the earliest release year.
4. **Return the earliest year.**
</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN min(m.released)
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN min(m.released)","1. **Find the person named ""Nancy Meyers"".**  We'll start by matching the `Person` node with the name 'Nancy Meyers'.
2. **Traverse outgoing DIRECTED relationships.** We'll traverse the `DIRECTED` relationships from the 'Nancy Meyers' node to the `Movie` nodes.
3. **Find the earliest release year.** We'll use the `min()` function on the `released` property of the `Movie` nodes to get the earliest release year.
4. **Return the earliest year.**"
"List the roles played by Keanu Reeves in ""Something's Gotta Give"".",movies,"<explanation>
This query identifies the movie with the title ""Something's Gotta Give"", then matches to the person with the name ""Keanu Reeves"", and then returns the roles played by that person in that movie.

1. **MATCH (m:Movie {title: ""Something's Gotta Give""})** - This part finds the movie node with the title ""Something's Gotta Give"".
2. **MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m)** - This part finds the person node with the name ""Keanu Reeves"" who acted in the movie we found in the previous step. 
3. **RETURN ai.roles** - This returns the roles played by the person in the specified movie. 

</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m)
RETURN ai.roles
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m)
RETURN ai.roles","This query identifies the movie with the title ""Something's Gotta Give"", then matches to the person with the name ""Keanu Reeves"", and then returns the roles played by that person in that movie.

1. **MATCH (m:Movie {title: ""Something's Gotta Give""})** - This part finds the movie node with the title ""Something's Gotta Give"".
2. **MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m)** - This part finds the person node with the name ""Keanu Reeves"" who acted in the movie we found in the previous step. 
3. **RETURN ai.roles** - This returns the roles played by the person in the specified movie."
What are the summaries of reviews with a rating between 70 and 80?,movies,"<explanation>
This query starts with all `REVIEWED` relationships and filters by the `rating` property being between 70 (inclusive) and 80 (inclusive). It will then return the `summary` property for each of those relationships.
</explanation>
```cypher
MATCH ()-[:REVIEWED{rating: range(70, 80)}]->(m:Movie)
RETURN m.summary
```",Simple Aggregation Queries,"MATCH ()-[:REVIEWED{rating: range(70, 80)}]->(m:Movie)
RETURN m.summary",This query starts with all `REVIEWED` relationships and filters by the `rating` property being between 70 (inclusive) and 80 (inclusive). It will then return the `summary` property for each of those relationships.
Find the birth years of the 3 people who acted in the movies with the most votes.,movies,"<explanation>
1. **Find movies with the most votes:** Match all Movie nodes, order them by the number of votes in descending order, and take the top 3 using `LIMIT 3`.
2. **Find actors who acted in those movies:** Traverse the `ACTED_IN` relationship from those movies to the Person nodes representing the actors.
3. **Return the birth year of each actor:** Extract the `born` property from each Person node.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born","1. **Find movies with the most votes:** Match all Movie nodes, order them by the number of votes in descending order, and take the top 3 using `LIMIT 3`.
2. **Find actors who acted in those movies:** Traverse the `ACTED_IN` relationship from those movies to the Person nodes representing the actors.
3. **Return the birth year of each actor:** Extract the `born` property from each Person node.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born
```"
"Who produced movies released in the same year as ""The Matrix Revolutions""?",movies,"<explanation>
1. We need to find the release year of the movie ""The Matrix Revolutions"".
2. Then, we need to find all movies released in that year.
3. Finally, we need to find all persons who produced those movies.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS released_year
MATCH (m2:Movie) WHERE m2.released = released_year
MATCH (p:Person)-[:PRODUCED]->(m2)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS released_year
MATCH (m2:Movie) WHERE m2.released = released_year
MATCH (p:Person)-[:PRODUCED]->(m2)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS released_year
MATCH (m2:Movie) WHERE m2.released = released_year
MATCH (p:Person)-[:PRODUCED]->(m2)
RETURN DISTINCT p.name","1. We need to find the release year of the movie ""The Matrix Revolutions"".
2. Then, we need to find all movies released in that year.
3. Finally, we need to find all persons who produced those movies.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
WITH m.released AS released_year
MATCH (m2:Movie) WHERE m2.released = released_year
MATCH (p:Person)-[:PRODUCED]->(m2)
RETURN DISTINCT p.name
```"
What is the average rating of reviews for movies released after 2000?,movies,"<explanation>
1. **Match movies released after 2000**: We start by matching all movies (`Movie` nodes) where the `released` property is greater than 2000.
2. **Match reviews**: Then, we match all `REVIEWED` relationships originating from any `Person` nodes to these movies.
3. **Calculate average rating**: Finally, we use the `avg()` function to calculate the average rating of all the matched reviews. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000
RETURN avg(r.rating)
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000
RETURN avg(r.rating)
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000
RETURN avg(r.rating)","1. **Match movies released after 2000**: We start by matching all movies (`Movie` nodes) where the `released` property is greater than 2000.
2. **Match reviews**: Then, we match all `REVIEWED` relationships originating from any `Person` nodes to these movies.
3. **Calculate average rating**: Finally, we use the `avg()` function to calculate the average rating of all the matched reviews. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000
RETURN avg(r.rating)
```"
List the names of the people born after 1960 who wrote a movie.,movies,"<explanation>
This query looks for all people born after 1960 who have a `WROTE` relationship with a `Movie` node. It then returns the names of those people.

1. **MATCH Clause**: We start by matching all `Person` nodes that have an outgoing `WROTE` relationship to a `Movie` node. 
2. **WHERE Clause**: Filter for `Person` nodes where the `born` property is greater than 1960.
3. **RETURN Clause**: We return the `name` property of the `Person` node.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN p.name","This query looks for all people born after 1960 who have a `WROTE` relationship with a `Movie` node. It then returns the names of those people.

1. **MATCH Clause**: We start by matching all `Person` nodes that have an outgoing `WROTE` relationship to a `Movie` node. 
2. **WHERE Clause**: Filter for `Person` nodes where the `born` property is greater than 1960.
3. **RETURN Clause**: We return the `name` property of the `Person` node.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
```"
Which movies were directed by people born before 1955?,movies,"<explanation>
This query starts by finding all people born before 1955. Then, it traverses the `DIRECTED` relationships from those people to the movies they directed. Finally, it returns the titles of those movies. 
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title","This query starts by finding all people born before 1955. Then, it traverses the `DIRECTED` relationships from those people to the movies they directed. Finally, it returns the titles of those movies."
What are the titles and release years of the 3 movies with the lowest ratings?,movies,"<explanation>
This query finds the bottom 3 movies with the lowest ratings.
1. **MATCH**: It starts by matching all `REVIEWED` relationships between `Person` and `Movie` nodes.
2. **WITH**: This clause allows us to order the results by the `rating` property in ascending order and use `LIMIT` to select only the top three movies with the lowest ratings.
3. **RETURN**: Finally, we return the `title` and `released` properties of the 3 selected movies.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r.rating ORDER BY r.rating ASC LIMIT 3
RETURN m.title, m.released
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r.rating ORDER BY r.rating ASC LIMIT 3
RETURN m.title, m.released
```",Simple Aggregation Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r.rating ORDER BY r.rating ASC LIMIT 3
RETURN m.title, m.released","This query finds the bottom 3 movies with the lowest ratings.
1. **MATCH**: It starts by matching all `REVIEWED` relationships between `Person` and `Movie` nodes.
2. **WITH**: This clause allows us to order the results by the `rating` property in ascending order and use `LIMIT` to select only the top three movies with the lowest ratings.
3. **RETURN**: Finally, we return the `title` and `released` properties of the 3 selected movies.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r.rating ORDER BY r.rating ASC LIMIT 3
RETURN m.title, m.released
```"
Find the names of the people who acted in movies released before 1990.,movies,"<explanation>
This query starts by finding all movies released before 1990. Then, it traverses the ACTED_IN relationship backward to find the people who acted in those movies. Finally, it returns the names of those people.
</explanation>
```cypher
MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released < 1990
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released < 1990
RETURN DISTINCT p.name","This query starts by finding all movies released before 1990. Then, it traverses the ACTED_IN relationship backward to find the people who acted in those movies. Finally, it returns the names of those people."
What is the latest release year of a movie produced by Joel Silver?,movies,"<explanation>
1. We need to find movies that are produced by ""Joel Silver"".
2. Then we need to filter movies by the latest `released` year.

```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person {name: ""Joel Silver""})
RETURN max(m.released)
```
</explanation>
```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person {name: ""Joel Silver""})
RETURN max(m.released)
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[:PRODUCED]-(p:Person {name: ""Joel Silver""})
RETURN max(m.released)","1. We need to find movies that are produced by ""Joel Silver"".
2. Then we need to filter movies by the latest `released` year.

```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person {name: ""Joel Silver""})
RETURN max(m.released)
```"
List the roles played by Laurence Fishburne in movies with more than 500 votes.,movies,"<explanation>
This query identifies all roles played by Laurence Fishburne in movies with more than 500 votes. 

1. **MATCH (p:Person {name: ""Laurence Fishburne""})-[ai:ACTED_IN]->(m:Movie)** - This part finds all movies where a person named ""Laurence Fishburne"" acted in.
2. **WHERE m.votes > 500** - This filters the movies by those that have more than 500 votes.
3. **RETURN ai.roles** - This returns the roles played by Laurence Fishburne in the filtered movies.

</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes > 500
RETURN ai.roles
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes > 500
RETURN ai.roles","This query identifies all roles played by Laurence Fishburne in movies with more than 500 votes. 

1. **MATCH (p:Person {name: ""Laurence Fishburne""})-[ai:ACTED_IN]->(m:Movie)** - This part finds all movies where a person named ""Laurence Fishburne"" acted in.
2. **WHERE m.votes > 500** - This filters the movies by those that have more than 500 votes.
3. **RETURN ai.roles** - This returns the roles played by Laurence Fishburne in the filtered movies."
What are the summaries of the 3 reviews with the highest ratings?,movies,"<explanation>
This query first matches all reviews and orders them by rating in descending order. Then it limits the results to the top 3 and returns their summaries. 
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
ORDER BY r.rating DESC
LIMIT 3
RETURN r.summary
```",Simple Aggregation Queries,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
ORDER BY r.rating DESC
LIMIT 3
RETURN r.summary",This query first matches all reviews and orders them by rating in descending order. Then it limits the results to the top 3 and returns their summaries.
Find the birth years of the people who directed movies with less than 100 votes.,movies,"<explanation>
1. **Match directors and their movies:** Start by matching `Person` nodes that have a `DIRECTED` relationship with `Movie` nodes.
2. **Filter by vote count:** Filter these pairs, keeping only the ones where the `votes` property on the `Movie` is less than 100.
3. **Return birth years:** Return the `born` property of the `Person` nodes that satisfied the conditions.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.born
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.born
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.born","1. **Match directors and their movies:** Start by matching `Person` nodes that have a `DIRECTED` relationship with `Movie` nodes.
2. **Filter by vote count:** Filter these pairs, keeping only the ones where the `votes` property on the `Movie` is less than 100.
3. **Return birth years:** Return the `born` property of the `Person` nodes that satisfied the conditions.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.born
```"
"Who wrote movies released in the same year as ""Something's Gotta Give""?",movies,"<explanation>
1. First, we need to find the movie ""Something's Gotta Give"" and get its release year.
2. Then, we need to find all movies released in that year.
3. Finally, we need to find all persons who wrote those movies and return their names.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m1:Movie {released: releaseYear})<-[:WROTE]-(p:Person)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m1:Movie {released: releaseYear})<-[:WROTE]-(p:Person)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m1:Movie {released: releaseYear})<-[:WROTE]-(p:Person)
RETURN DISTINCT p.name","1. First, we need to find the movie ""Something's Gotta Give"" and get its release year.
2. Then, we need to find all movies released in that year.
3. Finally, we need to find all persons who wrote those movies and return their names.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m1:Movie {released: releaseYear})<-[:WROTE]-(p:Person)
RETURN DISTINCT p.name
```"
What is the average number of votes for movies produced by Joel Silver?,movies,"<explanation>
1. **Find Joel Silver:** Start by matching the `Person` node with `name` set to 'Joel Silver'.
2. **Traverse relationships:** Traverse the `PRODUCED` relationships from the `Person` node to the `Movie` nodes.
3. **Calculate average:** Calculate the average `votes` for all `Movie` nodes found in the previous step using the `avg()` function.
4. **Return average:** Return the average number of votes.
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Find Joel Silver:** Start by matching the `Person` node with `name` set to 'Joel Silver'.
2. **Traverse relationships:** Traverse the `PRODUCED` relationships from the `Person` node to the `Movie` nodes.
3. **Calculate average:** Calculate the average `votes` for all `Movie` nodes found in the previous step using the `avg()` function.
4. **Return average:** Return the average number of votes."
List the names of the 3 oldest people who acted in a movie.,movies,"<explanation>
This query starts by finding all `Person` nodes and orders them in descending order based on their `born` property to get the oldest people first. Then, it limits the result to the top 3 oldest people. Finally, it returns the `name` property of these 3 people.

1. **MATCH (p:Person)** - This line matches all nodes with the label ""Person"".
2. **RETURN p.name** - This line returns the name property of each Person node.
3. **ORDER BY p.born** - This line orders the results in ascending order based on the 'born' property.
4. **LIMIT 3** - This line limits the results to the first three records, effectively selecting the three oldest people. 
</explanation>
```cypher
MATCH (p:Person)
RETURN p.name
ORDER BY p.born
LIMIT 3
```",Simple Aggregation Queries,"MATCH (p:Person)
RETURN p.name
ORDER BY p.born
LIMIT 3","This query starts by finding all `Person` nodes and orders them in descending order based on their `born` property to get the oldest people first. Then, it limits the result to the top 3 oldest people. Finally, it returns the `name` property of these 3 people.

1. **MATCH (p:Person)** - This line matches all nodes with the label ""Person"".
2. **RETURN p.name** - This line returns the name property of each Person node.
3. **ORDER BY p.born** - This line orders the results in ascending order based on the 'born' property.
4. **LIMIT 3** - This line limits the results to the first three records, effectively selecting the three oldest people."
Which movies were written by people born between 1940 and 1950?,movies,"<explanation>
This query first finds all people born between 1940 and 1950. Then, it matches these people to the movies they have written. Finally, it returns the titles of those movies.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born BETWEEN 1940 AND 1950
RETURN m.title
```",Simple Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born BETWEEN 1940 AND 1950
RETURN m.title","This query first finds all people born between 1940 and 1950. Then, it matches these people to the movies they have written. Finally, it returns the titles of those movies."
What are the titles and taglines of the movies directed by Nancy Meyers?,movies,"<explanation>
This query looks for movies directed by a person named ""Nancy Meyers"" and returns the titles and taglines of those movies.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query searches for all instances of a ""DIRECTED"" relationship between a node with the label ""Person"" (represented by the variable `p`) and a node with the label ""Movie"" (represented by the variable `m`).
2. **WHERE p.name = ""Nancy Meyers""**: This line filters the results from the previous step to only include those where the ""name"" property of the ""Person"" node is equal to ""Nancy Meyers.""
3. **RETURN m.title, m.tagline**: Finally, the query returns the ""title"" and ""tagline"" properties of the movie nodes (`m`) that meet the specified criteria.

In essence, the query first identifies all movies directed by anyone and then narrows down the results to only those directed by ""Nancy Meyers"" before presenting the titles and taglines of those movies.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.title, m.tagline
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.title, m.tagline","This query looks for movies directed by a person named ""Nancy Meyers"" and returns the titles and taglines of those movies.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query searches for all instances of a ""DIRECTED"" relationship between a node with the label ""Person"" (represented by the variable `p`) and a node with the label ""Movie"" (represented by the variable `m`).
2. **WHERE p.name = ""Nancy Meyers""**: This line filters the results from the previous step to only include those where the ""name"" property of the ""Person"" node is equal to ""Nancy Meyers.""
3. **RETURN m.title, m.tagline**: Finally, the query returns the ""title"" and ""tagline"" properties of the movie nodes (`m`) that meet the specified criteria.

In essence, the query first identifies all movies directed by anyone and then narrows down the results to only those directed by ""Nancy Meyers"" before presenting the titles and taglines of those movies."
Find the names of 3 people who acted in movies with a rating above 95.,movies,"<explanation>
1. **Match the pattern**: Look for nodes connected by the `REVIEWED` relationship where the `rating` property is above 95. The query should start with a `MATCH` clause that looks for `Person` nodes that have a `REVIEWED` relationship with a `Movie` node.
2. **Filter based on rating**: Add a `WHERE` clause to filter the `Movie` nodes based on the given `rating` condition.
3. **Return the names**: Finally, return the `name` property of the `Person` nodes using `RETURN`.
4. **Limit the results**: Use `LIMIT` to return only the top 3 names. 
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.rating > 95
RETURN DISTINCT p.name
LIMIT 3
```",Simple Aggregation Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.rating > 95
RETURN DISTINCT p.name
LIMIT 3","1. **Match the pattern**: Look for nodes connected by the `REVIEWED` relationship where the `rating` property is above 95. The query should start with a `MATCH` clause that looks for `Person` nodes that have a `REVIEWED` relationship with a `Movie` node.
2. **Filter based on rating**: Add a `WHERE` clause to filter the `Movie` nodes based on the given `rating` condition.
3. **Return the names**: Finally, return the `name` property of the `Person` nodes using `RETURN`.
4. **Limit the results**: Use `LIMIT` to return only the top 3 names."
What is the earliest birth year of a person who produced a movie?,movies,"<explanation>
This query starts with finding all people who have a PRODUCED relationship with a movie. Then, it aggregates those people and finds the minimum birth year among them.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)** - Find all Person nodes that have a PRODUCED relationship with any Movie node.
2. **WITH p.born AS birthYear** - Project the birth year of each person.
3. **RETURN min(birthYear)** - Aggregate and return the minimum birth year.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p.born AS birthYear
RETURN min(birthYear)
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p.born AS birthYear
RETURN min(birthYear)
```",Simple Aggregation Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p.born AS birthYear
RETURN min(birthYear)","This query starts with finding all people who have a PRODUCED relationship with a movie. Then, it aggregates those people and finds the minimum birth year among them.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)** - Find all Person nodes that have a PRODUCED relationship with any Movie node.
2. **WITH p.born AS birthYear** - Project the birth year of each person.
3. **RETURN min(birthYear)** - Aggregate and return the minimum birth year.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p.born AS birthYear
RETURN min(birthYear)
```"
List the roles played by Keanu Reeves in movies released after 2000.,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the `Person` node with the `name` property equal to ""Keanu Reeves"".
2. **Traverse relationships:** Traverse the `ACTED_IN` relationships originating from Keanu Reeves' node.
3. **Filter by movie release year:** Filter the movies by checking if their `released` property is greater than 2000.
4. **Return the roles:** Return the `roles` property from the `ACTED_IN` relationships for the filtered movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.tagline) AS roles
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, collect(m.tagline) AS roles
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.tagline) AS roles","1. **Find Keanu Reeves:** Start by finding the `Person` node with the `name` property equal to ""Keanu Reeves"".
2. **Traverse relationships:** Traverse the `ACTED_IN` relationships originating from Keanu Reeves' node.
3. **Filter by movie release year:** Filter the movies by checking if their `released` property is greater than 2000.
4. **Return the roles:** Return the `roles` property from the `ACTED_IN` relationships for the filtered movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.tagline) AS roles
```"
What are the summaries of the 3 reviews with the lowest ratings?,movies,"<explanation>
This query first matches all reviews and orders them by rating (ascending). 
Then, using `LIMIT`, it takes only the first 3 reviews (those with the lowest ratings).
Finally, it returns the summaries of those 3 reviews. 
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
ORDER BY r.rating ASC
LIMIT 3
RETURN r.summary
```",Simple Aggregation Queries,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
ORDER BY r.rating ASC
LIMIT 3
RETURN r.summary","This query first matches all reviews and orders them by rating (ascending). 
Then, using `LIMIT`, it takes only the first 3 reviews (those with the lowest ratings).
Finally, it returns the summaries of those 3 reviews."
Find the birth years of the people who directed the 3 movies with the most votes.,movies,"<explanation>
1. Find the top 3 movies with the most votes: We'll use `MATCH (m:Movie)` to get all movies and order them by the number of votes (`m.votes`) in descending order (`DESC`) using `ORDER BY` clause. Then, we'll limit the result to the top 3 movies using `LIMIT 3`.
2. Find directors of those movies: We'll use `MATCH (p:Person)-[:DIRECTED]->(m)` to find the people who directed those movies.
3. Return the birth year of each director:  We'll use `RETURN DISTINCT p.born` to return the birth year of each director, making sure to avoid duplicates using `DISTINCT`.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.born
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.born
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.born","1. Find the top 3 movies with the most votes: We'll use `MATCH (m:Movie)` to get all movies and order them by the number of votes (`m.votes`) in descending order (`DESC`) using `ORDER BY` clause. Then, we'll limit the result to the top 3 movies using `LIMIT 3`.
2. Find directors of those movies: We'll use `MATCH (p:Person)-[:DIRECTED]->(m)` to find the people who directed those movies.
3. Return the birth year of each director:  We'll use `RETURN DISTINCT p.born` to return the birth year of each director, making sure to avoid duplicates using `DISTINCT`.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.born
```"
Who produced movies acted in by Keanu Reeves?,movies,"<explanation>
1. We need to find Keanu Reeves. So we start by matching nodes with the label ""Person"" and the property ""name"" equal to ""Keanu Reeves.""
2. We need to traverse the graph to find the movies Keanu Reeves acted in. We can do this by traversing relationships with the type ""ACTED_IN"" going outwards from the Keanu Reeves node.
3. Next, we need to find who produced each of these movies.  We do this by traversing relationships with the type ""PRODUCED"" going inwards from each movie node.
4. Lastly, we need to return the names of the people who produced these movies.

```cypher
MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
<-[:PRODUCED]-(producer:Person)
RETURN DISTINCT producer.name
```
</explanation>
```cypher
MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
<-[:PRODUCED]-(producer:Person)
RETURN DISTINCT producer.name
```",Simple Aggregation Queries,"MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
<-[:PRODUCED]-(producer:Person)
RETURN DISTINCT producer.name","1. We need to find Keanu Reeves. So we start by matching nodes with the label ""Person"" and the property ""name"" equal to ""Keanu Reeves.""
2. We need to traverse the graph to find the movies Keanu Reeves acted in. We can do this by traversing relationships with the type ""ACTED_IN"" going outwards from the Keanu Reeves node.
3. Next, we need to find who produced each of these movies.  We do this by traversing relationships with the type ""PRODUCED"" going inwards from each movie node.
4. Lastly, we need to return the names of the people who produced these movies.

```cypher
MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
<-[:PRODUCED]-(producer:Person)
RETURN DISTINCT producer.name
```"
What is the average rating of reviews for movies released before 2000?,movies,"<explanation>
1. **Find movies released before 2000**: We start by matching all `Movie` nodes with a `released` property less than 2000.
2. **Find the reviews for those movies**: Then we traverse the `REVIEWED` relationships from those movies to the `Person` nodes who reviewed them.
3. **Calculate the average rating**: We use the `avg()` function to calculate the average of the `rating` property on the `REVIEWED` relationship.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
RETURN avg(r.rating) AS average_rating
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
RETURN avg(r.rating) AS average_rating
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
RETURN avg(r.rating) AS average_rating","1. **Find movies released before 2000**: We start by matching all `Movie` nodes with a `released` property less than 2000.
2. **Find the reviews for those movies**: Then we traverse the `REVIEWED` relationships from those movies to the `Person` nodes who reviewed them.
3. **Calculate the average rating**: We use the `avg()` function to calculate the average of the `rating` property on the `REVIEWED` relationship.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 2000
RETURN avg(r.rating) AS average_rating
```"
List the names of the 3 youngest people who wrote a movie.,movies,"<explanation>
This query starts by matching all people who wrote a movie. It then orders these people by their birth year in descending order to get the youngest first. It limits the results to the top 3, and returns their names.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
ORDER BY p.born DESC
RETURN p.name
LIMIT 3
```",Simple Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
ORDER BY p.born DESC
RETURN p.name
LIMIT 3","This query starts by matching all people who wrote a movie. It then orders these people by their birth year in descending order to get the youngest first. It limits the results to the top 3, and returns their names."
Which movies were directed by people born between 1950 and 1960?,movies,"<explanation>
This query starts with finding all people born between 1950 and 1960, then traverses the `DIRECTED` relationship to find all movies directed by those people.

1. **MATCH (p:Person)**: This line matches all nodes with the label ""Person"".
2. **WHERE p.born >= 1950 AND p.born <= 1960**: This line filters the matched ""Person"" nodes to only include those where the ""born"" property is between 1950 and 1960 (inclusive).
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This line matches all ""Movie"" nodes that are connected to the filtered ""Person"" nodes via the ""DIRECTED"" relationship.
4. **RETURN m.title**: This line returns the ""title"" property of each matched ""Movie"" node. 

</explanation>
```cypher
MATCH (p:Person)
WHERE p.born >= 1950 AND p.born <= 1960
MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN m.title
```",Simple Aggregation Queries,"MATCH (p:Person)
WHERE p.born >= 1950 AND p.born <= 1960
MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN m.title","This query starts with finding all people born between 1950 and 1960, then traverses the `DIRECTED` relationship to find all movies directed by those people.

1. **MATCH (p:Person)**: This line matches all nodes with the label ""Person"".
2. **WHERE p.born >= 1950 AND p.born <= 1960**: This line filters the matched ""Person"" nodes to only include those where the ""born"" property is between 1950 and 1960 (inclusive).
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This line matches all ""Movie"" nodes that are connected to the filtered ""Person"" nodes via the ""DIRECTED"" relationship.
4. **RETURN m.title**: This line returns the ""title"" property of each matched ""Movie"" node."
"What are the titles and release years of the movies with the tagline containing ""end""?",movies,"<explanation>
This query looks for movies with the word ""end"" in their tagline and then returns the title and release year of those movies.

1. **MATCH Clause**: We start by matching all Movie nodes.
2. **WHERE Clause**: We filter the matched movies to only include those whose tagline contains the word ""end"".
3. **RETURN Clause**: Finally, we return the title and release year of the filtered movies. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN m.title, m.released
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN m.title, m.released","This query looks for movies with the word ""end"" in their tagline and then returns the title and release year of those movies.

1. **MATCH Clause**: We start by matching all Movie nodes.
2. **WHERE Clause**: We filter the matched movies to only include those whose tagline contains the word ""end"".
3. **RETURN Clause**: Finally, we return the title and release year of the filtered movies."
Who acted in movies produced by Joel Silver?,movies,"<explanation>
This query identifies all people who acted in movies produced by the person named ""Joel Silver.""

1. **MATCH (producer:Person {name: ""Joel Silver""})-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)** This part finds all movies produced by ""Joel Silver"" and the actors who acted in those movies.
2. **RETURN DISTINCT actor.name** This part returns the unique names of the actors, preventing duplicates if an actor was in multiple movies produced by Joel Silver. 

</explanation>
```cypher
MATCH (producer:Person {name: ""Joel Silver""})-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
RETURN DISTINCT actor.name
```",Simple Aggregation Queries,"MATCH (producer:Person {name: ""Joel Silver""})-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
RETURN DISTINCT actor.name","This query identifies all people who acted in movies produced by the person named ""Joel Silver.""

1. **MATCH (producer:Person {name: ""Joel Silver""})-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)** This part finds all movies produced by ""Joel Silver"" and the actors who acted in those movies.
2. **RETURN DISTINCT actor.name** This part returns the unique names of the actors, preventing duplicates if an actor was in multiple movies produced by Joel Silver."
What is the latest birth year of a person who directed a movie?,movies,"<explanation>
1. **Start with Movie nodes:** We need to find directors, so start by matching all `Movie` nodes.
2. **Traverse DIRECTED relationships:** Traverse the `DIRECTED` relationships from `Movie` to `Person` nodes, representing directors.
3. **Find the latest birth year:** Use the `max()` aggregation function on the `born` property of the directors to find the latest birth year.

```cypher
MATCH (:Movie)<-[:DIRECTED]-(person:Person)
RETURN max(person.born) AS latestYear
```
</explanation>
```cypher
MATCH (:Movie)<-[:DIRECTED]-(person:Person)
RETURN max(person.born) AS latestYear
```",Simple Aggregation Queries,"MATCH (:Movie)<-[:DIRECTED]-(person:Person)
RETURN max(person.born) AS latestYear","1. **Start with Movie nodes:** We need to find directors, so start by matching all `Movie` nodes.
2. **Traverse DIRECTED relationships:** Traverse the `DIRECTED` relationships from `Movie` to `Person` nodes, representing directors.
3. **Find the latest birth year:** Use the `max()` aggregation function on the `born` property of the directors to find the latest birth year.

```cypher
MATCH (:Movie)<-[:DIRECTED]-(person:Person)
RETURN max(person.born) AS latestYear
```"
List the roles of Keanu Reeves in movies with a rating greater than 80.,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the `Person` node with the `name` ""Keanu Reeves.""
2. **Match Movies with Ratings:** Traverse the `ACTED_IN` relationships to find `Movie` nodes that Keanu Reeves acted in.
3. **Filter by Rating:** Filter these movies to only include those with a `rating` property on the `REVIEWED` relationship greater than 80. 
4. **Return Roles:** Return the `roles` property from the `ACTED_IN` relationships for the filtered movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN r.roles
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN r.roles
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN r.roles","1. **Find Keanu Reeves:** Start by finding the `Person` node with the `name` ""Keanu Reeves.""
2. **Match Movies with Ratings:** Traverse the `ACTED_IN` relationships to find `Movie` nodes that Keanu Reeves acted in.
3. **Filter by Rating:** Filter these movies to only include those with a `rating` property on the `REVIEWED` relationship greater than 80. 
4. **Return Roles:** Return the `roles` property from the `ACTED_IN` relationships for the filtered movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN r.roles
```"
Find the 3 movies with the shortest taglines.,movies,"<explanation>
This Cypher query should return the movies with the shortest taglines. 
1. We **MATCH** all `Movie` nodes.
2. We use `WITH` and `ORDER BY` to order the movies by tagline length in ascending order.
3. We use `LIMIT` to return only the first 3 movies, which represent the movies with the shortest taglines. 

```cypher
MATCH (m:Movie)
WITH m, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
RETURN m.title, tagline_length
```
</explanation>",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
RETURN m.title, tagline_length","This Cypher query should return the movies with the shortest taglines. 
1. We **MATCH** all `Movie` nodes.
2. We use `WITH` and `ORDER BY` to order the movies by tagline length in ascending order.
3. We use `LIMIT` to return only the first 3 movies, which represent the movies with the shortest taglines. 

```cypher
MATCH (m:Movie)
WITH m, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
RETURN m.title, tagline_length
```"
Who wrote movies released after the year Keanu Reeves was born?,movies,"<explanation>
1. We need to find the year Keanu Reeves was born. So we match (p:Person {name: 'Keanu Reeves'}) and retrieve his birth year.
2. Then we need to find all movies (m:Movie) that were released after Keanu Reeves' birth year, so we add a WHERE clause to filter on m.released.
3. We need to find all persons (p2:Person) who wrote those movies. This is done by matching the relationship (p2)-[:WROTE]->(m).
4. Finally, we return the names of the writers.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})
WITH p.born AS keanu_birth_year
MATCH (p2:Person)-[:WROTE]->(m:Movie)
WHERE m.released > keanu_birth_year
RETURN DISTINCT p2.name
```
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})
WITH p.born AS keanu_birth_year
MATCH (p2:Person)-[:WROTE]->(m:Movie)
WHERE m.released > keanu_birth_year
RETURN DISTINCT p2.name
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Keanu Reeves'})
WITH p.born AS keanu_birth_year
MATCH (p2:Person)-[:WROTE]->(m:Movie)
WHERE m.released > keanu_birth_year
RETURN DISTINCT p2.name","1. We need to find the year Keanu Reeves was born. So we match (p:Person {name: 'Keanu Reeves'}) and retrieve his birth year.
2. Then we need to find all movies (m:Movie) that were released after Keanu Reeves' birth year, so we add a WHERE clause to filter on m.released.
3. We need to find all persons (p2:Person) who wrote those movies. This is done by matching the relationship (p2)-[:WROTE]->(m).
4. Finally, we return the names of the writers.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})
WITH p.born AS keanu_birth_year
MATCH (p2:Person)-[:WROTE]->(m:Movie)
WHERE m.released > keanu_birth_year
RETURN DISTINCT p2.name
```"
List the names of the people who follow Keanu Reeves.,movies,"<explanation>
This query starts with finding the node with the name 'Keanu Reeves' and then traverses the `FOLLOWS` relationship to find the people who follow him. Finally, we return the names of those followers.

1. **Find Keanu Reeves:** `MATCH (kr:Person {name: 'Keanu Reeves'})` finds the node representing Keanu Reeves.
2. **Find Followers:** `MATCH (kr)<-[:FOLLOWS]-(followers)` traverses the `FOLLOWS` relationship from Keanu Reeves' node to the nodes of his followers.
3. **Return Follower Names:** `RETURN followers.name` returns the 'name' property of each follower.
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})
MATCH (kr)<-[:FOLLOWS]-(followers)
RETURN followers.name
```",Simple Aggregation Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})
MATCH (kr)<-[:FOLLOWS]-(followers)
RETURN followers.name","This query starts with finding the node with the name 'Keanu Reeves' and then traverses the `FOLLOWS` relationship to find the people who follow him. Finally, we return the names of those followers.

1. **Find Keanu Reeves:** `MATCH (kr:Person {name: 'Keanu Reeves'})` finds the node representing Keanu Reeves.
2. **Find Followers:** `MATCH (kr)<-[:FOLLOWS]-(followers)` traverses the `FOLLOWS` relationship from Keanu Reeves' node to the nodes of his followers.
3. **Return Follower Names:** `RETURN followers.name` returns the 'name' property of each follower."
"Which movies released before 2000 have ""fun"" in their review summaries?",movies,"<explanation>
This Cypher query identifies movies released before 2000 with the word ""fun"" in their review summaries.
1. **Match Movie Nodes:** It starts by matching all `Movie` nodes.
2. **Filter by Release Year:** It filters these movies to only include those released before the year 2000.
3. **Match Reviewed Relationships:** It then matches `REVIEWED` relationships originating from `Person` nodes to the filtered `Movie` nodes.
4. **Filter by Review Summary:** It further filters the results to include only reviews where the `summary` property contains the word ""fun"".
5. **Return Movie Titles:** Finally, the query returns the titles of the movies that meet all the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released < 2000
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'fun'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 2000
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE toLower(r.summary) CONTAINS 'fun'
RETURN DISTINCT m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released < 2000
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'fun'
RETURN m.title","This Cypher query identifies movies released before 2000 with the word ""fun"" in their review summaries.
1. **Match Movie Nodes:** It starts by matching all `Movie` nodes.
2. **Filter by Release Year:** It filters these movies to only include those released before the year 2000.
3. **Match Reviewed Relationships:** It then matches `REVIEWED` relationships originating from `Person` nodes to the filtered `Movie` nodes.
4. **Filter by Review Summary:** It further filters the results to include only reviews where the `summary` property contains the word ""fun"".
5. **Return Movie Titles:** Finally, the query returns the titles of the movies that meet all the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released < 2000
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'fun'
RETURN m.title
```"
Who acted in the movie with the most votes?,movies,"<explanation>
1. **Find the movie with the most votes**: 
   - We start by matching all `Movie` nodes.
   - We then use `order by` to arrange them in descending order of their `votes` property and use `limit 1` to pick the top one.
2. **Find the actors who acted in that movie**:
   - We use `MATCH` again to traverse from the movie node to the `Person` nodes connected by the `ACTED_IN` relationship.
3. **Return the names of the actors**:
   - Finally, we `RETURN` the `name` property of the actors. 

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name","1. **Find the movie with the most votes**: 
   - We start by matching all `Movie` nodes.
   - We then use `order by` to arrange them in descending order of their `votes` property and use `limit 1` to pick the top one.
2. **Find the actors who acted in that movie**:
   - We use `MATCH` again to traverse from the movie node to the `Person` nodes connected by the `ACTED_IN` relationship.
3. **Return the names of the actors**:
   - Finally, we `RETURN` the `name` property of the actors. 

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```"
What is the earliest year a person who reviewed a movie was born?,movies,"<explanation>
1. **Find all people who reviewed a movie:**
   - Match the `REVIEWED` relationship between a `Person` node and a `Movie` node.
2. **Get the birth year of each person:**
   - Return the `born` property of the `Person` node.
3. **Find the minimum birth year:**
   - Use the `min()` function to find the earliest birth year among the reviewers.
4. **Return the earliest birth year:**
   - Return the minimum birth year.

```cypher
MATCH (:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WITH m, size(m.tagline) AS tagline_length
RETURN avg(tagline_length) AS average_tagline_length
```
</explanation>",Simple Aggregation Queries,"MATCH (:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WITH m, size(m.tagline) AS tagline_length
RETURN avg(tagline_length) AS average_tagline_length","1. **Find all people who reviewed a movie:**
   - Match the `REVIEWED` relationship between a `Person` node and a `Movie` node.
2. **Get the birth year of each person:**
   - Return the `born` property of the `Person` node.
3. **Find the minimum birth year:**
   - Use the `min()` function to find the earliest birth year among the reviewers.
4. **Return the earliest birth year:**
   - Return the minimum birth year.

```cypher
MATCH (:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)
WITH m, size(m.tagline) AS tagline_length
RETURN avg(tagline_length) AS average_tagline_length
```"
List 3 distinct roles played by actors in movies released in 2003.,movies,"<explanation>
1. **Match nodes and relationships:**
   - Match movies released in 2003 (`WHERE m.released = 2003`)
   - Match actors who acted in those movies (`(a)-[:ACTED_IN]->(m)`).

2. **Project and return results**:
   - Return distinct roles (`DISTINCT r`) from the `roles` property of the `ACTED_IN` relationship.
   - Limit the output to 3 roles (`LIMIT 3`)

</explanation>
```cypher
MATCH (a:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN DISTINCT ai.roles AS r
LIMIT 3
```",Simple Aggregation Queries,"MATCH (a:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.released = 2003
RETURN DISTINCT ai.roles AS r
LIMIT 3","1. **Match nodes and relationships:**
   - Match movies released in 2003 (`WHERE m.released = 2003`)
   - Match actors who acted in those movies (`(a)-[:ACTED_IN]->(m)`).

2. **Project and return results**:
   - Return distinct roles (`DISTINCT r`) from the `roles` property of the `ACTED_IN` relationship.
   - Limit the output to 3 roles (`LIMIT 3`)"
Find the movies reviewed by people born before 1960.,movies,"<explanation>
1. **Find reviewers born before 1960:** 
   - Start with `(p:Person)` nodes.
   - Filter these nodes with `WHERE p.born < 1960` to select reviewers born before 1960.
2. **Find the movies they reviewed:**
   - Traverse the `-[:REVIEWED]->(m:Movie)` relationships.
3. **Return the movies:**
   - Return the `m.title` for each movie found.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title
```",Simple Aggregation Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title","1. **Find reviewers born before 1960:** 
   - Start with `(p:Person)` nodes.
   - Filter these nodes with `WHERE p.born < 1960` to select reviewers born before 1960.
2. **Find the movies they reviewed:**
   - Traverse the `-[:REVIEWED]->(m:Movie)` relationships.
3. **Return the movies:**
   - Return the `m.title` for each movie found.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title
```"
Who directed movies with more than 500 votes?,movies,"<explanation>
1. We need to find directors, so we start by matching the `DIRECTED` relationship between `Person` and `Movie` nodes.
2. We filter these movies to only those with more than 500 votes.
3. We return the names of the directors of those movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name","1. We need to find directors, so we start by matching the `DIRECTED` relationship between `Person` and `Movie` nodes.
2. We filter these movies to only those with more than 500 votes.
3. We return the names of the directors of those movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name
```"
What is the average born year of people who wrote movies?,movies,"<explanation>
1. We start by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
2. We use `WITH` clause and  `avg` function to calculate the average `born` year of these people.
3. Finally, we return the average born year.
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH avg(p.born) AS average_born_year
RETURN average_born_year
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH avg(p.born) AS average_born_year
RETURN average_born_year
```",Simple Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH avg(p.born) AS average_born_year
RETURN average_born_year","1. We start by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
2. We use `WITH` clause and  `avg` function to calculate the average `born` year of these people.
3. Finally, we return the average born year.
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH avg(p.born) AS average_born_year
RETURN average_born_year
```"
List the names of people who follow Laurence Fishburne.,movies,"<explanation>
This query starts with finding the person named 'Laurence Fishburne'. Then it traverses the `FOLLOWS` relationship outwards to find all the people who follow him. Finally, it returns the names of those followers. 
</explanation>
```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})<-[:FOLLOWS]-(follower)
RETURN follower.name
```",Simple Aggregation Queries,"MATCH (p:Person {name: 'Laurence Fishburne'})<-[:FOLLOWS]-(follower)
RETURN follower.name","This query starts with finding the person named 'Laurence Fishburne'. Then it traverses the `FOLLOWS` relationship outwards to find all the people who follow him. Finally, it returns the names of those followers."
Who acted in movies released the same year they were born?,movies,"<explanation>
This Cypher query identifies people who acted in movies released in the same year as their birth year:

1. **Match actors and their movies:** We start by finding all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.
2. **Filter based on birth and release year:**  We include a `WHERE` clause to only keep pairs where the `born` property of the `Person` node is equal to the `released` property of the `Movie` node.
3. **Return the actors' names:** We return the `name` property of the `Person` nodes who meet our criteria.

</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name","This Cypher query identifies people who acted in movies released in the same year as their birth year:

1. **Match actors and their movies:** We start by finding all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.
2. **Filter based on birth and release year:**  We include a `WHERE` clause to only keep pairs where the `born` property of the `Person` node is equal to the `released` property of the `Movie` node.
3. **Return the actors' names:** We return the `name` property of the `Person` nodes who meet our criteria."
What is the latest year a person who reviewed a movie was born?,movies,"<explanation>
1. We need to find all people who reviewed movies (`REVIEWED` relationship).
2. From those people, we need to get their birth year (`born` property on `Person` node).
3. Finally, we need return the maximum birth year.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN max(p.born) AS latestYearBorn
```
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN max(p.born) AS latestYearBorn
```",Simple Aggregation Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN max(p.born) AS latestYearBorn","1. We need to find all people who reviewed movies (`REVIEWED` relationship).
2. From those people, we need to get their birth year (`born` property on `Person` node).
3. Finally, we need return the maximum birth year.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN max(p.born) AS latestYearBorn
```"
List 3 distinct roles played by actors in movies with more than 1000 votes.,movies,"<explanation>
1. **MATCH** movies with more than 1000 votes.
2. **MATCH** actors who acted in those movies.
3. **WITH** distinct roles and count the number of roles.
4. **RETURN** the first 3 roles.
</explanation>
```cypher
MATCH (m:Movie {votes: {gt: 1000}})<-[ai:ACTED_IN]-(p:Person) 
WITH DISTINCT ai.roles AS role, count(ai.roles) AS roleCount
RETURN role ORDER BY roleCount DESC LIMIT 3
```",Simple Aggregation Queries,"MATCH (m:Movie {votes: {gt: 1000}})<-[ai:ACTED_IN]-(p:Person) 
WITH DISTINCT ai.roles AS role, count(ai.roles) AS roleCount
RETURN role ORDER BY roleCount DESC LIMIT 3","1. **MATCH** movies with more than 1000 votes.
2. **MATCH** actors who acted in those movies.
3. **WITH** distinct roles and count the number of roles.
4. **RETURN** the first 3 roles."
"Find the movies with a tagline containing the word ""Real"".",movies,"<explanation>
This query looks for all movies with the word ""Real"" in the tagline property.
1. **MATCH Clause:** We start by finding all `Movie` nodes.
2. **WHERE Clause:** We then filter these nodes to only include those whose `tagline` property contains the word ""Real"".
3. **RETURN Clause:** Finally, we return the `title` of each movie that meets our criteria. 

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.title","This query looks for all movies with the word ""Real"" in the tagline property.
1. **MATCH Clause:** We start by finding all `Movie` nodes.
2. **WHERE Clause:** We then filter these nodes to only include those whose `tagline` property contains the word ""Real"".
3. **RETURN Clause:** Finally, we return the `title` of each movie that meets our criteria. 

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.title
```"
What is the average released year of movies produced by Joel Silver?,movies,"<explanation>
1. We need to find the node with `name` property equal to ""Joel Silver"" 
2. Then, we need to traverse the `PRODUCED` relationships outgoing from the node found in the previous step.
3. For all the movies that were produced by the person found in step 1, we calculate the average value of their `released` property. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH avg(m.released) AS averageReleasedYear
RETURN averageReleasedYear
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH avg(m.released) AS averageReleasedYear
RETURN averageReleasedYear
```
",Simple Aggregation Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH avg(m.released) AS averageReleasedYear
RETURN averageReleasedYear","1. We need to find the node with `name` property equal to ""Joel Silver"" 
2. Then, we need to traverse the `PRODUCED` relationships outgoing from the node found in the previous step.
3. For all the movies that were produced by the person found in step 1, we calculate the average value of their `released` property. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH avg(m.released) AS averageReleasedYear
RETURN averageReleasedYear
```"
List the people who follow Nancy Meyers.,movies,"<explanation>
This query starts with a node with the name 'Nancy Meyers', then finds all the outgoing 'FOLLOWS' relationships. Finally, we return the names of the people at the other end of those relationships.

1. **MATCH (nancy:Person {name: 'Nancy Meyers'})-[:FOLLOWS]->(follower:Person)**: This part of the query searches for a node with the label ""Person"" and the name ""Nancy Meyers"". It then looks for outgoing relationships of type ""FOLLOWS"" from that node to other nodes labeled ""Person"".
2. **RETURN follower.name**: This part of the query specifies that we want to return the ""name"" property of the nodes that are found at the other end of the ""FOLLOWS"" relationships. 

</explanation>
```cypher
MATCH (nancy:Person {name: 'Nancy Meyers'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name
```",Simple Aggregation Queries,"MATCH (nancy:Person {name: 'Nancy Meyers'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name","This query starts with a node with the name 'Nancy Meyers', then finds all the outgoing 'FOLLOWS' relationships. Finally, we return the names of the people at the other end of those relationships.

1. **MATCH (nancy:Person {name: 'Nancy Meyers'})-[:FOLLOWS]->(follower:Person)**: This part of the query searches for a node with the label ""Person"" and the name ""Nancy Meyers"". It then looks for outgoing relationships of type ""FOLLOWS"" from that node to other nodes labeled ""Person"".
2. **RETURN follower.name**: This part of the query specifies that we want to return the ""name"" property of the nodes that are found at the other end of the ""FOLLOWS"" relationships."
Who acted in movies directed by people born before 1950?,movies,"<explanation>
1. **Find directors born before 1950:** Start by matching all `Person` nodes with a `born` property less than 1950.
2. **Find movies directed by those directors:** Traverse the `DIRECTED` relationship from those directors to the `Movie` nodes.
3. **Find actors in those movies:** Traverse the `ACTED_IN` relationship from those movies to the `Person` nodes representing the actors.
4. **Return the actors' names:** Return the `name` property of the actors.
</explanation>
```cypher
MATCH (director:Person)-[:DIRECTED]->(movie:Movie)
WHERE director.born < 1950
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```",Simple Aggregation Queries,"MATCH (director:Person)-[:DIRECTED]->(movie:Movie)
WHERE director.born < 1950
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name","1. **Find directors born before 1950:** Start by matching all `Person` nodes with a `born` property less than 1950.
2. **Find movies directed by those directors:** Traverse the `DIRECTED` relationship from those directors to the `Movie` nodes.
3. **Find actors in those movies:** Traverse the `ACTED_IN` relationship from those movies to the `Person` nodes representing the actors.
4. **Return the actors' names:** Return the `name` property of the actors."
What is the earliest released year of a movie reviewed by Keanu Reeves?,movies,"<explanation>
1. We start by finding the node with the name ""Keanu Reeves"".
2. We then traverse the `REVIEWED` relationships outgoing from the Keanu Reeves node to find all movies reviewed by him.
3. We extract the `released` property of each reviewed movie.
4. We return the minimum value of the `released` property which corresponds to the earliest released year.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:REVIEWED]->(m:Movie)
RETURN min(m.released)
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:REVIEWED]->(m:Movie)
RETURN min(m.released)
```",Simple Aggregation Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:REVIEWED]->(m:Movie)
RETURN min(m.released)","1. We start by finding the node with the name ""Keanu Reeves"".
2. We then traverse the `REVIEWED` relationships outgoing from the Keanu Reeves node to find all movies reviewed by him.
3. We extract the `released` property of each reviewed movie.
4. We return the minimum value of the `released` property which corresponds to the earliest released year.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:REVIEWED]->(m:Movie)
RETURN min(m.released)
```"
List the distinct roles played by actors in movies with a rating above 90.,movies,"<explanation>
1. **MATCH** the relationships where a Person ACTED_IN a Movie and the Person REVIEWED that Movie with a rating greater than 90.
2. **WITH** the distinct roles and return the count of each role.
3. **RETURN** the distinct roles.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
WHERE r.rating > 90
WITH DISTINCT r.roles AS roles
UNWIND roles AS role
RETURN DISTINCT role
```
</explanation>",Simple Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
WHERE r.rating > 90
WITH DISTINCT r.roles AS roles
UNWIND roles AS role
RETURN DISTINCT role","1. **MATCH** the relationships where a Person ACTED_IN a Movie and the Person REVIEWED that Movie with a rating greater than 90.
2. **WITH** the distinct roles and return the count of each role.
3. **RETURN** the distinct roles.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
WHERE r.rating > 90
WITH DISTINCT r.roles AS roles
UNWIND roles AS role
RETURN DISTINCT role
```"
"Find the movies with a tagline containing the word ""Speed"".",movies,"<explanation>
This query searches for all movies with the word ""Speed"" in their tagline.

1. **MATCH Clause**: We use `MATCH (m:Movie)` to look for all nodes with the label 'Movie' and assign them to the variable 'm'.
2. **WHERE Clause**: We filter the movies using `WHERE m.tagline CONTAINS 'Speed'`. This condition ensures we only retrieve movies whose tagline includes the word ""Speed"".
3. **RETURN Clause**:  We return the titles of the found movies using `RETURN m.title`.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN m.title","This query searches for all movies with the word ""Speed"" in their tagline.

1. **MATCH Clause**: We use `MATCH (m:Movie)` to look for all nodes with the label 'Movie' and assign them to the variable 'm'.
2. **WHERE Clause**: We filter the movies using `WHERE m.tagline CONTAINS 'Speed'`. This condition ensures we only retrieve movies whose tagline includes the word ""Speed"".
3. **RETURN Clause**:  We return the titles of the found movies using `RETURN m.title`."
Who directed movies with a rating greater than 90?,movies,"<explanation>
1. **MATCH** the relationship between Person and Movie nodes where the relationship is of type `DIRECTED`.
2. **MATCH** the relationship between a Person node from the previous match and another Movie node where the relationship is of type `REVIEWED`
3. **WHERE** the rating property on the `REVIEWED` relationship is greater than 90
4. **RETURN** the name of the Person.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m2:Movie)
WHERE m2.rating > 90
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m2:Movie)
WHERE m2.rating > 90
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m2:Movie)
WHERE m2.rating > 90
RETURN DISTINCT p.name","1. **MATCH** the relationship between Person and Movie nodes where the relationship is of type `DIRECTED`.
2. **MATCH** the relationship between a Person node from the previous match and another Movie node where the relationship is of type `REVIEWED`
3. **WHERE** the rating property on the `REVIEWED` relationship is greater than 90
4. **RETURN** the name of the Person.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m2:Movie)
WHERE m2.rating > 90
RETURN DISTINCT p.name
```"
What is the average number of votes of movies released before 2000?,movies,"<explanation>
1. We need to find all movies released before the year 2000.
2. We then need to calculate the average vote count for those movies.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. We need to find all movies released before the year 2000.
2. We then need to calculate the average vote count for those movies."
List the names of people born after 1960 who have reviewed movies.,movies,"<explanation>
This query starts by matching all people born after 1960. It then checks for a `REVIEWED` relationship between these people and any movie. Finally, it returns the names of the people who satisfy this condition. 

1. **MATCH (p:Person)**: This line starts by matching all nodes with the label ""Person"" and assigns them the variable ""p"".

2. **WHERE p.born > 1960**: This line filters the matched ""Person"" nodes, keeping only those where the ""born"" property is greater than 1960.

3. **MATCH (p)-[:REVIEWED]->(:Movie)**: This line looks for a relationship of type ""REVIEWED"" starting from the filtered ""Person"" nodes (""p"") and ending at any ""Movie"" node.

4. **RETURN DISTINCT p.name**: This line returns the distinct names of the ""Person"" nodes that have a ""REVIEWED"" relationship with a ""Movie"" node. The DISTINCT keyword ensures that each name is returned only once, even if a person reviewed multiple movies. 
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born > 1960
MATCH (p)-[:REVIEWED]->(:Movie)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (p:Person)
WHERE p.born > 1960
MATCH (p)-[:REVIEWED]->(:Movie)
RETURN DISTINCT p.name","This query starts by matching all people born after 1960. It then checks for a `REVIEWED` relationship between these people and any movie. Finally, it returns the names of the people who satisfy this condition. 

1. **MATCH (p:Person)**: This line starts by matching all nodes with the label ""Person"" and assigns them the variable ""p"".

2. **WHERE p.born > 1960**: This line filters the matched ""Person"" nodes, keeping only those where the ""born"" property is greater than 1960.

3. **MATCH (p)-[:REVIEWED]->(:Movie)**: This line looks for a relationship of type ""REVIEWED"" starting from the filtered ""Person"" nodes (""p"") and ending at any ""Movie"" node.

4. **RETURN DISTINCT p.name**: This line returns the distinct names of the ""Person"" nodes that have a ""REVIEWED"" relationship with a ""Movie"" node. The DISTINCT keyword ensures that each name is returned only once, even if a person reviewed multiple movies."
"Which movies released after 2000 have ""journey"" in their review summaries?",movies,"<explanation>
1. **Start with Movie nodes:** We begin by matching all `Movie` nodes.
2. **Filter by release year:** We use a `WHERE` clause to filter for movies released after the year 2000.
3. **Match reviewed relationships:** We use `MATCH` to traverse `REVIEWED` relationships from those movies to `Person` nodes.
4. **Filter by review summary:**  Another `WHERE` clause is used to filter for reviews that contain the word ""journey"".
5. **Return the movie titles:** Finally, we `RETURN` the titles of the movies that satisfy the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released > 2000
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'journey'
RETURN m.title","1. **Start with Movie nodes:** We begin by matching all `Movie` nodes.
2. **Filter by release year:** We use a `WHERE` clause to filter for movies released after the year 2000.
3. **Match reviewed relationships:** We use `MATCH` to traverse `REVIEWED` relationships from those movies to `Person` nodes.
4. **Filter by review summary:**  Another `WHERE` clause is used to filter for reviews that contain the word ""journey"".
5. **Return the movie titles:** Finally, we `RETURN` the titles of the movies that satisfy the criteria.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```"
Who acted in the movie with the fewest votes?,movies,"<explanation>
This query first finds the movie with the fewest votes using `min()` aggregation function and then retrieves all actors who have an `ACTED_IN` relationship with that movie.

1. **Find the movie with the fewest votes:**
   - We look for the `Movie` node with the lowest value for the `votes` property using the `min()` aggregation function.
2. **Find the actors who acted in that movie:**
   - We traverse the `ACTED_IN` relationships from the `Movie` identified in the previous step to the related `Person` nodes, representing actors.
3. **Return the names of the actors:**
   - We return the `name` property of each `Person` node found.

```cypher
MATCH (m:Movie)
WITH min(m.votes) AS min_votes
MATCH (m:Movie {votes: min_votes})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WITH min(m.votes) AS min_votes
MATCH (m:Movie {votes: min_votes})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)
WITH min(m.votes) AS min_votes
MATCH (m:Movie {votes: min_votes})<-[:ACTED_IN]-(p:Person)
RETURN p.name","This query first finds the movie with the fewest votes using `min()` aggregation function and then retrieves all actors who have an `ACTED_IN` relationship with that movie.

1. **Find the movie with the fewest votes:**
   - We look for the `Movie` node with the lowest value for the `votes` property using the `min()` aggregation function.
2. **Find the actors who acted in that movie:**
   - We traverse the `ACTED_IN` relationships from the `Movie` identified in the previous step to the related `Person` nodes, representing actors.
3. **Return the names of the actors:**
   - We return the `name` property of each `Person` node found.

```cypher
MATCH (m:Movie)
WITH min(m.votes) AS min_votes
MATCH (m:Movie {votes: min_votes})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```"
What is the median born year of people who acted in movies?,movies,"<explanation>
This query finds the median `born` year of all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.

1. **MATCH**: We start by matching all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.
2. **WITH COLLECT**: We use `COLLECT` to aggregate all the `born` years into a list.
3. **WITH**, **apoc.coll.median**, **as**: We use the `apoc.coll.median` function from the `apoc` library to calculate the median of the `born` years.
4. **RETURN**: We return the median `born` year.

```cypher
MATCH (:Person)-[:ACTED_IN]->(:Movie)
WITH collect(Person.born) AS bornYears
WITH apoc.coll.median(bornYears) AS medianBornYear
RETURN medianBornYear
```
</explanation>
```cypher
MATCH (:Person)-[:ACTED_IN]->(:Movie)
WITH collect(Person.born) AS bornYears
WITH apoc.coll.median(bornYears) AS medianBornYear
RETURN medianBornYear
```",Simple Aggregation Queries,"MATCH (:Person)-[:ACTED_IN]->(:Movie)
WITH collect(Person.born) AS bornYears
WITH apoc.coll.median(bornYears) AS medianBornYear
RETURN medianBornYear","This query finds the median `born` year of all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.

1. **MATCH**: We start by matching all `Person` nodes that have an outgoing `ACTED_IN` relationship to a `Movie` node.
2. **WITH COLLECT**: We use `COLLECT` to aggregate all the `born` years into a list.
3. **WITH**, **apoc.coll.median**, **as**: We use the `apoc.coll.median` function from the `apoc` library to calculate the median of the `born` years.
4. **RETURN**: We return the median `born` year.

```cypher
MATCH (:Person)-[:ACTED_IN]->(:Movie)
WITH collect(Person.born) AS bornYears
WITH apoc.coll.median(bornYears) AS medianBornYear
RETURN medianBornYear
```"
List 3 distinct roles played by actors in movies with less than 100 votes.,movies,"<explanation>
1. **MATCH** the `ACTED_IN` relationships between `Person` and `Movie` nodes where the movie has less than 100 votes.
2. **WITH** the `roles` property from the `ACTED_IN` relationship.
3. **UNWIND** the `roles` list to get individual role values.
4. **WITH** distinct `role` values.
5. **RETURN** the first 3 distinct roles by using `LIMIT`.

```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
WITH ai.roles AS roles
UNWIND roles AS role
WITH DISTINCT role
RETURN role
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
WITH ai.roles AS roles
UNWIND roles AS role
WITH DISTINCT role
RETURN role
LIMIT 3
```",Simple Aggregation Queries,"MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
WITH ai.roles AS roles
UNWIND roles AS role
WITH DISTINCT role
RETURN role
LIMIT 3","1. **MATCH** the `ACTED_IN` relationships between `Person` and `Movie` nodes where the movie has less than 100 votes.
2. **WITH** the `roles` property from the `ACTED_IN` relationship.
3. **UNWIND** the `roles` list to get individual role values.
4. **WITH** distinct `role` values.
5. **RETURN** the first 3 distinct roles by using `LIMIT`.

```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
WITH ai.roles AS roles
UNWIND roles AS role
WITH DISTINCT role
RETURN role
LIMIT 3
```"
Find the movies reviewed by people born after 1960.,movies,"<explanation>
1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by birth year:** We filter these persons to those born after 1960.
3. **Traverse REVIEWED relationships:** We traverse the `REVIEWED` relationships from these `Person` nodes to `Movie` nodes.
4. **Return the movies:** Finally, we return the `title` of the `Movie` nodes.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```
",Simple Aggregation Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title","1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by birth year:** We filter these persons to those born after 1960.
3. **Traverse REVIEWED relationships:** We traverse the `REVIEWED` relationships from these `Person` nodes to `Movie` nodes.
4. **Return the movies:** Finally, we return the `title` of the `Movie` nodes.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```"
Who directed movies released between 1995 and 2005?,movies,"<explanation>This query looks for people who directed movies released between 1995 and 2005. 
1. It starts by matching the `DIRECTED` relationship between a `Person` node and a `Movie` node.
2. It filters these matches to only include movies released between 1995 and 2005.
3. Finally, it returns the names of the directors (`Person` nodes).
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN p.name
```",Simple Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN p.name","This query looks for people who directed movies released between 1995 and 2005. 
1. It starts by matching the `DIRECTED` relationship between a `Person` node and a `Movie` node.
2. It filters these matches to only include movies released between 1995 and 2005.
3. Finally, it returns the names of the directors (`Person` nodes)."
What is the maximum number of roles played by a single actor in a movie?,movies,"<explanation>
This query finds the maximum number of roles played by an actor in a single movie.

1. **MATCH**: We start by matching all relationships of type `ACTED_IN` between `Person` and `Movie` nodes.
2. **WITH**: We use `WITH` to carry the `roles` property from the `ACTED_IN` relationship.
3. **UNWIND**:  The `UNWIND` clause is used to create distinct rows for each element in the `roles` list. However, since we're looking for the maximum number of roles an actor has in a *single* movie, we do not actually need to unwind the list.
4. **WITH**: We use `WITH` to find the size of each `roles` list, which represents the number of roles an actor played in a particular movie, and alias it as `number_of_roles`.
5. **RETURN**: We return the maximum value of `number_of_roles` using the `max()` function.

</explanation>
```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WITH size(ai.roles) AS number_of_roles
RETURN max(number_of_roles) 
```",Simple Aggregation Queries,"MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WITH size(ai.roles) AS number_of_roles
RETURN max(number_of_roles)","This query finds the maximum number of roles played by an actor in a single movie.

1. **MATCH**: We start by matching all relationships of type `ACTED_IN` between `Person` and `Movie` nodes.
2. **WITH**: We use `WITH` to carry the `roles` property from the `ACTED_IN` relationship.
3. **UNWIND**:  The `UNWIND` clause is used to create distinct rows for each element in the `roles` list. However, since we're looking for the maximum number of roles an actor has in a *single* movie, we do not actually need to unwind the list.
4. **WITH**: We use `WITH` to find the size of each `roles` list, which represents the number of roles an actor played in a particular movie, and alias it as `number_of_roles`.
5. **RETURN**: We return the maximum value of `number_of_roles` using the `max()` function."
List movies with reviews that have a rating between 80 and 90.,movies,"<explanation>
This Cypher query will first `MATCH` all the ""Movie"" nodes that have an incoming `REVIEWED` relationship. Then, it will filter these relationships based on the review `rating` property (between 80 and 90) using a `WHERE` clause. Finally, the query will `RETURN` the `title` of the filtered movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating >= 80 AND r.rating <= 90
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating >= 80 AND r.rating <= 90
RETURN m.title","This Cypher query will first `MATCH` all the ""Movie"" nodes that have an incoming `REVIEWED` relationship. Then, it will filter these relationships based on the review `rating` property (between 80 and 90) using a `WHERE` clause. Finally, the query will `RETURN` the `title` of the filtered movies."
"Which movies have ""football"" in their review summary?",movies,"<explanation>
This query looks for movies that have the word ""football"" in the summary of their reviews. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies (""m"") that have been reviewed. It matches the relationship ""REVIEWED"" (""r"") and the person who wrote the review (""p""). 

2. **WHERE r.summary CONTAINS 'football'**: This part filters the results to only include movies where the review summary (""r.summary"") contains the word ""football"". 

3. **RETURN DISTINCT m.title**: This part returns the titles (""m.title"") of the movies that match the criteria. The ""DISTINCT"" keyword ensures that each movie title is returned only once, even if it has multiple reviews mentioning ""football"". 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'football'
RETURN DISTINCT m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'football'
RETURN DISTINCT m.title","This query looks for movies that have the word ""football"" in the summary of their reviews. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies (""m"") that have been reviewed. It matches the relationship ""REVIEWED"" (""r"") and the person who wrote the review (""p""). 

2. **WHERE r.summary CONTAINS 'football'**: This part filters the results to only include movies where the review summary (""r.summary"") contains the word ""football"". 

3. **RETURN DISTINCT m.title**: This part returns the titles (""m.title"") of the movies that match the criteria. The ""DISTINCT"" keyword ensures that each movie title is returned only once, even if it has multiple reviews mentioning ""football""."
Who acted in movies with a release year before 1990?,movies,"<explanation>
This query starts with all Movie nodes. Then it matches to movies released before 1990. Then, it matches to people who acted in those movies. Finally, it returns the names of those people.

1. **MATCH (m:Movie)** - This line starts the query by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.released < 1990** - This line filters the matched movies to only include those released before the year 1990.
3. **MATCH (p:Person)-[:ACTED_IN]->(m)** - This line matches all ""Person"" nodes that have an ""ACTED_IN"" relationship with the previously filtered movies.
4. **RETURN DISTINCT p.name** - This line returns the unique names of the actors found in the previous step, removing any duplicates.

```cypher
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","This query starts with all Movie nodes. Then it matches to movies released before 1990. Then, it matches to people who acted in those movies. Finally, it returns the names of those people.

1. **MATCH (m:Movie)** - This line starts the query by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.released < 1990** - This line filters the matched movies to only include those released before the year 1990.
3. **MATCH (p:Person)-[:ACTED_IN]->(m)** - This line matches all ""Person"" nodes that have an ""ACTED_IN"" relationship with the previously filtered movies.
4. **RETURN DISTINCT p.name** - This line returns the unique names of the actors found in the previous step, removing any duplicates.

```cypher
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```"
What is the minimum number of votes for movies released after 2000?,movies,"<explanation>
This query finds the minimum vote count for movies released after the year 2000. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies to only include those released after the year 2000.
3. **WITH Clause:** We use `min(movie.votes)` to calculate the minimum vote count among the filtered movies.
4. **RETURN Clause:** Finally, we return the minimum vote count aliased as `minimumVotes`.
</explanation>
```cypher
MATCH (movie:Movie)
WHERE movie.released > 2000
WITH min(movie.votes) AS minimumVotes
RETURN minimumVotes
```",Simple Aggregation Queries,"MATCH (movie:Movie)
WHERE movie.released > 2000
WITH min(movie.votes) AS minimumVotes
RETURN minimumVotes","This query finds the minimum vote count for movies released after the year 2000. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies to only include those released after the year 2000.
3. **WITH Clause:** We use `min(movie.votes)` to calculate the minimum vote count among the filtered movies.
4. **RETURN Clause:** Finally, we return the minimum vote count aliased as `minimumVotes`."
"List the movies with review summaries containing ""romp"".",movies,"<explanation>
1. **Find all reviews that contain ""romp"" in the summary:**
   - We start by matching all `REVIEWED` relationships.
   - Then we filter these relationships based on whether the `summary` property contains the word ""romp"".
2. **Return the titles of the movies connected to those reviews:**
   - We return the `title` property of the `Movie` nodes that are connected to the filtered `REVIEWED` relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'romp'
RETURN m.title
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'romp'
RETURN m.title
```",Simple Aggregation Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'romp'
RETURN m.title","1. **Find all reviews that contain ""romp"" in the summary:**
   - We start by matching all `REVIEWED` relationships.
   - Then we filter these relationships based on whether the `summary` property contains the word ""romp"".
2. **Return the titles of the movies connected to those reviews:**
   - We return the `title` property of the `Movie` nodes that are connected to the filtered `REVIEWED` relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'romp'
RETURN m.title
```"
"Find the movies with taglines containing the word ""Matrix"".",movies,"<explanation>
This query looks for movies with the word ""Matrix"" in their tagline.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.tagline CONTAINS ""Matrix""**: This line filters the found movies to only include those where the ""tagline"" property contains the word ""Matrix"". 
3. **RETURN m**: Finally, the query returns the movies that meet the criteria.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Matrix""
RETURN m
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Matrix""
RETURN m","This query looks for movies with the word ""Matrix"" in their tagline.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.tagline CONTAINS ""Matrix""**: This line filters the found movies to only include those where the ""tagline"" property contains the word ""Matrix"". 
3. **RETURN m**: Finally, the query returns the movies that meet the criteria."
"Who directed movies released the same year as ""Speed Racer""?",movies,"<explanation>
1. We need to find the release year of the movie ""Speed Racer"".
2. Then we need to find all movies released in that year.
3. Finally, we return the names of the people who directed those movies.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})<-[:DIRECTED]-(p:Person)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})<-[:DIRECTED]-(p:Person)
RETURN DISTINCT p.name
```",Simple Aggregation Queries,"MATCH (m:Movie {title: ""Speed Racer""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})<-[:DIRECTED]-(p:Person)
RETURN DISTINCT p.name","1. We need to find the release year of the movie ""Speed Racer"".
2. Then we need to find all movies released in that year.
3. Finally, we return the names of the people who directed those movies.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})<-[:DIRECTED]-(p:Person)
RETURN DISTINCT p.name
```"
What is the maximum rating given in a movie review?,movies,"<explanation>This query returns the maximum rating from all movie reviews. 
It first matches all relationships of type `REVIEWED`.
Then, it finds the maximum `rating` property among these relationships.

```cypher
MATCH ()-[:REVIEWED]->()
RETURN max(relationship.rating) AS max_rating
```
</explanation>
```cypher
MATCH ()-[:REVIEWED]->()
RETURN max(relationship.rating) AS max_rating
```",Simple Aggregation Queries,"MATCH ()-[:REVIEWED]->()
RETURN max(relationship.rating) AS max_rating","This query returns the maximum rating from all movie reviews. 
It first matches all relationships of type `REVIEWED`.
Then, it finds the maximum `rating` property among these relationships.

```cypher
MATCH ()-[:REVIEWED]->()
RETURN max(relationship.rating) AS max_rating
```"
List the movies released between 1995 and 2005 with more than 500 votes.,movies,"<explanation>
This query looks for movies released between 1995 and 2005 with more than 500 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause**: We filter these movies to only include those released between 1995 and 2005 and having more than 500 votes.
3. **RETURN Clause:** We return the title of each movie that meets our criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005 AND m.votes > 500
RETURN m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005 AND m.votes > 500
RETURN m.title","This query looks for movies released between 1995 and 2005 with more than 500 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause**: We filter these movies to only include those released between 1995 and 2005 and having more than 500 votes.
3. **RETURN Clause:** We return the title of each movie that meets our criteria."
"Which movies have ""Slapstick"" in their review summary?",movies,"<explanation>
This query looks for movies that have the specific phrase ""Slapstick"" in the summary of their reviews. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This finds all movies and the people who reviewed them.
2. **WHERE r.summary CONTAINS 'Slapstick'** - This filters for reviews where the summary contains ""Slapstick"". 
3. **RETURN DISTINCT m.title** - This returns the titles of those movies, ensuring each movie is listed only once.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'Slapstick'
RETURN DISTINCT m.title
```",Simple Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'Slapstick'
RETURN DISTINCT m.title","This query looks for movies that have the specific phrase ""Slapstick"" in the summary of their reviews. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This finds all movies and the people who reviewed them.
2. **WHERE r.summary CONTAINS 'Slapstick'** - This filters for reviews where the summary contains ""Slapstick"". 
3. **RETURN DISTINCT m.title** - This returns the titles of those movies, ensuring each movie is listed only once."
Who acted in the same movie as Laurence Fishburne?,movies,"<explanation>
1. **Find the person named Laurence Fishburne:**
   - Start by matching a `Person` node where `name` is ""Laurence Fishburne"".
2. **Find the movies Laurence Fishburne acted in:**
   - Traverse outgoing `ACTED_IN` relationships from the `Person` node to `Movie` nodes.
3. **Find other actors who acted in those movies:**
   - Traverse incoming `ACTED_IN` relationships from the `Movie` nodes to other `Person` nodes.
4. **Return the names of those actors:**
   - Return the `name` property of the other `Person` nodes.

```cypher
MATCH (person:Person { name: ""Laurence Fishburne"" })-[:ACTED_IN]->(movie:Movie)
MATCH (movie)<-[:ACTED_IN]-(coActor:Person)
RETURN DISTINCT coActor.name
```
</explanation>
```cypher
MATCH (person:Person { name: ""Laurence Fishburne"" })-[:ACTED_IN]->(movie:Movie)
MATCH (movie)<-[:ACTED_IN]-(coActor:Person)
RETURN DISTINCT coActor.name
```
",Simple Aggregation Queries,"MATCH (person:Person { name: ""Laurence Fishburne"" })-[:ACTED_IN]->(movie:Movie)
MATCH (movie)<-[:ACTED_IN]-(coActor:Person)
RETURN DISTINCT coActor.name","1. **Find the person named Laurence Fishburne:**
   - Start by matching a `Person` node where `name` is ""Laurence Fishburne"".
2. **Find the movies Laurence Fishburne acted in:**
   - Traverse outgoing `ACTED_IN` relationships from the `Person` node to `Movie` nodes.
3. **Find other actors who acted in those movies:**
   - Traverse incoming `ACTED_IN` relationships from the `Movie` nodes to other `Person` nodes.
4. **Return the names of those actors:**
   - Return the `name` property of the other `Person` nodes.

```cypher
MATCH (person:Person { name: ""Laurence Fishburne"" })-[:ACTED_IN]->(movie:Movie)
MATCH (movie)<-[:ACTED_IN]-(coActor:Person)
RETURN DISTINCT coActor.name
```"
What is the minimum rating given in a movie review?,movies,"<explanation>This query finds the minimum movie rating from all reviews by looking at the `rating` property on all `REVIEWED` relationships. It then returns this minimum value as `minimumRating`.</explanation>
```cypher
MATCH ()-[:REVIEWED]->(m)
RETURN min(m.rating) AS minimumRating
```",Simple Aggregation Queries,"MATCH ()-[:REVIEWED]->(m)
RETURN min(m.rating) AS minimumRating",This query finds the minimum movie rating from all reviews by looking at the `rating` property on all `REVIEWED` relationships. It then returns this minimum value as `minimumRating`.
Which movies released between 1990 and 2000 have more than 5000 votes?,movies,"<explanation>
This query looks for movies released between 1990 and 2000 that have more than 5000 votes. 

1. **MATCH Clause:** It starts by matching all `Movie` nodes.
2. **WHERE Clause:** Then filters these movies based on their release year (between 1990 and 2000) and the number of votes (greater than 5000).
3. **RETURN Clause:** Finally, the query returns the titles of the movies that meet both criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000 AND m.votes > 5000
RETURN m.title
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000 AND m.votes > 5000
RETURN m.title","This query looks for movies released between 1990 and 2000 that have more than 5000 votes. 

1. **MATCH Clause:** It starts by matching all `Movie` nodes.
2. **WHERE Clause:** Then filters these movies based on their release year (between 1990 and 2000) and the number of votes (greater than 5000).
3. **RETURN Clause:** Finally, the query returns the titles of the movies that meet both criteria."
List the first 3 movies directed by Lana Wachowski.,movies,"<explanation>
This query starts with a MATCH clause that searches for Person nodes with the name ""Lana Wachowski""  who have a DIRECTED relationship with a Movie node. 
Then it returns the title of the movie. The query limits the result to the first 3 movies using the LIMIT clause.

```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title
LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title
LIMIT 3","This query starts with a MATCH clause that searches for Person nodes with the name ""Lana Wachowski""  who have a DIRECTED relationship with a Movie node. 
Then it returns the title of the movie. The query limits the result to the first 3 movies using the LIMIT clause.

```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title
LIMIT 3
```"
"Who are the first 3 people who acted in ""The Matrix""?",movies,"<explanation>
This query looks for a movie with the title ""The Matrix"", then returns the first 3 people who acted in it.

1. **MATCH (m:Movie)**: This part finds the movie node with the title ""The Matrix"".
2. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This part finds all people who have an ACTED_IN relationship with the movie.
3. **RETURN p.name**: This returns the name of the people.
4. **LIMIT 3**: This limits the results to the first 3.

</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3","This query looks for a movie with the title ""The Matrix"", then returns the first 3 people who acted in it.

1. **MATCH (m:Movie)**: This part finds the movie node with the title ""The Matrix"".
2. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This part finds all people who have an ACTED_IN relationship with the movie.
3. **RETURN p.name**: This returns the name of the people.
4. **LIMIT 3**: This limits the results to the first 3."
What are the roles played by Keanu Reeves in the movies he acted in?,movies,"<explanation>
This Cypher query will find the movies that ""Keanu Reeves"" acted in and then return the roles he played.
1. **MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)**: This part of the query starts by finding the ""Keanu Reeves"" node and then traverses the `ACTED_IN` relationship to find all the movies he has acted in. 
2. **RETURN movie.title, movie.released, collect(movie.tagline), collect(rels.roles)**: Finally, we return the title and released year of those movies along with the roles he played in each movie. 

```cypher
MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
RETURN movie.title, movie.released, collect(movie.tagline), collect(rels.roles) 
```
</explanation>",Pathfinding Queries,"MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
RETURN movie.title, movie.released, collect(movie.tagline), collect(rels.roles)","This Cypher query will find the movies that ""Keanu Reeves"" acted in and then return the roles he played.
1. **MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)**: This part of the query starts by finding the ""Keanu Reeves"" node and then traverses the `ACTED_IN` relationship to find all the movies he has acted in. 
2. **RETURN movie.title, movie.released, collect(movie.tagline), collect(rels.roles)**: Finally, we return the title and released year of those movies along with the roles he played in each movie. 

```cypher
MATCH (person:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(movie:Movie)
RETURN movie.title, movie.released, collect(movie.tagline), collect(rels.roles) 
```"
Which movies did Joel Silver produce?,movies,"<explanation>
This query starts with finding the ""Person"" node with the name ""Joel Silver"".  Then it traverses the ""PRODUCED"" relationship to the connected ""Movie"" nodes. Finally, it returns the titles of those movies.
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
RETURN m.title
```",Pathfinding Queries,"MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
RETURN m.title","This query starts with finding the ""Person"" node with the name ""Joel Silver"".  Then it traverses the ""PRODUCED"" relationship to the connected ""Movie"" nodes. Finally, it returns the titles of those movies."
"Who directed the movie ""Speed Racer""?",movies,"<explanation>
This query identifies the director of the movie ""Speed Racer"".

1. **MATCH Clause:** We start by matching the movie with the title ""Speed Racer"".
2. **Traversing the Relationship:** We then traverse the `DIRECTED` relationship backwards (indicated by the arrow pointing to the left) to find the `Person` who directed the movie.
3. **RETURN Clause:** Finally, we return the `name` of the director.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Pathfinding Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:DIRECTED]-(d:Person)
RETURN d.name","This query identifies the director of the movie ""Speed Racer"".

1. **MATCH Clause:** We start by matching the movie with the title ""Speed Racer"".
2. **Traversing the Relationship:** We then traverse the `DIRECTED` relationship backwards (indicated by the arrow pointing to the left) to find the `Person` who directed the movie.
3. **RETURN Clause:** Finally, we return the `name` of the director.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
"What is the tagline of the movie ""V for Vendetta""?",movies,"<explanation>This query looks for a Movie node with the title ""V for Vendetta"" and returns the tagline property of that movie.</explanation>
```cypher
MATCH (m:Movie {title: ""V for Vendetta""})
RETURN m.tagline
```",Pathfinding Queries,"MATCH (m:Movie {title: ""V for Vendetta""})
RETURN m.tagline","This query looks for a Movie node with the title ""V for Vendetta"" and returns the tagline property of that movie."
"How many votes did the movie ""The Matrix"" receive?",movies,"<explanation>This Cypher query starts by finding the movie with the title ""The Matrix."" Then, it returns the number of votes associated with that movie.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
RETURN m.votes
```
</explanation>",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})
RETURN m.votes","This Cypher query starts by finding the movie with the title ""The Matrix."" Then, it returns the number of votes associated with that movie.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
RETURN m.votes
```"
"In what year was the movie ""Speed Racer"" released?",movies,"<explanation>
This query looks for a Movie node with the title ""Speed Racer"" and then returns the value of its `released` property. 

1. **MATCH** clause finds the movie with the title ""Speed Racer.""
2. **RETURN** clause returns the value of the `released` property for the found movie.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released
```",Pathfinding Queries,"MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released","This query looks for a Movie node with the title ""Speed Racer"" and then returns the value of its `released` property. 

1. **MATCH** clause finds the movie with the title ""Speed Racer.""
2. **RETURN** clause returns the value of the `released` property for the found movie.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released
```"
"Who produced the movie with the tagline ""Welcome to the Real World""?",movies,"<explanation>
This query first locates the movie with the specific tagline. Then, it traverses the PRODUCED relationship backwards to find the person who produced that movie. Finally, it returns the name of the person.

1. **MATCH (m:Movie)**: This part finds a node with the label ""Movie"" and assigns it to the variable `m`.
2. **WHERE m.tagline = ""Welcome to the Real World""**: This part filters the movies to find the one with the tagline ""Welcome to the Real World"".
3. **MATCH (p:Person)-[:PRODUCED]->(m)**: This part looks for a relationship of type PRODUCED starting from a ""Person"" node (assigned to variable `p`) and ending at the previously found movie node `m`.
4. **RETURN p.name**: This part returns the name of the person who produced the movie.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline = ""Welcome to the Real World""
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.tagline = ""Welcome to the Real World""
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name","This query first locates the movie with the specific tagline. Then, it traverses the PRODUCED relationship backwards to find the person who produced that movie. Finally, it returns the name of the person.

1. **MATCH (m:Movie)**: This part finds a node with the label ""Movie"" and assigns it to the variable `m`.
2. **WHERE m.tagline = ""Welcome to the Real World""**: This part filters the movies to find the one with the tagline ""Welcome to the Real World"".
3. **MATCH (p:Person)-[:PRODUCED]->(m)**: This part looks for a relationship of type PRODUCED starting from a ""Person"" node (assigned to variable `p`) and ending at the previously found movie node `m`.
4. **RETURN p.name**: This part returns the name of the person who produced the movie."
What are the first 3 movies reviewed with a rating above 90?,movies,"<explanation>
1. **Identify the starting node and relationship:** We need to find 'movies' which have a relationship of type 'REVIEWED' connected to it.
2. **Filter based on property values:** Only movies with a 'rating' property greater than 90 should be returned. 
3. **Limit returned values:**  We only need the first 3 movies.
4. **Return the movie title:** Return the 'title' property of the selected movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 90
RETURN m.title
LIMIT 3","1. **Identify the starting node and relationship:** We need to find 'movies' which have a relationship of type 'REVIEWED' connected to it.
2. **Filter based on property values:** Only movies with a 'rating' property greater than 90 should be returned. 
3. **Limit returned values:**  We only need the first 3 movies.
4. **Return the movie title:** Return the 'title' property of the selected movies."
"List the first 3 reviews' summaries and ratings for ""The Matrix"".",movies,"<explanation>
This Cypher query aims to retrieve and list the first 3 reviews' summaries and ratings for the movie ""The Matrix.""

1. **Match Movie Node:** We start by matching the ""Movie"" node with the title ""The Matrix.""
   ```cypher
   MATCH (m:Movie {title: ""The Matrix""})
   ```
2. **Match Review Relationships:** We then traverse the ""REVIEWED"" relationships originating from any ""Person"" nodes to the matched ""Movie"" node (m).
   ```cypher
   MATCH (p:Person)-[r:REVIEWED]->(m)
   ```
3. **Return Summary and Rating:** For each ""REVIEWED"" relationship, we return the 'summary' and 'rating' properties.
   ```cypher
   RETURN r.summary, r.rating
   ```
4. **Limit Results:** Finally, we use `LIMIT` to restrict the output to the first 3 reviews.
   ```cypher
   LIMIT 3
   ```
<explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary, r.rating
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})
   ```
2. **Match Review Relationships:** We then traverse the ""REVIEWED"" relationships originating from any ""Person"" nodes to the matched ""Movie"" node (m).
   ```cypher
   MATCH (p:Person)-[r:REVIEWED]->(m)
   ```
3. **Return Summary and Rating:** For each ""REVIEWED"" relationship, we return the 'summary' and 'rating' properties.
   ```cypher
   RETURN r.summary, r.rating
   ```
4. **Limit Results:** Finally, we use `LIMIT` to restrict the output to the first 3 reviews.
   ```cypher
   LIMIT 3
   ```
<explanation>",
Who are the first 3 people who reviewed movies with a rating between 70 and 80?,movies,"<explanation>
This query finds all reviewers who rated movies between 70 and 80, orders the results and returns only the first 3.

1. **MATCH**: We match all people who reviewed movies with a rating between 70 and 80.
2. **WITH**: We use `WITH` to carry the `person` variable to the next clause and avoid implicit aggregation.
3. **RETURN**:  We return the `person.name` property of the first 3 reviewers.

```cypher
MATCH (person:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=80
WITH person
RETURN person.name
LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (person:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=80
WITH person
RETURN person.name
LIMIT 3","This query finds all reviewers who rated movies between 70 and 80, orders the results and returns only the first 3.

1. **MATCH**: We match all people who reviewed movies with a rating between 70 and 80.
2. **WITH**: We use `WITH` to carry the `person` variable to the next clause and avoid implicit aggregation.
3. **RETURN**:  We return the `person.name` property of the first 3 reviewers.

```cypher
MATCH (person:Person)-[r:REVIEWED]->(m:Movie)
WHERE  r.rating >= 70 AND r.rating <=80
WITH person
RETURN person.name
LIMIT 3
```"
What is the average rating given by the first 3 reviewers?,movies,"<explanation>
1. We need to identify all `REVIEWED` relationships.
2. We need to order `REVIEWED` relationships. It is not specified in the question how to order them, so we will order them by rating (`r.rating`) in descending order.
3. We limit the number of reviewers to 3
4. We calculate the average rating using `avg()` aggregation function

```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
WITH r
ORDER BY r.rating DESC
LIMIT 3
RETURN avg(r.rating) AS average_rating
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
WITH r
ORDER BY r.rating DESC
LIMIT 3
RETURN avg(r.rating) AS average_rating
```",Pathfinding Queries,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
WITH r
ORDER BY r.rating DESC
LIMIT 3
RETURN avg(r.rating) AS average_rating","1. We need to identify all `REVIEWED` relationships.
2. We need to order `REVIEWED` relationships. It is not specified in the question how to order them, so we will order them by rating (`r.rating`) in descending order.
3. We limit the number of reviewers to 3
4. We calculate the average rating using `avg()` aggregation function

```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
WITH r
ORDER BY r.rating DESC
LIMIT 3
RETURN avg(r.rating) AS average_rating
```"
"Which movies have been reviewed with the summary ""A solid romp""?",movies,"<explanation>
This query looks for all movies that have a `REVIEWED` relationship with the summary property set to ""A solid romp"" and returns the titles of those movies.

1. **MATCH Clause:** We start by finding all `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node. 
2. **WHERE Clause:** We filter for `REVIEWED` relationships where the `summary` property is ""A solid romp"".
3. **RETURN Clause:** We return the `title` property of the `Movie` nodes that match our criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```",Pathfinding Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title","This query looks for all movies that have a `REVIEWED` relationship with the summary property set to ""A solid romp"" and returns the titles of those movies.

1. **MATCH Clause:** We start by finding all `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node. 
2. **WHERE Clause:** We filter for `REVIEWED` relationships where the `summary` property is ""A solid romp"".
3. **RETURN Clause:** We return the `title` property of the `Movie` nodes that match our criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```"
What is the highest rating given to a movie directed by Lana Wachowski?,movies,"<explanation>
1. **Find the director**: We need to start by finding the `Person` node with the name ""Lana Wachowski"".
2. **Traverse to movies**: From the director node, we need to traverse the `DIRECTED` relationship to find all movies directed by Lana Wachowski.
3. **Find reviews**: From each movie, traverse the `REVIEWED` relationship to find all reviews associated with those movies.
4. **Get the maximum rating**:  Among all the reviews found, identify the highest rating.

```cypher
MATCH (d:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(p:Person)
RETURN max(r.rating) AS max_rating
```
</explanation>
```cypher
MATCH (d:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(p:Person)
RETURN max(r.rating) AS max_rating
```",Pathfinding Queries,"MATCH (d:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(p:Person)
RETURN max(r.rating) AS max_rating","1. **Find the director**: We need to start by finding the `Person` node with the name ""Lana Wachowski"".
2. **Traverse to movies**: From the director node, we need to traverse the `DIRECTED` relationship to find all movies directed by Lana Wachowski.
3. **Find reviews**: From each movie, traverse the `REVIEWED` relationship to find all reviews associated with those movies.
4. **Get the maximum rating**:  Among all the reviews found, identify the highest rating.

```cypher
MATCH (d:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(p:Person)
RETURN max(r.rating) AS max_rating
```"
"List the first 3 movies produced by Joel Silver, along with their release year and number of votes.",movies,"<explanation>
1. **Find the person named ""Joel Silver"".**
   - We'll start by matching the Person node with the name ""Joel Silver"". 
2. **Traverse the PRODUCED relationships.**
   - From the ""Joel Silver"" node, we'll traverse outgoing PRODUCED relationships to find the movies he produced.
3. **Return the movie title, release year, and the number of votes.**
   - For each found movie, we'll return its title, released year, and votes properties.
4. **Limit the result to the first 3 movies.**
   - We'll use `LIMIT` to restrict the output to the first three movies found.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS movieTitle, m.released AS releaseYear, m.votes AS votes
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS movieTitle, m.released AS releaseYear, m.votes AS votes
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS movieTitle, m.released AS releaseYear, m.votes AS votes
LIMIT 3","1. **Find the person named ""Joel Silver"".**
   - We'll start by matching the Person node with the name ""Joel Silver"". 
2. **Traverse the PRODUCED relationships.**
   - From the ""Joel Silver"" node, we'll traverse outgoing PRODUCED relationships to find the movies he produced.
3. **Return the movie title, release year, and the number of votes.**
   - For each found movie, we'll return its title, released year, and votes properties.
4. **Limit the result to the first 3 movies.**
   - We'll use `LIMIT` to restrict the output to the first three movies found.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS movieTitle, m.released AS releaseYear, m.votes AS votes
LIMIT 3
```"
Find the first 3 people born after 1960 who directed a movie.,movies,"<explanation>
1. We start by matching all `Person` nodes with `born` greater than 1960.
2. Then we traverse the `DIRECTED` relationship to `Movie` nodes.
3. We return the `name` property of the first 3 `Person` nodes that satisfy the conditions.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 3
```
",Pathfinding Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 3","1. We start by matching all `Person` nodes with `born` greater than 1960.
2. Then we traverse the `DIRECTED` relationship to `Movie` nodes.
3. We return the `name` property of the first 3 `Person` nodes that satisfy the conditions.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 3
```"
What are the taglines of the first 3 movies released before 1995?,movies,"<explanation>
This Cypher query first finds all movies released before 1995, orders them by release date, limits the result to the first 3 movies, and returns their taglines.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released < 1995** - This line filters the matched movies to only include those released before 1995.
3. **WITH m ORDER BY m.released LIMIT 3** - This line orders the filtered movies by their release date in ascending order using `ORDER BY m.released`, then limits the results to the first 3 movies using `LIMIT 3`.
4. **RETURN m.tagline** - This line returns the tagline of each movie in the result set.

This query efficiently retrieves the desired information by leveraging filtering, ordering, and limiting operations within the Cypher query language. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1995
WITH m ORDER BY m.released LIMIT 3
RETURN m.tagline
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released < 1995
WITH m ORDER BY m.released LIMIT 3
RETURN m.tagline","This Cypher query first finds all movies released before 1995, orders them by release date, limits the result to the first 3 movies, and returns their taglines.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released < 1995** - This line filters the matched movies to only include those released before 1995.
3. **WITH m ORDER BY m.released LIMIT 3** - This line orders the filtered movies by their release date in ascending order using `ORDER BY m.released`, then limits the results to the first 3 movies using `LIMIT 3`.
4. **RETURN m.tagline** - This line returns the tagline of each movie in the result set.

This query efficiently retrieves the desired information by leveraging filtering, ordering, and limiting operations within the Cypher query language."
Which person directed and produced the same movie?,movies,"<explanation>
This Cypher query identifies people who have both directed and produced the same movie. It achieves this by:

1. **Matching**: Find all persons who have directed a movie and persons who have produced a movie.
2. **Filtering**: Filter for persons who have directed and produced the same movie.
3. **Returning**: Return the names of those persons.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```",Pathfinding Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name","This Cypher query identifies people who have both directed and produced the same movie. It achieves this by:

1. **Matching**: Find all persons who have directed a movie and persons who have produced a movie.
2. **Filtering**: Filter for persons who have directed and produced the same movie.
3. **Returning**: Return the names of those persons.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```"
Who are the first 3 people who acted in movies released after 2000?,movies,"<explanation>
1. We start with finding `Movie` nodes that have a `released` property greater than 2000.
2. We then traverse the `ACTED_IN` relationship from those movies to `Person` nodes.
3. We return the `name` property of the first 3 `Person` nodes found.

```cypher
MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3","1. We start with finding `Movie` nodes that have a `released` property greater than 2000.
2. We then traverse the `ACTED_IN` relationship from those movies to `Person` nodes.
3. We return the `name` property of the first 3 `Person` nodes found.

```cypher
MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3
```"
What are the titles of the first 3 movies with more than 1000 votes?,movies,"<explanation>
This Cypher query first finds all movies with more than 1000 votes and orders them by title. Then it limits the result to the first 3 and returns their titles.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes > 1000** - This line filters the matched movies to only include those with more than 1000 votes.
3. **WITH m ORDER BY m.title** - This line passes the filtered movies to the next part of the query and orders them alphabetically by title.
4. **LIMIT 3** - This limits the result to the first 3 movies.
5. **RETURN m.title** - Finally, this line returns the titles of the selected movies.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 1000
WITH m ORDER BY m.title
LIMIT 3
RETURN m.title
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.votes > 1000
WITH m ORDER BY m.title
LIMIT 3
RETURN m.title","This Cypher query first finds all movies with more than 1000 votes and orders them by title. Then it limits the result to the first 3 and returns their titles.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes > 1000** - This line filters the matched movies to only include those with more than 1000 votes.
3. **WITH m ORDER BY m.title** - This line passes the filtered movies to the next part of the query and orders them alphabetically by title.
4. **LIMIT 3** - This limits the result to the first 3 movies.
5. **RETURN m.title** - Finally, this line returns the titles of the selected movies."
List the first 3 people born before 1960 who produced a movie.,movies,"<explanation>
1. We start by matching all `Person` nodes with a `born` property less than 1960.
2. We then traverse the `PRODUCED` relationship to find all movies produced by those people.
3. We return the names of the people and order them in ascending order of their birth year.
4. Finally, we limit the result to the first 3 people. 

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
ORDER BY p.born ASC
LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
ORDER BY p.born ASC
LIMIT 3","1. We start by matching all `Person` nodes with a `born` property less than 1960.
2. We then traverse the `PRODUCED` relationship to find all movies produced by those people.
3. We return the names of the people and order them in ascending order of their birth year.
4. Finally, we limit the result to the first 3 people. 

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN p.name
ORDER BY p.born ASC
LIMIT 3
```"
Find the first 3 movies with the lowest number of votes.,movies,"<explanation>
This query starts with all Movie nodes, orders them by the number of votes in ascending order, limits the result to the first 3 movies, and returns their titles.
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title AS movie_title, m.votes AS num_votes
ORDER BY num_votes ASC
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)
RETURN m.title AS movie_title, m.votes AS num_votes
ORDER BY num_votes ASC
LIMIT 3","This query starts with all Movie nodes, orders them by the number of votes in ascending order, limits the result to the first 3 movies, and returns their titles."
What is the average number of votes for movies released between 1995 and 2005?,movies,"<explanation>
1. **Match movies released between 1995 and 2005:** We start by matching all `Movie` nodes with a `released` property value between 1995 and 2005.
2. **Calculate the average vote count:** We use the `avg()` function to compute the average of the `votes` property across all matched movies.
3. **Return the average vote count:**  We return the average vote count.

```cypher
MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN avg(m.votes) AS average_votes
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN avg(m.votes) AS average_votes
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN avg(m.votes) AS average_votes","1. **Match movies released between 1995 and 2005:** We start by matching all `Movie` nodes with a `released` property value between 1995 and 2005.
2. **Calculate the average vote count:** We use the `avg()` function to compute the average of the `votes` property across all matched movies.
3. **Return the average vote count:**  We return the average vote count.

```cypher
MATCH (m:Movie)
WHERE m.released BETWEEN 1995 AND 2005
RETURN avg(m.votes) AS average_votes
```"
Which person directed the movie with the highest number of votes?,movies,"<explanation>
1. **Find the movie with the highest number of votes**: We need to find the Movie node with the maximum value for the `votes` property.
2. **Identify the director**: From the Movie node with the highest votes, we need to traverse the `DIRECTED` relationship in the incoming direction to find the Person node who directed that movie.
3. **Return the person's name**: Finally, we'll return the `name` property of the director.

We can accomplish this using the `max()` function to find the maximum votes, and `WITH` to pass the result to the subsequent `MATCH` clause. 
</explanation>
```cypher
MATCH (m:Movie)
WITH max(m.votes) AS max_votes
MATCH (m:Movie {votes: max_votes})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
WITH max(m.votes) AS max_votes
MATCH (m:Movie {votes: max_votes})<-[:DIRECTED]-(p:Person)
RETURN p.name","1. **Find the movie with the highest number of votes**: We need to find the Movie node with the maximum value for the `votes` property.
2. **Identify the director**: From the Movie node with the highest votes, we need to traverse the `DIRECTED` relationship in the incoming direction to find the Person node who directed that movie.
3. **Return the person's name**: Finally, we'll return the `name` property of the director.

We can accomplish this using the `max()` function to find the maximum votes, and `WITH` to pass the result to the subsequent `MATCH` clause."
Who are the first 3 people who acted in movies with a rating above 85?,movies,"<explanation>
This query finds all people who acted in a movie that has a rating above 85 and returns the first 3.
1. **MATCH**: We start by matching all persons who acted in movies and the movie was reviewed by someone. 
2. **WHERE**: We filter to only include movies with a rating above 85.
3. **WITH**: Return the person and order them by their name.
4. **RETURN**: Return the person's name and use the LIMIT clause to only return the first 3.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 85
WITH p ORDER BY p.name
RETURN p.name LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 85
WITH p ORDER BY p.name
RETURN p.name LIMIT 3","This query finds all people who acted in a movie that has a rating above 85 and returns the first 3.
1. **MATCH**: We start by matching all persons who acted in movies and the movie was reviewed by someone. 
2. **WHERE**: We filter to only include movies with a rating above 85.
3. **WITH**: Return the person and order them by their name.
4. **RETURN**: Return the person's name and use the LIMIT clause to only return the first 3.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 85
WITH p ORDER BY p.name
RETURN p.name LIMIT 3
```"
"List the first 3 movies with taglines containing the word ""Forever"".",movies,"<explanation>
1. **Find movies with ""Forever"" in the tagline:** We'll start by searching for `Movie` nodes where the `tagline` property contains the word ""Forever"".
2. **Limit to the first 3:** We'll use `LIMIT` to restrict the results to the first 3 movies found.
3. **Return the movie titles:**  We'll return the `title` property of the matching movies. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Forever'
RETURN m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Forever'
RETURN m.title
LIMIT 3","1. **Find movies with ""Forever"" in the tagline:** We'll start by searching for `Movie` nodes where the `tagline` property contains the word ""Forever"".
2. **Limit to the first 3:** We'll use `LIMIT` to restrict the results to the first 3 movies found.
3. **Return the movie titles:**  We'll return the `title` property of the matching movies."
Find the first 3 people who produced movies released before 1990.,movies,"<explanation>
This query first matches all people who have a PRODUCED relationship with a movie. Then it filters these people based on the movie's released property, only keeping those who produced movies released before 1990. Finally, it returns the first 3 names of these people. 

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name
LIMIT 3","This query first matches all people who have a PRODUCED relationship with a movie. Then it filters these people based on the movie's released property, only keeping those who produced movies released before 1990. Finally, it returns the first 3 names of these people. 

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name
LIMIT 3
```"
"What are the roles played by the first 3 actors in ""Speed Racer""?",movies,"<explanation>
1. **Match the movie:** We start by finding the movie with the title ""Speed Racer"".
2. **Find actors:** Traverse the ACTED_IN relationships from the movie to the actors.
3. **Limit to the first 3:** Use `LIMIT` to only consider the first 3 actors.
4. **Return the roles:**  For each actor, return their `roles` property from the `ACTED_IN` relationship.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
MATCH (m)<-[ai:ACTED_IN]-(a:Person)
WITH a, ai
LIMIT 3
RETURN ai.roles
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})
MATCH (m)<-[ai:ACTED_IN]-(a:Person)
WITH a, ai
LIMIT 3
RETURN ai.roles
```",Pathfinding Queries,"MATCH (m:Movie {title: ""Speed Racer""})
MATCH (m)<-[ai:ACTED_IN]-(a:Person)
WITH a, ai
LIMIT 3
RETURN ai.roles","1. **Match the movie:** We start by finding the movie with the title ""Speed Racer"".
2. **Find actors:** Traverse the ACTED_IN relationships from the movie to the actors.
3. **Limit to the first 3:** Use `LIMIT` to only consider the first 3 actors.
4. **Return the roles:**  For each actor, return their `roles` property from the `ACTED_IN` relationship.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})
MATCH (m)<-[ai:ACTED_IN]-(a:Person)
WITH a, ai
LIMIT 3
RETURN ai.roles
```"
"Who directed the movie with the summary ""A solid romp""?",movies,"<explanation>
1. **Find the movie with the specific review summary**: We start by finding the (:Movie) node that has a (:REVIEWED) relationship with a `summary` property equal to ""A solid romp"". 
2. **Traverse to the director**:  We then traverse backwards on the (:DIRECTED) relationship from that movie to find the (:Person) who directed it.
3. **Return the director's name**:  Finally, we return the `name` property of the director.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Pathfinding Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","1. **Find the movie with the specific review summary**: We start by finding the (:Movie) node that has a (:REVIEWED) relationship with a `summary` property equal to ""A solid romp"". 
2. **Traverse to the director**:  We then traverse backwards on the (:DIRECTED) relationship from that movie to find the (:Person) who directed it.
3. **Return the director's name**:  Finally, we return the `name` property of the director.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
What is the average rating of movies released after 2005?,movies,"<explanation>
1. We start by matching all movies released after 2005: `MATCH (m:Movie) WHERE m.released > 2005`.
2. Then, we find all the reviews for those movies: `WITH m MATCH (p:Person)-[r:REVIEWED]->(m)`.
3. We aggregate the ratings of those reviews using `avg(r.rating)`.
4. Finally, we return the average rating.

```cypher
MATCH (m:Movie) WHERE m.released > 2005
WITH m
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating)
```
</explanation>
```cypher
MATCH (m:Movie) WHERE m.released > 2005
WITH m
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating)
```",Pathfinding Queries,"MATCH (m:Movie) WHERE m.released > 2005
WITH m
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating)","1. We start by matching all movies released after 2005: `MATCH (m:Movie) WHERE m.released > 2005`.
2. Then, we find all the reviews for those movies: `WITH m MATCH (p:Person)-[r:REVIEWED]->(m)`.
3. We aggregate the ratings of those reviews using `avg(r.rating)`.
4. Finally, we return the average rating.

```cypher
MATCH (m:Movie) WHERE m.released > 2005
WITH m
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN avg(r.rating)
```"
Which person wrote and directed the same movie?,movies,"<explanation>
This query looks for a single `Person` node that has both a `WROTE` and `DIRECTED` relationship to the same `Movie` node. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)**: We start by matching a pattern where a `Person` node `(p)` has both a `WROTE` relationship and a `DIRECTED` relationship to the same `Movie` node `(m)`.
2. **RETURN p.name**: We then return the `name` property of the `Person` node `(p)` that satisfies this pattern.

This ensures that we only return the names of individuals who have both written and directed the same movie.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name
```",Pathfinding Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name","This query looks for a single `Person` node that has both a `WROTE` and `DIRECTED` relationship to the same `Movie` node. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)**: We start by matching a pattern where a `Person` node `(p)` has both a `WROTE` relationship and a `DIRECTED` relationship to the same `Movie` node `(m)`.
2. **RETURN p.name**: We then return the `name` property of the `Person` node `(p)` that satisfies this pattern.

This ensures that we only return the names of individuals who have both written and directed the same movie."
"List the first 3 movies with titles containing the word ""The"".",movies,"<explanation>
1. We search for `Movie` nodes that contain the word ""The"" in their title using `CONTAINS`.
2. We return the `title` of the first 3 movies found.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
RETURN m.title
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
RETURN m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
RETURN m.title
LIMIT 3","1. We search for `Movie` nodes that contain the word ""The"" in their title using `CONTAINS`.
2. We return the `title` of the first 3 movies found.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
RETURN m.title
LIMIT 3
```"
"Find the first 3 people who reviewed movies with the summary ""Pretty funny at times"".",movies,"<explanation>
1. **Find reviewers**: Start by identifying all `Person` nodes connected to `Movie` nodes with a `REVIEWED` relationship.
2. **Filter by summary**: Filter these relationships based on the `summary` property being ""Pretty funny at times"".
3. **Return names**: Return the `name` property of the first 3 `Person` nodes found.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN p.name
LIMIT 3","1. **Find reviewers**: Start by identifying all `Person` nodes connected to `Movie` nodes with a `REVIEWED` relationship.
2. **Filter by summary**: Filter these relationships based on the `summary` property being ""Pretty funny at times"".
3. **Return names**: Return the `name` property of the first 3 `Person` nodes found.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN p.name
LIMIT 3
```"
What are the release years of the first 3 movies directed by Lilly Wachowski?,movies,"<explanation>
1. **Find the person named ""Lilly Wachowski""**: We start by looking for the ""Person"" node with the name ""Lilly Wachowski.""
2. **Traverse the DIRECTED relationships**: From the ""Lilly Wachowski"" node, we traverse the ""DIRECTED"" relationships to find the movies she directed.
3. **Order the movies by release year**: We order the found movies by their ""released"" property in ascending order to get the first 3.
4. **Limit to the first 3 movies**: We use ""LIMIT"" to keep only the first 3 movies in the result.
5. **Return the release years**: Finally, we return the ""released"" property (release years) of these 3 movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Lilly Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person {name: ""Lilly Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3","1. **Find the person named ""Lilly Wachowski""**: We start by looking for the ""Person"" node with the name ""Lilly Wachowski.""
2. **Traverse the DIRECTED relationships**: From the ""Lilly Wachowski"" node, we traverse the ""DIRECTED"" relationships to find the movies she directed.
3. **Order the movies by release year**: We order the found movies by their ""released"" property in ascending order to get the first 3.
4. **Limit to the first 3 movies**: We use ""LIMIT"" to keep only the first 3 movies in the result.
5. **Return the release years**: Finally, we return the ""released"" property (release years) of these 3 movies."
Who produced the movie with the lowest number of votes?,movies,"<explanation>
1. **Find the movie with the lowest number of votes:** 
   - Start with a `MATCH` clause to find all `Movie` nodes.
   - Use `ORDER BY` to sort the movies by the `votes` property in ascending order.
   - Use `LIMIT 1` to select only the movie with the lowest number of votes.
2. **Find the producer of that movie:**
   - Use another `MATCH` clause to traverse the `PRODUCED` relationship from the movie to the `Person` node who produced it.
3. **Return the name of the producer:**
   - Use a `RETURN` clause to return the `name` property of the `Person` node.

```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name","1. **Find the movie with the lowest number of votes:** 
   - Start with a `MATCH` clause to find all `Movie` nodes.
   - Use `ORDER BY` to sort the movies by the `votes` property in ascending order.
   - Use `LIMIT 1` to select only the movie with the lowest number of votes.
2. **Find the producer of that movie:**
   - Use another `MATCH` clause to traverse the `PRODUCED` relationship from the movie to the `Person` node who produced it.
3. **Return the name of the producer:**
   - Use a `RETURN` clause to return the `name` property of the `Person` node.

```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```"
What is the highest rating given to a movie produced by Joel Silver?,movies,"<explanation>
1. We start by finding the person named ""Joel Silver.""
2. Then, we traverse the PRODUCED relationships to find all the movies produced by him.
3. For each movie, we find all the REVIEWED relationships.
4. Finally, we identify the highest rating among all the reviews.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
RETURN max_rating
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
RETURN max_rating
```",Pathfinding Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
RETURN max_rating","1. We start by finding the person named ""Joel Silver.""
2. Then, we traverse the PRODUCED relationships to find all the movies produced by him.
3. For each movie, we find all the REVIEWED relationships.
4. Finally, we identify the highest rating among all the reviews.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WITH max(r.rating) AS max_rating
RETURN max_rating
```"
Which person acted in and directed the same movie?,movies,"<explanation>
This query starts with finding all people who acted in a movie. Then it expands on those people to find if they also directed the same movie. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
RETURN DISTINCT p.name
```",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
RETURN DISTINCT p.name",This query starts with finding all people who acted in a movie. Then it expands on those people to find if they also directed the same movie.
List the first 3 movies released in the year 2008.,movies,"<explanation>This query first finds all movies released in 2008, orders them by title, and then uses `LIMIT` to return only the top 3 results.</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2008
RETURN m.title
ORDER BY m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released = 2008
RETURN m.title
ORDER BY m.title
LIMIT 3","This query first finds all movies released in 2008, orders them by title, and then uses `LIMIT` to return only the top 3 results."
Find the first 3 people who reviewed movies released before 1995.,movies,"<explanation>
This query looks for `Person` nodes that have a `REVIEWED` relationship with `Movie` nodes. It filters the `Movie` nodes to only include those released before 1995. Then it returns the first 3 `Person` nodes that match these criteria, along with their names.
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released < 1995
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released < 1995
RETURN p.name
LIMIT 3","This query looks for `Person` nodes that have a `REVIEWED` relationship with `Movie` nodes. It filters the `Movie` nodes to only include those released before 1995. Then it returns the first 3 `Person` nodes that match these criteria, along with their names."
What are the taglines of the first 3 movies directed by Lana Wachowski?,movies,"<explanation>
This query first finds the person named ""Lana Wachowski"" and then traverses the ""DIRECTED"" relationship to find movies directed by her. The query then orders the movies by their title and uses ""LIMIT"" to return only the first 3 movies. Finally, it returns the titles of those movies. 
</explanation>
```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
ORDER BY m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
ORDER BY m.title
LIMIT 3","This query first finds the person named ""Lana Wachowski"" and then traverses the ""DIRECTED"" relationship to find movies directed by her. The query then orders the movies by their title and uses ""LIMIT"" to return only the first 3 movies. Finally, it returns the titles of those movies."
Who produced the movie with the highest rating?,movies,"<explanation>
This query first matches the `REVIEWED` relationship to find the highest `rating`. It then traverses to the `Movie` node connected to that review and then to the `Person` who `PRODUCED` the movie. Finally, it returns the `name` of the person.
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH max(r.rating) AS max_rating
MATCH (:Person)-[r:REVIEWED {rating: max_rating}]->(m:Movie)<-[:PRODUCED]-(p:Person)
RETURN p.name
```",Pathfinding Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH max(r.rating) AS max_rating
MATCH (:Person)-[r:REVIEWED {rating: max_rating}]->(m:Movie)<-[:PRODUCED]-(p:Person)
RETURN p.name","This query first matches the `REVIEWED` relationship to find the highest `rating`. It then traverses to the `Movie` node connected to that review and then to the `Person` who `PRODUCED` the movie. Finally, it returns the `name` of the person."
What is the average number of votes for movies released in the year 2006?,movies,"<explanation>
1. **Find movies released in 2006**: We need to locate all `Movie` nodes with the `released` property set to 2006.
2. **Calculate the average vote count**: We will use the `avg()` aggregation function to determine the average of the `votes` property among the selected movies.

This approach efficiently pinpoints the movies released in 2006 and computes the average vote count for those movies.
</explanation>
```cypher
MATCH (m:Movie {released: 2006})
RETURN avg(m.votes) AS average_votes
```",Pathfinding Queries,"MATCH (m:Movie {released: 2006})
RETURN avg(m.votes) AS average_votes","1. **Find movies released in 2006**: We need to locate all `Movie` nodes with the `released` property set to 2006.
2. **Calculate the average vote count**: We will use the `avg()` aggregation function to determine the average of the `votes` property among the selected movies.

This approach efficiently pinpoints the movies released in 2006 and computes the average vote count for those movies."
Which person acted in the movie with the lowest rating?,movies,"<explanation>
This query identifies the Person who acted in the movie with the lowest rating.
1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:REVIEWED]-(reviewer:Person)**: This part matches the pattern where a person acted in a movie, and that movie has been reviewed by someone.
2. **WITH movie, reviewer, person, min(reviewer.rating) AS min_rating**: This uses the `WITH` clause to carry forward the `movie`, `reviewer`, and `person` variables, and calculates the minimum rating (`min_rating`) among all the reviewers of each movie.
3. **WHERE reviewer.rating = min_rating**: This filters for the reviewer whose rating matches the minimum rating for that movie.
4. **RETURN person.name, movie.title, min_rating**: Finally, it returns the name of the person who acted in the movie, the title of the movie, and the minimum rating. 

</explanation>
```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:REVIEWED]-(reviewer:Person)
WITH movie, reviewer, person, min(reviewer.rating) AS min_rating
WHERE reviewer.rating = min_rating
RETURN person.name, movie.title, min_rating
```",Pathfinding Queries,"MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:REVIEWED]-(reviewer:Person)
WITH movie, reviewer, person, min(reviewer.rating) AS min_rating
WHERE reviewer.rating = min_rating
RETURN person.name, movie.title, min_rating","This query identifies the Person who acted in the movie with the lowest rating.
1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)<-[:REVIEWED]-(reviewer:Person)**: This part matches the pattern where a person acted in a movie, and that movie has been reviewed by someone.
2. **WITH movie, reviewer, person, min(reviewer.rating) AS min_rating**: This uses the `WITH` clause to carry forward the `movie`, `reviewer`, and `person` variables, and calculates the minimum rating (`min_rating`) among all the reviewers of each movie.
3. **WHERE reviewer.rating = min_rating**: This filters for the reviewer whose rating matches the minimum rating for that movie.
4. **RETURN person.name, movie.title, min_rating**: Finally, it returns the name of the person who acted in the movie, the title of the movie, and the minimum rating."
"List the first 3 movies with summaries containing the word ""amazing"".",movies,"<explanation>
This Cypher query identifies movies with reviews containing the word ""amazing"" and returns the first three titles.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed, connecting the Movie nodes (m) and Person nodes (p) through the REVIEWED relationship (r). 

2. **WHERE r.summary CONTAINS 'amazing'**:  This filters for reviews where the summary property contains the word ""amazing"".

3. **WITH m LIMIT 3**: This limits the result set to the first 3 movies.

4. **RETURN m.title**: This returns the titles of the selected movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
WITH m LIMIT 3
RETURN m.title
```",Pathfinding Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'amazing'
WITH m LIMIT 3
RETURN m.title","This Cypher query identifies movies with reviews containing the word ""amazing"" and returns the first three titles.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies that have been reviewed, connecting the Movie nodes (m) and Person nodes (p) through the REVIEWED relationship (r). 

2. **WHERE r.summary CONTAINS 'amazing'**:  This filters for reviews where the summary property contains the word ""amazing"".

3. **WITH m LIMIT 3**: This limits the result set to the first 3 movies.

4. **RETURN m.title**: This returns the titles of the selected movies."
Find the first 3 people who directed movies with more than 5000 votes.,movies,"<explanation>
1. We start by matching all `Person` nodes that have a `DIRECTED` relationship with a `Movie` node: `(p:Person)-[:DIRECTED]->(m:Movie)`.
2. We filter these pairs based on the `Movie` node's `votes` property being greater than 5000: `WHERE m.votes > 5000`.
3. We return the `name` property of the first 3 `Person` nodes that satisfy these conditions: `RETURN p.name LIMIT 3`.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 5000
RETURN p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 5000
RETURN p.name
LIMIT 3","1. We start by matching all `Person` nodes that have a `DIRECTED` relationship with a `Movie` node: `(p:Person)-[:DIRECTED]->(m:Movie)`.
2. We filter these pairs based on the `Movie` node's `votes` property being greater than 5000: `WHERE m.votes > 5000`.
3. We return the `name` property of the first 3 `Person` nodes that satisfy these conditions: `RETURN p.name LIMIT 3`."
"What are the roles played by Keanu Reeves in the movie ""The Matrix""?",movies,"<explanation>
1. We need to find the movie with the title ""The Matrix"".
2. We need to find the person named ""Keanu Reeves"".
3. We need to traverse the `ACTED_IN` relationship between the person and the movie.
4. We need to return the `roles` property of the `ACTED_IN` relationship.

```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles","1. We need to find the movie with the title ""The Matrix"".
2. We need to find the person named ""Keanu Reeves"".
3. We need to traverse the `ACTED_IN` relationship between the person and the movie.
4. We need to return the `roles` property of the `ACTED_IN` relationship.

```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```"
Who directed the movie released in the year 1999 with the highest number of votes?,movies,"<explanation>
1. **Find the movie:** Start by finding the movie released in 1999 with the highest number of votes. We will use `WITH` and `ORDER BY ... DESC` and `LIMIT 1` to get the movie with the maximum votes.
2. **Find the director:** Traverse the `DIRECTED` relationship from the movie node to the person node representing the director.
3. **Return the director's name:** Return the `name` property of the director.

```cypher
MATCH (m:Movie)
WHERE m.released = 1999
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 1999
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released = 1999
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","1. **Find the movie:** Start by finding the movie released in 1999 with the highest number of votes. We will use `WITH` and `ORDER BY ... DESC` and `LIMIT 1` to get the movie with the maximum votes.
2. **Find the director:** Traverse the `DIRECTED` relationship from the movie node to the person node representing the director.
3. **Return the director's name:** Return the `name` property of the director.

```cypher
MATCH (m:Movie)
WHERE m.released = 1999
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```"
What is the tagline of the movie with the lowest rating?,movies,"<explanation>
1. **Find the movie with the lowest rating:** Match all REVIEWED relationships and order them by rating in ascending order. Then, get the first movie from the ordered list.
2. **Return the movie's tagline:** Return the `tagline` property of the movie.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating ASC LIMIT 1
RETURN m.tagline
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating ASC LIMIT 1
RETURN m.tagline
```",Pathfinding Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating ASC LIMIT 1
RETURN m.tagline","1. **Find the movie with the lowest rating:** Match all REVIEWED relationships and order them by rating in ascending order. Then, get the first movie from the ordered list.
2. **Return the movie's tagline:** Return the `tagline` property of the movie.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WITH m, r ORDER BY r.rating ASC LIMIT 1
RETURN m.tagline
```"
Which person produced and wrote the same movie?,movies,"<explanation>
This query starts by finding all people who have both PRODUCED and WROTE relationships with a movie. Then, it returns the names of those people.
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:WROTE]-(person)
RETURN DISTINCT person.name
```",Pathfinding Queries,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:WROTE]-(person)
RETURN DISTINCT person.name","This query starts by finding all people who have both PRODUCED and WROTE relationships with a movie. Then, it returns the names of those people."
"List the first 3 movies reviewed with the summary ""Dark, but compelling"".",movies,"<explanation>
This query starts with a node label scan on ""Movie"". It then looks for all the ""REVIEWED"" relationships connected to movies where the summary property is ""Dark, but compelling"". Lastly, it returns the title of the first three movies found and orders them alphabetically to have a deterministic result.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
ORDER BY m.title
LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
ORDER BY m.title
LIMIT 3","This query starts with a node label scan on ""Movie"". It then looks for all the ""REVIEWED"" relationships connected to movies where the summary property is ""Dark, but compelling"". Lastly, it returns the title of the first three movies found and orders them alphabetically to have a deterministic result.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
ORDER BY m.title
LIMIT 3
```"
Find the first 3 people born after 1970 who acted in a movie.,movies,"<explanation>
This query first matches all people born after 1970 who have acted in a movie.  
We then order this subset by their birth year in ascending order, limit the result to the first 3 and return their names
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970
RETURN p.name
ORDER BY p.born
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970
RETURN p.name
ORDER BY p.born
LIMIT 3","This query first matches all people born after 1970 who have acted in a movie.  
We then order this subset by their birth year in ascending order, limit the result to the first 3 and return their names"
What are the release years of the first 3 movies with more than 3000 votes?,movies,"<explanation>
This query finds the release years of the first 3 movies with more than 3000 votes.

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WHERE**: We filter these movies to only include those with more than 3000 votes.
3. **WITH**: We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN**: We return the `released` property (release year) of the movies. 
5. **ORDER BY**: We order the results by the release year in ascending order to get the first 3.
6. **LIMIT**: Finally, we limit the result to the first 3 movies. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 3000
WITH m
RETURN m.released
ORDER BY m.released ASC
LIMIT 3
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.votes > 3000
WITH m
RETURN m.released
ORDER BY m.released ASC
LIMIT 3","This query finds the release years of the first 3 movies with more than 3000 votes.

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WHERE**: We filter these movies to only include those with more than 3000 votes.
3. **WITH**: We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN**: We return the `released` property (release year) of the movies. 
5. **ORDER BY**: We order the results by the release year in ascending order to get the first 3.
6. **LIMIT**: Finally, we limit the result to the first 3 movies."
"Who directed the movie with the summary ""Silly, but fun""?",movies,"<explanation>
1. **Match the movie:** Start by finding the movie with the review summary ""Silly, but fun"".
2. **Find the director:**  Traverse the `DIRECTED` relationship from the movie to the director (a `Person` node).
3. **Return the director's name:**  Get the `name` property of the director node.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.summary = 'Silly, but fun'
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.summary = 'Silly, but fun'
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Pathfinding Queries,"MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.summary = 'Silly, but fun'
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","1. **Match the movie:** Start by finding the movie with the review summary ""Silly, but fun"".
2. **Find the director:**  Traverse the `DIRECTED` relationship from the movie to the director (a `Person` node).
3. **Return the director's name:**  Get the `name` property of the director node.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.summary = 'Silly, but fun'
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
What is the average rating of movies produced by Joel Silver?,movies,"<explanation>
1. **Identify the starting node:** We need to find movies produced by 'Joel Silver', so we start with a Person node with `name` = 'Joel Silver'.
2. **Traverse relationships:** We traverse the `PRODUCED` relationship from the 'Joel Silver' Person node to the Movie nodes he produced.
3. **Calculate the average rating:** We use the `avg()` function to calculate the average rating of the movies found in the previous step.

```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.rating) AS average_rating
RETURN average_rating
```",Pathfinding Queries,"MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.rating) AS average_rating
RETURN average_rating","1. **Identify the starting node:** We need to find movies produced by 'Joel Silver', so we start with a Person node with `name` = 'Joel Silver'.
2. **Traverse relationships:** We traverse the `PRODUCED` relationship from the 'Joel Silver' Person node to the Movie nodes he produced.
3. **Calculate the average rating:** We use the `avg()` function to calculate the average rating of the movies found in the previous step.

```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:PRODUCED]->(m:Movie)
WITH avg(m.rating) AS average_rating
RETURN average_rating
```"
Which person acted in and produced the same movie?,movies,"<explanation>
This query looks for instances where a single person has both ACTED_IN and PRODUCED relationships with the same movie. 

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)**: This part of the query searches for patterns where a node with the label ""Person"" is connected to a node with the label ""Movie"" with both ""ACTED_IN"" and ""PRODUCED"" relationships.  The same ""p"" variable ensures it's the same person involved in both relationships.
2. **RETURN DISTINCT p.name**: This returns the names of the people found. The DISTINCT keyword ensures that each person's name is returned only once, even if they acted in and produced multiple movies.

</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name
```",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name","This query looks for instances where a single person has both ACTED_IN and PRODUCED relationships with the same movie. 

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)**: This part of the query searches for patterns where a node with the label ""Person"" is connected to a node with the label ""Movie"" with both ""ACTED_IN"" and ""PRODUCED"" relationships.  The same ""p"" variable ensures it's the same person involved in both relationships.
2. **RETURN DISTINCT p.name**: This returns the names of the people found. The DISTINCT keyword ensures that each person's name is returned only once, even if they acted in and produced multiple movies."
"List the first 3 movies with titles containing the word ""Racer"".",movies,"<explanation>
This Cypher query first finds all movies with ""Racer"" in the title and then uses `LIMIT` to select only the first three. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.title CONTAINS 'Racer'**: This line filters the matched movies to only include those where the title property contains the string ""Racer"".
3. **WITH m LIMIT 3**: This line limits the number of results to 3.
4. **RETURN m**:  Finally, the query returns the movie nodes ""m"".
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Racer'
WITH m LIMIT 3
RETURN m
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Racer'
WITH m LIMIT 3
RETURN m","This Cypher query first finds all movies with ""Racer"" in the title and then uses `LIMIT` to select only the first three. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.title CONTAINS 'Racer'**: This line filters the matched movies to only include those where the title property contains the string ""Racer"".
3. **WITH m LIMIT 3**: This line limits the number of results to 3.
4. **RETURN m**:  Finally, the query returns the movie nodes ""m""."
Find the first 3 people who reviewed movies directed by Lana Wachowski.,movies,"<explanation>
1. We need to find people who have a `REVIEWED` relationship with a `Movie` node.
2. We also need to ensure that the `Movie` node is connected to a `Person` node (Lana Wachowski) with a `DIRECTED` relationship.
3.  Finally, we'll return the first 3 `Person` nodes that satisfy these conditions. 

</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
RETURN p
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
RETURN p
LIMIT 3","1. We need to find people who have a `REVIEWED` relationship with a `Movie` node.
2. We also need to ensure that the `Movie` node is connected to a `Person` node (Lana Wachowski) with a `DIRECTED` relationship.
3.  Finally, we'll return the first 3 `Person` nodes that satisfy these conditions."
What are the taglines of the first 3 movies released after 2005?,movies,"<explanation>
This query first finds all movies released after 2005, orders them by release year in ascending order, limits the results to the first 3, and then returns the title and tagline of each movie. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2005
WITH m ORDER BY m.released ASC
LIMIT 3
RETURN m.title, m.tagline
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released > 2005
WITH m ORDER BY m.released ASC
LIMIT 3
RETURN m.title, m.tagline","This query first finds all movies released after 2005, orders them by release year in ascending order, limits the results to the first 3, and then returns the title and tagline of each movie."
Who wrote the movie with the highest number of votes?,movies,"<explanation>
1. **Find the movie with the most votes**: We need to find the movie with the highest value in the `votes` property. We can achieve this by ordering all movies in descending order based on their `votes` property and taking only the top record using `LIMIT 1`.
2. **Find the person who wrote that movie**: Once we have the movie with the most votes, we can traverse the `WROTE` relationship backwards to the `Person` node that wrote it.
3. **Return the person's name**: Finally, we will return the `name` property of the person who wrote the movie.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name","1. **Find the movie with the most votes**: We need to find the movie with the highest value in the `votes` property. We can achieve this by ordering all movies in descending order based on their `votes` property and taking only the top record using `LIMIT 1`.
2. **Find the person who wrote that movie**: Once we have the movie with the most votes, we can traverse the `WROTE` relationship backwards to the `Person` node that wrote it.
3. **Return the person's name**: Finally, we will return the `name` property of the person who wrote the movie.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:WROTE]->(m)
RETURN p.name
```"
"What is the release year of the movie with the summary ""An amazing journey""?",movies,"<explanation>
1. **Find the movie with the specific review summary:** Look for a `REVIEWED` relationship where the `summary` property is ""An amazing journey"".
2. **Get the movie's release year:** Retrieve the `released` property of the movie node connected to the `REVIEWED` relationship.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
RETURN m.released
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
RETURN m.released
```",Pathfinding Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
RETURN m.released","1. **Find the movie with the specific review summary:** Look for a `REVIEWED` relationship where the `summary` property is ""An amazing journey"".
2. **Get the movie's release year:** Retrieve the `released` property of the movie node connected to the `REVIEWED` relationship.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
RETURN m.released
```"
Which person directed and wrote the same movie?,movies,"<explanation>
This query looks for a single `Person` node that has both a `DIRECTED` and `WROTE` relationship with the same `Movie` node.
1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:WROTE]-(p)** This part of the query finds all `Person` nodes that have both `DIRECTED` and `WROTE` relationships with the same `Movie` node.
2. **RETURN DISTINCT p.name AS PersonName, m.title AS MovieTitle** - This returns the name of the person and the title of the movie. The `DISTINCT` keyword is used to make sure each `Person`-`Movie` pair is only returned once even if a person directed and wrote multiple movies.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name AS PersonName, m.title AS MovieTitle
```",Pathfinding Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name AS PersonName, m.title AS MovieTitle","This query looks for a single `Person` node that has both a `DIRECTED` and `WROTE` relationship with the same `Movie` node.
1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:WROTE]-(p)** This part of the query finds all `Person` nodes that have both `DIRECTED` and `WROTE` relationships with the same `Movie` node.
2. **RETURN DISTINCT p.name AS PersonName, m.title AS MovieTitle** - This returns the name of the person and the title of the movie. The `DISTINCT` keyword is used to make sure each `Person`-`Movie` pair is only returned once even if a person directed and wrote multiple movies."
List the first 3 movies reviewed by the person born in 1965.,movies,"<explanation>
1. **Find the person born in 1965**: `MATCH (p:Person {born: 1965})`
2. **Match the movies reviewed by this person**: `MATCH (p)-[:REVIEWED]->(m:Movie)`
3. **Return the movie titles**: `RETURN m.title`
4. **Limit the result to the first 3 movies**: `LIMIT 3` 

</explanation>
```cypher
MATCH (p:Person {born: 1965})
MATCH (p)-[:REVIEWED]->(m:Movie)
RETURN m.title
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person {born: 1965})
MATCH (p)-[:REVIEWED]->(m:Movie)
RETURN m.title
LIMIT 3","1. **Find the person born in 1965**: `MATCH (p:Person {born: 1965})`
2. **Match the movies reviewed by this person**: `MATCH (p)-[:REVIEWED]->(m:Movie)`
3. **Return the movie titles**: `RETURN m.title`
4. **Limit the result to the first 3 movies**: `LIMIT 3`"
Find the first 3 people who produced movies with a rating above 90.,movies,"<explanation>
This query first matches all people who have a PRODUCED relationship with a movie. Then it filters these people based on whether the movies they produced have a rating greater than 90.  Finally, it returns the first 3 people who satisfy this condition.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 90
RETURN DISTINCT p.name
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 90
RETURN DISTINCT p.name
LIMIT 3","This query first matches all people who have a PRODUCED relationship with a movie. Then it filters these people based on whether the movies they produced have a rating greater than 90.  Finally, it returns the first 3 people who satisfy this condition."
What are the roles played by the first 3 actors in the movie with the highest number of votes?,movies,"<explanation>
1. **Find the movie with the highest number of votes**: 
   - We start by finding the movie with the maximum 'votes' property using `MATCH (m:Movie)` and order the results in descending order based on votes using `ORDER BY m.votes DESC`.
   - Since we only need the movie with the highest votes, we limit the result to 1 using `LIMIT 1`.

2. **Find the first 3 actors**:
   - Then, we traverse the `ACTED_IN` relationship from the found movie to the actors who acted in it using `WITH m MATCH (m)<-[:ACTED_IN]-(p:Person)`.
   - We order the actors by their index in the movie cast using `ORDER BY p.born`.
   - We limit the result to the first 3 actors using `LIMIT 3`.

3. **Return the actors' names and their roles**:
   - Finally, we return the name of each actor and their roles in the movie using `RETURN p.name,  r.roles`.

This query effectively combines these steps to find the roles played by the first 3 actors in the movie with the highest number of votes. 
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.votes DESC
LIMIT 1
WITH m
MATCH (m)<-[r:ACTED_IN]-(p:Person)
ORDER BY p.born
WITH p, r
LIMIT 3
RETURN p.name,  r.roles
```",Pathfinding Queries,"MATCH (m:Movie)
ORDER BY m.votes DESC
LIMIT 1
WITH m
MATCH (m)<-[r:ACTED_IN]-(p:Person)
ORDER BY p.born
WITH p, r
LIMIT 3
RETURN p.name,  r.roles","1. **Find the movie with the highest number of votes**: 
   - We start by finding the movie with the maximum 'votes' property using `MATCH (m:Movie)` and order the results in descending order based on votes using `ORDER BY m.votes DESC`.
   - Since we only need the movie with the highest votes, we limit the result to 1 using `LIMIT 1`.

2. **Find the first 3 actors**:
   - Then, we traverse the `ACTED_IN` relationship from the found movie to the actors who acted in it using `WITH m MATCH (m)<-[:ACTED_IN]-(p:Person)`.
   - We order the actors by their index in the movie cast using `ORDER BY p.born`.
   - We limit the result to the first 3 actors using `LIMIT 3`.

3. **Return the actors' names and their roles**:
   - Finally, we return the name of each actor and their roles in the movie using `RETURN p.name,  r.roles`.

This query effectively combines these steps to find the roles played by the first 3 actors in the movie with the highest number of votes."
"Who directed the movie with the tagline ""Freedom! Forever!""?",movies,"<explanation>
This query looks for a single node of type Movie with the tagline ""Freedom! Forever!"" and then returns the name of the Person who DIRECTED that Movie. 

1. **MATCH (m:Movie)** - This line searches for all nodes of type Movie.
2. **WHERE m.tagline = ""Freedom! Forever!""** - This line filters the results from step 1 to only include Movies with the tagline ""Freedom! Forever!"".
3. **MATCH (p:Person)-[:DIRECTED]->(m)** - From the filtered results of step 2, this line searches for all Persons who DIRECTED those Movies.
4. **RETURN p.name** - This line returns the name of each Person found in step 3.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline = ""Freedom! Forever!""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.tagline = ""Freedom! Forever!""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","This query looks for a single node of type Movie with the tagline ""Freedom! Forever!"" and then returns the name of the Person who DIRECTED that Movie. 

1. **MATCH (m:Movie)** - This line searches for all nodes of type Movie.
2. **WHERE m.tagline = ""Freedom! Forever!""** - This line filters the results from step 1 to only include Movies with the tagline ""Freedom! Forever!"".
3. **MATCH (p:Person)-[:DIRECTED]->(m)** - From the filtered results of step 2, this line searches for all Persons who DIRECTED those Movies.
4. **RETURN p.name** - This line returns the name of each Person found in step 3."
What is the average rating of movies released before 1990?,movies,"<explanation>
1. **Find movies released before 1990:** We start by matching all `Movie` nodes with a `released` property less than 1990.
2. **Calculate the average rating:** We then use the `avg()` function to calculate the average rating of those movies. To ensure correct aggregation, we use the `WITH` clause.
3. **Return the average rating:** Finally, we return the average rating.

```cypher
MATCH (m:Movie)
WHERE m.released < 1990
WITH avg(m.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
WITH avg(m.rating) AS average_rating
RETURN average_rating
```",Pathfinding Queries,"MATCH (m:Movie)
WHERE m.released < 1990
WITH avg(m.rating) AS average_rating
RETURN average_rating","1. **Find movies released before 1990:** We start by matching all `Movie` nodes with a `released` property less than 1990.
2. **Calculate the average rating:** We then use the `avg()` function to calculate the average rating of those movies. To ensure correct aggregation, we use the `WITH` clause.
3. **Return the average rating:** Finally, we return the average rating.

```cypher
MATCH (m:Movie)
WHERE m.released < 1990
WITH avg(m.rating) AS average_rating
RETURN average_rating
```"
Which person acted in and wrote the same movie?,movies,"<explanation>
This query starts by finding all people who have both ACTED_IN and WROTE relationships with movies. Then it returns those people's names.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)
RETURN p.name
```
",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)
RETURN p.name",This query starts by finding all people who have both ACTED_IN and WROTE relationships with movies. Then it returns those people's names.
"What is the release year of the movie ""V for Vendetta""?",movies,"<explanation>
This query looks for a movie node with the title ""V for Vendetta"" and returns its release year.
1. **MATCH Clause:** We use `MATCH (m:Movie {title: ""V for Vendetta""})` to find the movie with the title ""V for Vendetta"". 
2. **RETURN Clause:** We use `RETURN m.released` to return the release year of the movie.
</explanation>
```cypher
MATCH (m:Movie {title: ""V for Vendetta""})
RETURN m.released
```",Pathfinding Queries,"MATCH (m:Movie {title: ""V for Vendetta""})
RETURN m.released","This query looks for a movie node with the title ""V for Vendetta"" and returns its release year.
1. **MATCH Clause:** We use `MATCH (m:Movie {title: ""V for Vendetta""})` to find the movie with the title ""V for Vendetta"". 
2. **RETURN Clause:** We use `RETURN m.released` to return the release year of the movie."
Who are the first 3 people who followed Lana Wachowski?,movies,"<explanation>
This query starts with a node matching 'Lana Wachowski' and then traverses the `FOLLOWS` relationships. It then orders the people found by their internal Neo4j ID to ensure consistent ordering and returns the first 3.

1. **MATCH (p:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(follower:Person)** - This part matches the node with the name 'Lana Wachowski' and traverses the `FOLLOWS` relationship to find all the people who follow her.
2. **RETURN follower.name** - This part returns the names of the followers.
3. **ORDER BY ID(follower) LIMIT 3** - This part ensures consistent ordering and limits the result to the first 3 followers.
</explanation>
```cypher
MATCH (p:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name
ORDER BY ID(follower)
LIMIT 3
```",Pathfinding Queries,"MATCH (p:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name
ORDER BY ID(follower)
LIMIT 3","This query starts with a node matching 'Lana Wachowski' and then traverses the `FOLLOWS` relationships. It then orders the people found by their internal Neo4j ID to ensure consistent ordering and returns the first 3.

1. **MATCH (p:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(follower:Person)** - This part matches the node with the name 'Lana Wachowski' and traverses the `FOLLOWS` relationship to find all the people who follow her.
2. **RETURN follower.name** - This part returns the names of the followers.
3. **ORDER BY ID(follower) LIMIT 3** - This part ensures consistent ordering and limits the result to the first 3 followers."
Who are the first 3 people followed by Keanu Reeves?,movies,"<explanation>
1. We need to find the `Person` node with the name 'Keanu Reeves'.
2. We then need to traverse the `FOLLOWS` relationship outgoing from that node.
3. We need to return the names of the first 3 `Person` nodes connected by the `FOLLOWS` relationship.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
LIMIT 3
```
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
LIMIT 3
```",Pathfinding Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
LIMIT 3","1. We need to find the `Person` node with the name 'Keanu Reeves'.
2. We then need to traverse the `FOLLOWS` relationship outgoing from that node.
3. We need to return the names of the first 3 `Person` nodes connected by the `FOLLOWS` relationship.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
LIMIT 3
```"
What are the first 3 movies acted in by people who follow Lilly Wachowski?,movies,"<explanation>
1. **Find Lilly Wachowski:** Start by matching the Person node with the name ""Lilly Wachowski"".
2. **Find followers:** Traverse the FOLLOWS relationships outgoing from Lilly Wachowski to find the people who follow her.
3. **Find movies acted in:**  Traverse the ACTED_IN relationships outgoing from the followers to find the movies they acted in.
4. **Return the first 3 movies:** Return the title of the movies, ordered by their title in ascending order, and limit the result to the first 3.
</explanation>
```cypher
MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:ACTED_IN]->(movie:Movie)
RETURN movie.title
ORDER BY movie.title
LIMIT 3
```",Pathfinding Queries,"MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:ACTED_IN]->(movie:Movie)
RETURN movie.title
ORDER BY movie.title
LIMIT 3","1. **Find Lilly Wachowski:** Start by matching the Person node with the name ""Lilly Wachowski"".
2. **Find followers:** Traverse the FOLLOWS relationships outgoing from Lilly Wachowski to find the people who follow her.
3. **Find movies acted in:**  Traverse the ACTED_IN relationships outgoing from the followers to find the movies they acted in.
4. **Return the first 3 movies:** Return the title of the movies, ordered by their title in ascending order, and limit the result to the first 3."
What is the average rating of movies reviewed by people who follow Joel Silver?,movies,"<explanation>
1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver"".
2. **Find followers:** Traverse the `FOLLOWS` relationship to find all the people who follow Joel Silver.
3. **Find reviewed movies:** For each follower, traverse the `REVIEWED` relationship to find all the movies they have reviewed.
4. **Calculate average rating:** Calculate the average of the `rating` property on the `REVIEWED` relationships.

```cypher
MATCH (js:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
WITH follower
MATCH (follower)-[r:REVIEWED]->(m:Movie)
RETURN avg(r.rating) AS average_rating
```
</explanation>
```cypher
MATCH (js:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
WITH follower
MATCH (follower)-[r:REVIEWED]->(m:Movie)
RETURN avg(r.rating) AS average_rating
```",Pathfinding Queries,"MATCH (js:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
WITH follower
MATCH (follower)-[r:REVIEWED]->(m:Movie)
RETURN avg(r.rating) AS average_rating","1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver"".
2. **Find followers:** Traverse the `FOLLOWS` relationship to find all the people who follow Joel Silver.
3. **Find reviewed movies:** For each follower, traverse the `REVIEWED` relationship to find all the movies they have reviewed.
4. **Calculate average rating:** Calculate the average of the `rating` property on the `REVIEWED` relationships.

```cypher
MATCH (js:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
WITH follower
MATCH (follower)-[r:REVIEWED]->(m:Movie)
RETURN avg(r.rating) AS average_rating
```"
Which movies were directed by people followed by Keanu Reeves?,movies,"<explanation>
1. **Find Keanu Reeves:** We start by finding the ""Person"" node with the name ""Keanu Reeves"".
2. **Find who he follows:** We traverse the ""FOLLOWS"" relationship outgoing from Keanu Reeves to find the ""Person"" nodes he follows.
3. **Find the movies directed by those people:** We traverse the ""DIRECTED"" relationship outgoing from the people Keanu follows to find the ""Movie"" nodes.
4. **Return the movies:** We return the `title` property of the found ""Movie"" nodes.
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(person:Person)-[:DIRECTED]->(movie:Movie)
RETURN movie.title
```",Pathfinding Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(person:Person)-[:DIRECTED]->(movie:Movie)
RETURN movie.title","1. **Find Keanu Reeves:** We start by finding the ""Person"" node with the name ""Keanu Reeves"".
2. **Find who he follows:** We traverse the ""FOLLOWS"" relationship outgoing from Keanu Reeves to find the ""Person"" nodes he follows.
3. **Find the movies directed by those people:** We traverse the ""DIRECTED"" relationship outgoing from the people Keanu follows to find the ""Movie"" nodes.
4. **Return the movies:** We return the `title` property of the found ""Movie"" nodes."
What is the earliest release year of a movie acted in by someone who follows Lana Wachowski?,movies,"<explanation>
1. **Find Lana Wachowski:** Start by finding the person named ""Lana Wachowski"".
2. **Find followers:** Traverse the `FOLLOWS` relationship from Lana Wachowski to find all the people who follow her.
3. **Find movies acted in:**  Traverse the `ACTED_IN` relationship from each follower to find all the movies they acted in.
4. **Get release years:** Extract the `released` property from each of those movies.
5. **Find the earliest release year:**  Use the `min()` aggregation function to find the earliest release year among all the movies.

```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH DISTINCT movie.released AS releaseYear
RETURN min(releaseYear) AS earliestReleaseYear
```
</explanation>
```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH DISTINCT movie.released AS releaseYear
RETURN min(releaseYear) AS earliestReleaseYear
```",Pathfinding Queries,"MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH DISTINCT movie.released AS releaseYear
RETURN min(releaseYear) AS earliestReleaseYear","1. **Find Lana Wachowski:** Start by finding the person named ""Lana Wachowski"".
2. **Find followers:** Traverse the `FOLLOWS` relationship from Lana Wachowski to find all the people who follow her.
3. **Find movies acted in:**  Traverse the `ACTED_IN` relationship from each follower to find all the movies they acted in.
4. **Get release years:** Extract the `released` property from each of those movies.
5. **Find the earliest release year:**  Use the `min()` aggregation function to find the earliest release year among all the movies.

```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH DISTINCT movie.released AS releaseYear
RETURN min(releaseYear) AS earliestReleaseYear
```"
Who directed the top 3 highest rated movies reviewed by followers of Joel Silver?,movies,"<explanation>
1. **Find Joel Silver:** Start by finding the `Person` node with `name: 'Joel Silver'`.
2. **Get Followers:** Traverse the `FOLLOWS` relationship from Joel Silver to his followers.
3. **Get Reviewed Movies:** Traverse the `REVIEWED` relationship from followers to the movies they have reviewed.
4. **Filter Top 3 Movies:** Order the movies by their average rating in descending order and limit the result to the top 3 movies.
5. **Find Directors:**  For those top-rated movies, traverse the `DIRECTED` relationship to find the directors.
6. **Return Directors:** Return the distinct names of the directors.

```cypher
MATCH (js:Person {name: 'Joel Silver'})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH m, avg(m.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN DISTINCT d.name
```
</explanation>
```cypher
MATCH (js:Person {name: 'Joel Silver'})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH m, avg(m.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN DISTINCT d.name
```",Pathfinding Queries,"MATCH (js:Person {name: 'Joel Silver'})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH m, avg(m.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN DISTINCT d.name","1. **Find Joel Silver:** Start by finding the `Person` node with `name: 'Joel Silver'`.
2. **Get Followers:** Traverse the `FOLLOWS` relationship from Joel Silver to his followers.
3. **Get Reviewed Movies:** Traverse the `REVIEWED` relationship from followers to the movies they have reviewed.
4. **Filter Top 3 Movies:** Order the movies by their average rating in descending order and limit the result to the top 3 movies.
5. **Find Directors:**  For those top-rated movies, traverse the `DIRECTED` relationship to find the directors.
6. **Return Directors:** Return the distinct names of the directors.

```cypher
MATCH (js:Person {name: 'Joel Silver'})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH m, avg(m.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN DISTINCT d.name
```"
What are the taglines of the movies produced by people followed by Lilly Wachowski?,movies,"<explanation>
1. **Find Lilly Wachowski:** Start by matching the node with the name ""Lilly Wachowski"".
2. **Find who Lilly follows:** Traverse the `FOLLOWS` relationships outgoing from Lilly's node.
3. **Find movies produced by those people:** Traverse the `PRODUCED` relationships outgoing from the people followed by Lilly. 
4. **Return the taglines of the movies:** For each movie found, return its `tagline` property.

```cypher
MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(p:Person)-[:PRODUCED]->(m:Movie)
RETURN m.tagline
```
</explanation>
```cypher
MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(p:Person)-[:PRODUCED]->(m:Movie)
RETURN m.tagline
```",Pathfinding Queries,"MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(p:Person)-[:PRODUCED]->(m:Movie)
RETURN m.tagline","1. **Find Lilly Wachowski:** Start by matching the node with the name ""Lilly Wachowski"".
2. **Find who Lilly follows:** Traverse the `FOLLOWS` relationships outgoing from Lilly's node.
3. **Find movies produced by those people:** Traverse the `PRODUCED` relationships outgoing from the people followed by Lilly. 
4. **Return the taglines of the movies:** For each movie found, return its `tagline` property.

```cypher
MATCH (l:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(p:Person)-[:PRODUCED]->(m:Movie)
RETURN m.tagline
```"
"Who are the top 3 people born before 1960 that are followed by someone who acted in ""The Matrix""?",movies,"<explanation>
1. **Find the ""The Matrix"" movie:** 
   - Start with a node labeled ""Movie"" with the title ""The Matrix"".
2. **Find followers of people who acted in the movie:**
   - Traverse the ""ACTED_IN"" relationship from the movie to the actors.
   - Traverse the ""FOLLOWS"" relationship from the actors to their followers.
3. **Filter followers born before 1960:**
   - Use a WHERE clause to only include followers born before 1960.
4. **Count followers for each person:**
    - Group the results by the followers and count how many times each follower appears.
5. **Order and limit the result:**
   - Order the results in descending order based on the follower count.
   - Return the top 3 people.

```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[:ACTED_IN]-(a:Person)<-[:FOLLOWS]-(p:Person)
WHERE p.born < 1960
WITH p, count(a) AS followerCount
RETURN p.name, followerCount
ORDER BY followerCount DESC
LIMIT 3
```
</explanation>",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})<-[:ACTED_IN]-(a:Person)<-[:FOLLOWS]-(p:Person)
WHERE p.born < 1960
WITH p, count(a) AS followerCount
RETURN p.name, followerCount
ORDER BY followerCount DESC
LIMIT 3","1. **Find the ""The Matrix"" movie:** 
   - Start with a node labeled ""Movie"" with the title ""The Matrix"".
2. **Find followers of people who acted in the movie:**
   - Traverse the ""ACTED_IN"" relationship from the movie to the actors.
   - Traverse the ""FOLLOWS"" relationship from the actors to their followers.
3. **Filter followers born before 1960:**
   - Use a WHERE clause to only include followers born before 1960.
4. **Count followers for each person:**
    - Group the results by the followers and count how many times each follower appears.
5. **Order and limit the result:**
   - Order the results in descending order based on the follower count.
   - Return the top 3 people.

```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[:ACTED_IN]-(a:Person)<-[:FOLLOWS]-(p:Person)
WHERE p.born < 1960
WITH p, count(a) AS followerCount
RETURN p.name, followerCount
ORDER BY followerCount DESC
LIMIT 3
```"
What are the roles of the actors in the movies reviewed with a rating greater than 95?,movies,"<explanation>
1. **MATCH** the pattern of a `Person` who `ACTED_IN` a `Movie` and that `Movie` was `REVIEWED` with a rating greater than 95.
2. **RETURN** the `title` of the `Movie` and the `roles` of the `Person` who acted in it. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p2:Person)
WHERE r.rating > 95
RETURN m.title, p.name,  r.summary
```",Pathfinding Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p2:Person)
WHERE r.rating > 95
RETURN m.title, p.name,  r.summary","1. **MATCH** the pattern of a `Person` who `ACTED_IN` a `Movie` and that `Movie` was `REVIEWED` with a rating greater than 95.
2. **RETURN** the `title` of the `Movie` and the `roles` of the `Person` who acted in it."
"Which movies released after 2000 were reviewed with ""An amazing journey"" by someone who follows Keanu Reeves?",movies,"<explanation>
1. **Find Keanu Reeves:** We need to find the node representing ""Keanu Reeves"".
2. **Find followers:** Identify all the people who follow Keanu Reeves.
3. **Find movies reviewed by followers:** Locate movies reviewed by these followers with ""An amazing journey"".
4. **Filter by release year:**  Filter these movies to only include those released after 2000.
5. **Return movie titles:** Return the titles of the movies that satisfy these conditions.

```cypher
MATCH (kr:Person {name: ""Keanu Reeves""})<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey"" AND m.released > 2000
RETURN m.title
```
</explanation>

```cypher
MATCH (kr:Person {name: ""Keanu Reeves""})<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey"" AND m.released > 2000
RETURN m.title
```",Pathfinding Queries,"MATCH (kr:Person {name: ""Keanu Reeves""})<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey"" AND m.released > 2000
RETURN m.title","1. **Find Keanu Reeves:** We need to find the node representing ""Keanu Reeves"".
2. **Find followers:** Identify all the people who follow Keanu Reeves.
3. **Find movies reviewed by followers:** Locate movies reviewed by these followers with ""An amazing journey"".
4. **Filter by release year:**  Filter these movies to only include those released after 2000.
5. **Return movie titles:** Return the titles of the movies that satisfy these conditions.

```cypher
MATCH (kr:Person {name: ""Keanu Reeves""})<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey"" AND m.released > 2000
RETURN m.title
```"
Who are the people who acted in movies directed by someone followed by Lana Wachowski?,movies,"<explanation>
1. **Find Lana Wachowski:** Start by finding the node with the name ""Lana Wachowski"".
2. **People followed by Lana:** Traverse the `FOLLOWS` relationship from Lana's node to find the people she follows.
3. **Movies directed by followed people:**  Traverse the `DIRECTED` relationship from those people to find the movies they directed.
4. **Actors in those movies:** Traverse the `ACTED_IN` relationship from those movies to find the actors who acted in them.
5. **Return the actors' names:** Return the distinct names of the actors found.

```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(followed:Person)
MATCH (followed)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```
</explanation>
```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(followed:Person)
MATCH (followed)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```
",Pathfinding Queries,"MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(followed:Person)
MATCH (followed)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name","1. **Find Lana Wachowski:** Start by finding the node with the name ""Lana Wachowski"".
2. **People followed by Lana:** Traverse the `FOLLOWS` relationship from Lana's node to find the people she follows.
3. **Movies directed by followed people:**  Traverse the `DIRECTED` relationship from those people to find the movies they directed.
4. **Actors in those movies:** Traverse the `ACTED_IN` relationship from those movies to find the actors who acted in them.
5. **Return the actors' names:** Return the distinct names of the actors found.

```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(followed:Person)
MATCH (followed)-[:DIRECTED]->(movie:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(movie)
RETURN DISTINCT actor.name
```"
What is the average number of votes for movies produced by people followed by Joel Silver?,movies,"<explanation>
1. **Start with Joel Silver:** Find the person named ""Joel Silver"".
2. **Find followers:** Traverse the `FOLLOWS` relationship to find people who follow Joel Silver.
3. **Find produced movies:** Traverse the `PRODUCED` relationship from those followers to find movies they produced.
4. **Calculate the average vote count:** Calculate the average of the `votes` property of those movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:FOLLOWS]->(follower:Person)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:FOLLOWS]->(follower:Person)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Pathfinding Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:FOLLOWS]->(follower:Person)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Start with Joel Silver:** Find the person named ""Joel Silver"".
2. **Find followers:** Traverse the `FOLLOWS` relationship to find people who follow Joel Silver.
3. **Find produced movies:** Traverse the `PRODUCED` relationship from those followers to find movies they produced.
4. **Calculate the average vote count:** Calculate the average of the `votes` property of those movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:FOLLOWS]->(follower:Person)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
"List the first 3 movies reviewed by people who follow someone who directed ""Speed Racer"".",movies,"<explanation>
1. **Find the director of ""Speed Racer"":**  We start by finding the person who directed the movie titled ""Speed Racer"".
2. **Find the followers of the director:** We then traverse the `FOLLOWS` relationship from the director to find the people who follow them.
3. **Find the movies reviewed by the followers:** We traverse the `REVIEWED` relationship from the followers to find the movies they reviewed.
4. **Return the first 3 movies:** Finally, we return the title of the first 3 movies found. 

```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: 'Speed Racer'})
MATCH (d)<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
RETURN DISTINCT reviewedMovie.title
LIMIT 3
```
</explanation>
```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: 'Speed Racer'})
MATCH (d)<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
RETURN DISTINCT reviewedMovie.title
LIMIT 3
```
",Pathfinding Queries,"MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: 'Speed Racer'})
MATCH (d)<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
RETURN DISTINCT reviewedMovie.title
LIMIT 3","1. **Find the director of ""Speed Racer"":**  We start by finding the person who directed the movie titled ""Speed Racer"".
2. **Find the followers of the director:** We then traverse the `FOLLOWS` relationship from the director to find the people who follow them.
3. **Find the movies reviewed by the followers:** We traverse the `REVIEWED` relationship from the followers to find the movies they reviewed.
4. **Return the first 3 movies:** Finally, we return the title of the first 3 movies found. 

```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: 'Speed Racer'})
MATCH (d)<-[:FOLLOWS]-(follower:Person)
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
RETURN DISTINCT reviewedMovie.title
LIMIT 3
```"
"Which movies were produced by people born after 1950 and followed by someone who acted in ""The Matrix""?",movies,"<explanation>
1. **MATCH (m:Movie)<-[:PRODUCED]-(p:Person)** - Find all movies (m) and the people (p) who produced them.
2. **WHERE p.born > 1950** - Filter the people to those born after 1950.
3. **MATCH (p)<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(matrix:Movie {title: ""The Matrix""})** - Find all people (follower) who follow the producers (p) and have acted in the movie ""The Matrix"" (matrix).
4. **RETURN DISTINCT m.title** - Return the distinct titles of the movies produced.

This query effectively identifies movies produced by individuals born after 1950 who are followed by someone who acted in ""The Matrix.""
</explanation>
```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE p.born > 1950
MATCH (p)<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(matrix:Movie {title: ""The Matrix""})
RETURN DISTINCT m.title
```",Pathfinding Queries,"MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE p.born > 1950
MATCH (p)<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(matrix:Movie {title: ""The Matrix""})
RETURN DISTINCT m.title","1. **MATCH (m:Movie)<-[:PRODUCED]-(p:Person)** - Find all movies (m) and the people (p) who produced them.
2. **WHERE p.born > 1950** - Filter the people to those born after 1950.
3. **MATCH (p)<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(matrix:Movie {title: ""The Matrix""})** - Find all people (follower) who follow the producers (p) and have acted in the movie ""The Matrix"" (matrix).
4. **RETURN DISTINCT m.title** - Return the distinct titles of the movies produced.

This query effectively identifies movies produced by individuals born after 1950 who are followed by someone who acted in ""The Matrix."""
What are the taglines of the movies directed by people followed by Lilly Wachowski and born before 1960?,movies,"<explanation>
1. **MATCH people followed by Lilly Wachowski:** 
   - Match nodes with the label ""Person"" and the property ""name"" equal to ""Lilly Wachowski"".
   - Traverse the ""FOLLOWS"" relationship from those nodes to other ""Person"" nodes.
2. **MATCH movies directed by those people:**
   - From the ""Person"" nodes identified in the previous step, traverse the ""DIRECTED"" relationship to ""Movie"" nodes.
3. **Filter people by birth year:**
   - Filter the ""Person"" nodes to include only those with a ""born"" property value less than 1960.
4. **Return the taglines of the movies:**
   - Return the ""tagline"" property of the ""Movie"" nodes.
</explanation>
```cypher
MATCH (p:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(director:Person)
WHERE director.born < 1960
WITH director
MATCH (director)-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```",Pathfinding Queries,"MATCH (p:Person {name: ""Lilly Wachowski""})-[:FOLLOWS]->(director:Person)
WHERE director.born < 1960
WITH director
MATCH (director)-[:DIRECTED]->(m:Movie)
RETURN m.tagline","1. **MATCH people followed by Lilly Wachowski:** 
   - Match nodes with the label ""Person"" and the property ""name"" equal to ""Lilly Wachowski"".
   - Traverse the ""FOLLOWS"" relationship from those nodes to other ""Person"" nodes.
2. **MATCH movies directed by those people:**
   - From the ""Person"" nodes identified in the previous step, traverse the ""DIRECTED"" relationship to ""Movie"" nodes.
3. **Filter people by birth year:**
   - Filter the ""Person"" nodes to include only those with a ""born"" property value less than 1960.
4. **Return the taglines of the movies:**
   - Return the ""tagline"" property of the ""Movie"" nodes."
"Who are the people who reviewed movies with a rating less than 70 and follow someone who produced ""V for Vendetta""?",movies,"<explanation>
1. **MATCH (reviewer:Person)-[:REVIEWED]->(m:Movie)**: Find all people who reviewed a movie.
2. **WHERE m.rating < 70**: Filter for movies with a rating less than 70.
3. **MATCH (reviewer)-[:FOLLOWS]->(producer:Person)-[:PRODUCED]->(movie:Movie {title: 'V for Vendetta'})**: From the reviewers found in step 2, filter for those who follow a person who produced the movie ""V for Vendetta"".
4. **RETURN DISTINCT reviewer.name**: Return the distinct names of the reviewers identified.

</explanation>
```cypher
MATCH (reviewer:Person)-[:REVIEWED]->(m:Movie)
WHERE m.rating < 70
MATCH (reviewer)-[:FOLLOWS]->(producer:Person)-[:PRODUCED]->(movie:Movie {title: 'V for Vendetta'})
RETURN DISTINCT reviewer.name
```",Pathfinding Queries,"MATCH (reviewer:Person)-[:REVIEWED]->(m:Movie)
WHERE m.rating < 70
MATCH (reviewer)-[:FOLLOWS]->(producer:Person)-[:PRODUCED]->(movie:Movie {title: 'V for Vendetta'})
RETURN DISTINCT reviewer.name","1. **MATCH (reviewer:Person)-[:REVIEWED]->(m:Movie)**: Find all people who reviewed a movie.
2. **WHERE m.rating < 70**: Filter for movies with a rating less than 70.
3. **MATCH (reviewer)-[:FOLLOWS]->(producer:Person)-[:PRODUCED]->(movie:Movie {title: 'V for Vendetta'})**: From the reviewers found in step 2, filter for those who follow a person who produced the movie ""V for Vendetta"".
4. **RETURN DISTINCT reviewer.name**: Return the distinct names of the reviewers identified."
What is the highest rating given to a movie acted in by someone who follows Keanu Reeves and was born after 1970?,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the person named ""Keanu Reeves.""
2. **People who follow Keanu:** Identify all people who follow Keanu Reeves.
3. **Born after 1970:** Filter those followers to only include individuals born after 1970.
4. **Movies they acted in:** Find all movies these people have acted in.
5. **Their ratings:** Get the ratings given by these followers for those movies.
6. **Highest rating:**  Return the highest rating among those.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1970
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH max(m.rating) AS maxRating
RETURN maxRating
```
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1970
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH max(m.rating) AS maxRating
RETURN maxRating
```
",Pathfinding Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1970
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH max(m.rating) AS maxRating
RETURN maxRating","1. **Find Keanu Reeves:** Start by finding the person named ""Keanu Reeves.""
2. **People who follow Keanu:** Identify all people who follow Keanu Reeves.
3. **Born after 1970:** Filter those followers to only include individuals born after 1970.
4. **Movies they acted in:** Find all movies these people have acted in.
5. **Their ratings:** Get the ratings given by these followers for those movies.
6. **Highest rating:**  Return the highest rating among those.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1970
MATCH (follower)-[:REVIEWED]->(m:Movie)
WITH max(m.rating) AS maxRating
RETURN maxRating
```"
List the movies with the lowest number of votes that were reviewed by someone who follows Lana Wachowski and directed a movie before 2000.,movies,"<explanation>
1. **MATCH (follower:Person)-[:FOLLOWS]->(lana:Person {name: 'Lana Wachowski'})**: Find all followers of a person named ""Lana Wachowski"".
2. **MATCH (follower)-[:REVIEWED]->(m:Movie)**: Filter for followers who have reviewed at least one movie.
3. **MATCH (follower)-[:DIRECTED]->(d:Movie)**: Find all movies directed by those reviewers.
4. **WHERE d.released < 2000**: Filter for movies directed before the year 2000.
5. **WITH m, count(*) AS numVotes**: Count the number of reviews for each movie.
5. **RETURN m.title, numVotes ORDER BY numVotes ASC LIMIT 1**: Return the title of the movie with the lowest number of votes along with its vote count. 

```cypher
MATCH (follower:Person)-[:FOLLOWS]->(lana:Person {name: 'Lana Wachowski'})
MATCH (follower)-[:REVIEWED]->(m:Movie)
MATCH (follower)-[:DIRECTED]->(d:Movie)
WHERE d.released < 2000
WITH m, count(*) AS numVotes 
RETURN m.title, numVotes ORDER BY numVotes ASC LIMIT 1
```
</explanation>",Pathfinding Queries,"MATCH (follower:Person)-[:FOLLOWS]->(lana:Person {name: 'Lana Wachowski'})
MATCH (follower)-[:REVIEWED]->(m:Movie)
MATCH (follower)-[:DIRECTED]->(d:Movie)
WHERE d.released < 2000
WITH m, count(*) AS numVotes 
RETURN m.title, numVotes ORDER BY numVotes ASC LIMIT 1","1. **MATCH (follower:Person)-[:FOLLOWS]->(lana:Person {name: 'Lana Wachowski'})**: Find all followers of a person named ""Lana Wachowski"".
2. **MATCH (follower)-[:REVIEWED]->(m:Movie)**: Filter for followers who have reviewed at least one movie.
3. **MATCH (follower)-[:DIRECTED]->(d:Movie)**: Find all movies directed by those reviewers.
4. **WHERE d.released < 2000**: Filter for movies directed before the year 2000.
5. **WITH m, count(*) AS numVotes**: Count the number of reviews for each movie.
5. **RETURN m.title, numVotes ORDER BY numVotes ASC LIMIT 1**: Return the title of the movie with the lowest number of votes along with its vote count. 

```cypher
MATCH (follower:Person)-[:FOLLOWS]->(lana:Person {name: 'Lana Wachowski'})
MATCH (follower)-[:REVIEWED]->(m:Movie)
MATCH (follower)-[:DIRECTED]->(d:Movie)
WHERE d.released < 2000
WITH m, count(*) AS numVotes 
RETURN m.title, numVotes ORDER BY numVotes ASC LIMIT 1
```"
"Who acted in ""The Matrix"" and follows someone who directed a movie with more than 5000 votes?",movies,"<explanation>
1. **MATCH (m:Movie {title: ""The Matrix""})** - Find the movie with the title ""The Matrix"".
2. **MATCH (m)<-[:ACTED_IN]-(a:Person)** - Find all actors who acted in the movie.
3. **MATCH (a)-[:FOLLOWS]->(p:Person)-[:DIRECTED]->(m2:Movie)** - Find all people followed by the actors who directed movies.
4. **WHERE m2.votes > 5000** - Filter movies to include only those with more than 5000 votes.
5. **RETURN DISTINCT a.name** - Return the names of the actors.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (m)<-[:ACTED_IN]-(a:Person)
MATCH (a)-[:FOLLOWS]->(p:Person)-[:DIRECTED]->(m2:Movie)
WHERE m2.votes > 5000
RETURN DISTINCT a.name
```",Pathfinding Queries,"MATCH (m:Movie {title: ""The Matrix""})
MATCH (m)<-[:ACTED_IN]-(a:Person)
MATCH (a)-[:FOLLOWS]->(p:Person)-[:DIRECTED]->(m2:Movie)
WHERE m2.votes > 5000
RETURN DISTINCT a.name","1. **MATCH (m:Movie {title: ""The Matrix""})** - Find the movie with the title ""The Matrix"".
2. **MATCH (m)<-[:ACTED_IN]-(a:Person)** - Find all actors who acted in the movie.
3. **MATCH (a)-[:FOLLOWS]->(p:Person)-[:DIRECTED]->(m2:Movie)** - Find all people followed by the actors who directed movies.
4. **WHERE m2.votes > 5000** - Filter movies to include only those with more than 5000 votes.
5. **RETURN DISTINCT a.name** - Return the names of the actors."
"What is the average rating given by people born after 1970 who follow someone who produced ""Speed Racer""?",movies,"<explanation>
1. **Find the producers of ""Speed Racer""**: Match nodes with label ""Movie"" and title ""Speed Racer"" and traverse the ""PRODUCED"" relationship to find the producers.
2. **Find people who follow the producers**: Traverse the ""FOLLOWS"" relationship from the producers to find their followers.
3. **Filter followers born after 1970**: Filter the followers based on their ""born"" property being greater than 1970.
4. **Find movies reviewed by the followers**: Traverse the ""REVIEWED"" relationship from the filtered followers to the movies they reviewed.
5. **Calculate the average rating**: Use the `avg()` function to calculate the average of the ""rating"" property on the ""REVIEWED"" relationships.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(producer:Person)
MATCH (producer)<-[:FOLLOWS]-(follower:Person {born: > 1970})
MATCH (follower)-[r:REVIEWED]->(reviewedMovie:Movie)
WITH avg(r.rating) AS averageRating
RETURN averageRating
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(producer:Person)
MATCH (producer)<-[:FOLLOWS]-(follower:Person {born: > 1970})
MATCH (follower)-[r:REVIEWED]->(reviewedMovie:Movie)
WITH avg(r.rating) AS averageRating
RETURN averageRating
```",Pathfinding Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(producer:Person)
MATCH (producer)<-[:FOLLOWS]-(follower:Person {born: > 1970})
MATCH (follower)-[r:REVIEWED]->(reviewedMovie:Movie)
WITH avg(r.rating) AS averageRating
RETURN averageRating","1. **Find the producers of ""Speed Racer""**: Match nodes with label ""Movie"" and title ""Speed Racer"" and traverse the ""PRODUCED"" relationship to find the producers.
2. **Find people who follow the producers**: Traverse the ""FOLLOWS"" relationship from the producers to find their followers.
3. **Filter followers born after 1970**: Filter the followers based on their ""born"" property being greater than 1970.
4. **Find movies reviewed by the followers**: Traverse the ""REVIEWED"" relationship from the filtered followers to the movies they reviewed.
5. **Calculate the average rating**: Use the `avg()` function to calculate the average of the ""rating"" property on the ""REVIEWED"" relationships.

```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(producer:Person)
MATCH (producer)<-[:FOLLOWS]-(follower:Person {born: > 1970})
MATCH (follower)-[r:REVIEWED]->(reviewedMovie:Movie)
WITH avg(r.rating) AS averageRating
RETURN averageRating
```"
Which movies released before 1995 were reviewed by someone who follows Lilly Wachowski and acted in a movie with Joel Silver?,movies,"<explanation>
1. **Find Lilly Wachowski:** Match the person named 'Lilly Wachowski'.
2. **Find followers who reviewed movies:**  Match people who follow Lilly Wachowski and have reviewed movies.
3. **Find movies with Joel Silver:** Match movies acted in by Joel Silver.
4. **Check for common movies:** Check if the movies from steps 2 and 3 are the same.
5. **Filter by release year:** Filter the movies released before 1995.
6. **Return the movie titles:** Return the titles of the movies that meet all the criteria.

```cypher
MATCH (lilly:Person {name: 'Lilly Wachowski'})<-[:FOLLOWS]-(follower:Person)-[:REVIEWED]->(movie:Movie)
MATCH (joel:Person {name: 'Joel Silver'})-[:ACTED_IN]->(movie)
WHERE movie.released < 1995
RETURN DISTINCT movie.title
```
</explanation>
```cypher
MATCH (lilly:Person {name: 'Lilly Wachowski'})<-[:FOLLOWS]-(follower:Person)-[:REVIEWED]->(movie:Movie)
MATCH (joel:Person {name: 'Joel Silver'})-[:ACTED_IN]->(movie)
WHERE movie.released < 1995
RETURN DISTINCT movie.title
```
",Pathfinding Queries,"MATCH (lilly:Person {name: 'Lilly Wachowski'})<-[:FOLLOWS]-(follower:Person)-[:REVIEWED]->(movie:Movie)
MATCH (joel:Person {name: 'Joel Silver'})-[:ACTED_IN]->(movie)
WHERE movie.released < 1995
RETURN DISTINCT movie.title","1. **Find Lilly Wachowski:** Match the person named 'Lilly Wachowski'.
2. **Find followers who reviewed movies:**  Match people who follow Lilly Wachowski and have reviewed movies.
3. **Find movies with Joel Silver:** Match movies acted in by Joel Silver.
4. **Check for common movies:** Check if the movies from steps 2 and 3 are the same.
5. **Filter by release year:** Filter the movies released before 1995.
6. **Return the movie titles:** Return the titles of the movies that meet all the criteria.

```cypher
MATCH (lilly:Person {name: 'Lilly Wachowski'})<-[:FOLLOWS]-(follower:Person)-[:REVIEWED]->(movie:Movie)
MATCH (joel:Person {name: 'Joel Silver'})-[:ACTED_IN]->(movie)
WHERE movie.released < 1995
RETURN DISTINCT movie.title
```"
What are the taglines of movies directed by someone followed by Keanu Reeves and born before 1960?,movies,"<explanation>
1. **Start with Keanu Reeves:** We need to find the person named 'Keanu Reeves'.
2. **Find followers born before 1960:** Traverse the `FOLLOWS` relationship from Keanu Reeves to other people and filter those people based on their birth year being less than 1960.
3. **Find movies directed by the followers:** Traverse the `DIRECTED` relationships from those followers to the movies they directed.
4. **Return the taglines:**  For the found movies, return their taglines.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower:Person)
WHERE follower.born < 1960
WITH follower
MATCH (follower)-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower:Person)
WHERE follower.born < 1960
WITH follower
MATCH (follower)-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```",Pathfinding Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower:Person)
WHERE follower.born < 1960
WITH follower
MATCH (follower)-[:DIRECTED]->(m:Movie)
RETURN m.tagline","1. **Start with Keanu Reeves:** We need to find the person named 'Keanu Reeves'.
2. **Find followers born before 1960:** Traverse the `FOLLOWS` relationship from Keanu Reeves to other people and filter those people based on their birth year being less than 1960.
3. **Find movies directed by the followers:** Traverse the `DIRECTED` relationships from those followers to the movies they directed.
4. **Return the taglines:**  For the found movies, return their taglines.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower:Person)
WHERE follower.born < 1960
WITH follower
MATCH (follower)-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```"
"Who produced movies with more than 4000 votes and is followed by someone who acted in ""V for Vendetta""?",movies,"<explanation>
1. **Find producers of movies with more than 4000 votes:**
   - Match nodes with label ""Movie"" and having `votes` greater than 4000.
   - Traverse the `PRODUCED` relationship backwards to find the producers (nodes with label ""Person"").
2. **Find followers who acted in ""V for Vendetta"":**
   - For each producer, traverse the `FOLLOWS` relationship to find their followers.
   - Check if these followers have an outgoing `ACTED_IN` relationship to the movie with the title ""V for Vendetta"".
3. **Return the names of the producers:**
   - Only return the `name` property of the producers who satisfy both conditions.

```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.votes > 4000
WITH p
MATCH (p)-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(m2:Movie)
WHERE m2.title = ""V for Vendetta""
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.votes > 4000
WITH p
MATCH (p)-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(m2:Movie)
WHERE m2.title = ""V for Vendetta""
RETURN DISTINCT p.name
```
",Pathfinding Queries,"MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.votes > 4000
WITH p
MATCH (p)-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(m2:Movie)
WHERE m2.title = ""V for Vendetta""
RETURN DISTINCT p.name","1. **Find producers of movies with more than 4000 votes:**
   - Match nodes with label ""Movie"" and having `votes` greater than 4000.
   - Traverse the `PRODUCED` relationship backwards to find the producers (nodes with label ""Person"").
2. **Find followers who acted in ""V for Vendetta"":**
   - For each producer, traverse the `FOLLOWS` relationship to find their followers.
   - Check if these followers have an outgoing `ACTED_IN` relationship to the movie with the title ""V for Vendetta"".
3. **Return the names of the producers:**
   - Only return the `name` property of the producers who satisfy both conditions.

```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.votes > 4000
WITH p
MATCH (p)-[:FOLLOWS]->(follower:Person)-[:ACTED_IN]->(m2:Movie)
WHERE m2.title = ""V for Vendetta""
RETURN DISTINCT p.name
```"
What is the earliest release year of a movie acted in by someone who follows Lana Wachowski and reviewed a movie with a rating greater than 90?,movies,"<explanation>
1. **Find Lana Wachowski:** We need to start by finding the person named ""Lana Wachowski"".
2. **Find followers who acted in movies:** Next, we need to find all the people who follow Lana Wachowski and have acted in at least one movie.
3. **Find movies reviewed by followers with high ratings:** For each follower, we need to find the movies they reviewed with a rating greater than 90.
4. **Get the release year of those movies:** We'll extract the release year of those movies.
5. **Find the earliest release year:** Finally, we'll find the earliest release year among all the movies found.

```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH follower, movie
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE reviewedMovie.rating > 90
RETURN min(movie.released) AS earliestReleaseYear
```
</explanation>
```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH follower, movie
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE reviewedMovie.rating > 90
RETURN min(movie.released) AS earliestReleaseYear
```
",Pathfinding Queries,"MATCH (lana:Person {name: ""Lana Wachowski""})<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH follower, movie
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE reviewedMovie.rating > 90
RETURN min(movie.released) AS earliestReleaseYear","1. **Find Lana Wachowski:** We need to start by finding the person named ""Lana Wachowski"".
2. **Find followers who acted in movies:** Next, we need to find all the people who follow Lana Wachowski and have acted in at least one movie.
3. **Find movies reviewed by followers with high ratings:** For each follower, we need to find the movies they reviewed with a rating greater than 90.
4. **Get the release year of those movies:** We'll extract the release year of those movies.
5. **Find the earliest release year:** Finally, we'll find the earliest release year among all the movies found.

```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})<-[:FOLLOWS]-(follower:Person)-[:ACTED_IN]->(movie:Movie)
WITH follower, movie
MATCH (follower)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE reviewedMovie.rating > 90
RETURN min(movie.released) AS earliestReleaseYear
```"
"Who are the people who follow Joel Silver and acted in movies directed by someone who also directed ""The Matrix""?",movies,"<explanation>
1. **Find the person named ""Joel Silver"":** 
   - Start with a node labeled ""Person"" and filter by the name property.
2. **Find followers of Joel Silver:**
   - Traverse the ""FOLLOWS"" relationship from the ""Joel Silver"" node.
3. **Find the directors of ""The Matrix"":**
   - Start with a node labeled ""Movie"" and filter by the title ""The Matrix"".
   - Traverse the ""DIRECTED"" relationship in reverse to find the directors.
4. **Find movies directed by those directors (excluding ""The Matrix""):**
   - Traverse the ""DIRECTED"" relationship from the directors.
5. **Find actors who acted in those movies:**
   - Traverse the ""ACTED_IN"" relationship in reverse from those movies.
6. **Return the names of the actors:**
   - Return the ""name"" property of the actors.

This approach ensures we are considering actors who acted in movies directed by directors of ""The Matrix"" (excluding ""The Matrix"" itself).
</explanation>
```cypher
MATCH (joel:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
MATCH (matrix:Movie {title: ""The Matrix""})<-[:DIRECTED]-(director:Person)
MATCH (director)-[:DIRECTED]->(otherMovie:Movie)
WHERE NOT otherMovie.title = ""The Matrix""
MATCH (otherMovie)<-[:ACTED_IN]-(actor:Person)
RETURN DISTINCT actor.name
```",Pathfinding Queries,"MATCH (joel:Person {name: ""Joel Silver""})<-[:FOLLOWS]-(follower:Person)
MATCH (matrix:Movie {title: ""The Matrix""})<-[:DIRECTED]-(director:Person)
MATCH (director)-[:DIRECTED]->(otherMovie:Movie)
WHERE NOT otherMovie.title = ""The Matrix""
MATCH (otherMovie)<-[:ACTED_IN]-(actor:Person)
RETURN DISTINCT actor.name","1. **Find the person named ""Joel Silver"":** 
   - Start with a node labeled ""Person"" and filter by the name property.
2. **Find followers of Joel Silver:**
   - Traverse the ""FOLLOWS"" relationship from the ""Joel Silver"" node.
3. **Find the directors of ""The Matrix"":**
   - Start with a node labeled ""Movie"" and filter by the title ""The Matrix"".
   - Traverse the ""DIRECTED"" relationship in reverse to find the directors.
4. **Find movies directed by those directors (excluding ""The Matrix""):**
   - Traverse the ""DIRECTED"" relationship from the directors.
5. **Find actors who acted in those movies:**
   - Traverse the ""ACTED_IN"" relationship in reverse from those movies.
6. **Return the names of the actors:**
   - Return the ""name"" property of the actors.

This approach ensures we are considering actors who acted in movies directed by directors of ""The Matrix"" (excluding ""The Matrix"" itself)."
What is the average number of votes for movies produced by someone followed by Lilly Wachowski and born after 1960?,movies,"<explanation>
1. **Find Lilly Wachowski:** Start by finding the person named ""Lilly Wachowski.""
2. **People who follow Lilly:** Identify all the people who follow Lilly Wachowski.
3. **Filter people born after 1960:** From the people following Lilly Wachowski, filter for those born after 1960.
4. **Movies produced by these people:**  Find all the movies produced by those people.
5. **Calculate average votes:** Calculate the average number of votes for the movies found in the previous step.

```cypher
MATCH (lilly:Person {name: ""Lilly Wachowski""})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1960
WITH follower
MATCH (follower)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (lilly:Person {name: ""Lilly Wachowski""})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1960
WITH follower
MATCH (follower)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Pathfinding Queries,"MATCH (lilly:Person {name: ""Lilly Wachowski""})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1960
WITH follower
MATCH (follower)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Find Lilly Wachowski:** Start by finding the person named ""Lilly Wachowski.""
2. **People who follow Lilly:** Identify all the people who follow Lilly Wachowski.
3. **Filter people born after 1960:** From the people following Lilly Wachowski, filter for those born after 1960.
4. **Movies produced by these people:**  Find all the movies produced by those people.
5. **Calculate average votes:** Calculate the average number of votes for the movies found in the previous step.

```cypher
MATCH (lilly:Person {name: ""Lilly Wachowski""})<-[:FOLLOWS]-(follower:Person)
WHERE follower.born > 1960
WITH follower
MATCH (follower)-[:PRODUCED]->(m:Movie)
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
"Which movies released after 2005 were reviewed with ""A solid romp"" by someone who follows Keanu Reeves and directed a movie before 2000?",movies,"<explanation>
1. **Find Keanu Reeves:** We start by matching a `Person` node with the name ""Keanu Reeves.""
2. **Find followers who are directors:** We then traverse the `FOLLOWS` relationship from Keanu Reeves to find other `Person` nodes.  We further filter these persons to those who `DIRECTED` a movie before the year 2000.
3. **Find movies reviewed as ""A solid romp"":** From those directors, we traverse the `REVIEWED` relationship to `Movie` nodes, filtering for reviews with the summary ""A solid romp.""
4. **Filter movies released after 2005:** Finally, we filter those movies further, selecting only those released after the year 2005.
5. **Return the movie titles:** The query returns the titles of the movies that satisfy all these conditions.

```cypher
MATCH (keanu:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:DIRECTED]->(movie:Movie)
WHERE movie.released < 2000
MATCH (follower)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005 AND m.tagline = ""A solid romp""
RETURN DISTINCT m.title
```
</explanation>",Pathfinding Queries,"MATCH (keanu:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:DIRECTED]->(movie:Movie)
WHERE movie.released < 2000
MATCH (follower)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005 AND m.tagline = ""A solid romp""
RETURN DISTINCT m.title","1. **Find Keanu Reeves:** We start by matching a `Person` node with the name ""Keanu Reeves.""
2. **Find followers who are directors:** We then traverse the `FOLLOWS` relationship from Keanu Reeves to find other `Person` nodes.  We further filter these persons to those who `DIRECTED` a movie before the year 2000.
3. **Find movies reviewed as ""A solid romp"":** From those directors, we traverse the `REVIEWED` relationship to `Movie` nodes, filtering for reviews with the summary ""A solid romp.""
4. **Filter movies released after 2005:** Finally, we filter those movies further, selecting only those released after the year 2005.
5. **Return the movie titles:** The query returns the titles of the movies that satisfy all these conditions.

```cypher
MATCH (keanu:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(follower:Person)
MATCH (follower)-[:DIRECTED]->(movie:Movie)
WHERE movie.released < 2000
MATCH (follower)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2005 AND m.tagline = ""A solid romp""
RETURN DISTINCT m.title
```"
What are the taglines of movies directed by someone followed by Lana Wachowski and produced by someone followed by Joel Silver?,movies,"<explanation>
1. **Identify the starting points:** We need to find Lana Wachowski and Joel Silver (nodes with label `Person`).
2. **Traverse the `FOLLOWS` relationship backward:** Find the people who are followed by Lana Wachowski and Joel Silver.
3. **Traverse outgoing relationships for `DIRECTED` and `PRODUCED`:**  From those people, find the movies they directed and produced, respectively.
4. **Match the movies:** Ensure that the movies directed and produced are the same.
5. **Return the taglines:** Extract the `tagline` property from the matched movies.

```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(director:Person)
MATCH (joel:Person {name: 'Joel Silver'})-[:FOLLOWS]->(producer:Person)
MATCH (director)-[:DIRECTED]->(movie:Movie)<-[:PRODUCED]-(producer)
RETURN DISTINCT movie.tagline
```
</explanation>
```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(director:Person)
MATCH (joel:Person {name: 'Joel Silver'})-[:FOLLOWS]->(producer:Person)
MATCH (director)-[:DIRECTED]->(movie:Movie)<-[:PRODUCED]-(producer)
RETURN DISTINCT movie.tagline
```",Pathfinding Queries,"MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(director:Person)
MATCH (joel:Person {name: 'Joel Silver'})-[:FOLLOWS]->(producer:Person)
MATCH (director)-[:DIRECTED]->(movie:Movie)<-[:PRODUCED]-(producer)
RETURN DISTINCT movie.tagline","1. **Identify the starting points:** We need to find Lana Wachowski and Joel Silver (nodes with label `Person`).
2. **Traverse the `FOLLOWS` relationship backward:** Find the people who are followed by Lana Wachowski and Joel Silver.
3. **Traverse outgoing relationships for `DIRECTED` and `PRODUCED`:**  From those people, find the movies they directed and produced, respectively.
4. **Match the movies:** Ensure that the movies directed and produced are the same.
5. **Return the taglines:** Extract the `tagline` property from the matched movies.

```cypher
MATCH (lana:Person {name: 'Lana Wachowski'})-[:FOLLOWS]->(director:Person)
MATCH (joel:Person {name: 'Joel Silver'})-[:FOLLOWS]->(producer:Person)
MATCH (director)-[:DIRECTED]->(movie:Movie)<-[:PRODUCED]-(producer)
RETURN DISTINCT movie.tagline
```"
Which movies released between 2000 and 2005 have more than 1000 votes?,movies,"<explanation>
This query starts by matching all movies released between 2000 and 2005. Then, it filters these movies, keeping only those with more than 1000 votes. Finally, it returns the titles of those movies.

```cypher
MATCH (m:Movie)
WHERE 2000 <= m.released <= 2005 AND m.votes > 1000
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE 2000 <= m.released <= 2005 AND m.votes > 1000
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE 2000 <= m.released <= 2005 AND m.votes > 1000
RETURN m.title","This query starts by matching all movies released between 2000 and 2005. Then, it filters these movies, keeping only those with more than 1000 votes. Finally, it returns the titles of those movies.

```cypher
MATCH (m:Movie)
WHERE 2000 <= m.released <= 2005 AND m.votes > 1000
RETURN m.title
```"
List the names of people born after 1960 who acted in movies released before 1990.,movies,"<explanation>
This query starts with a match on people born after 1960. Then it matches on movies released before 1990. Finally, it checks for an ACTED_IN relationship between those people and movies and returns the names of the people.
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born > 1960
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)
WHERE p.born > 1960
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (p)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","This query starts with a match on people born after 1960. Then it matches on movies released before 1990. Finally, it checks for an ACTED_IN relationship between those people and movies and returns the names of the people."
What are the titles of movies directed by people born before 1950?,movies,"<explanation>
This Cypher query first matches all `Person` nodes with a `born` property less than 1950. Then it traverses the `DIRECTED` relationship from those `Person` nodes to their directed `Movie` nodes. Finally, it returns the `title` property of these `Movie` nodes. 

1. **MATCH** (p:Person)-[:DIRECTED]->(m:Movie) searches for patterns of a Person node with a DIRECTED relationship to a Movie node.
2. **WHERE p.born < 1950** filters for Person nodes with a 'born' property less than 1950.
3. **RETURN m.title** returns the 'title' property of the matched Movie nodes.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN m.title
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN m.title","This Cypher query first matches all `Person` nodes with a `born` property less than 1950. Then it traverses the `DIRECTED` relationship from those `Person` nodes to their directed `Movie` nodes. Finally, it returns the `title` property of these `Movie` nodes. 

1. **MATCH** (p:Person)-[:DIRECTED]->(m:Movie) searches for patterns of a Person node with a DIRECTED relationship to a Movie node.
2. **WHERE p.born < 1950** filters for Person nodes with a 'born' property less than 1950.
3. **RETURN m.title** returns the 'title' property of the matched Movie nodes."
"Find the names of people who acted in movies with ""Matrix"" in the title.",movies,"<explanation>
This query starts by finding movies with ""Matrix"" in the title. Then, it traverses the ACTED_IN relationships backward to find the persons who acted in those movies. Finally, it returns the names of those persons.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","This query starts by finding movies with ""Matrix"" in the title. Then, it traverses the ACTED_IN relationships backward to find the persons who acted in those movies. Finally, it returns the names of those persons."
Which movies were produced by someone born in 1952?,movies,"<explanation>
This query starts by finding all people born in 1952. Then, it traverses the `PRODUCED` relationships from those people to movies. Finally, it returns the titles of those movies.

1. **Find producers born in 1952**: `MATCH (p:Person) WHERE p.born = 1952`
2. **Traverse PRODUCED relationships**: `MATCH (p)-[:PRODUCED]->(m:Movie)`
3. **Return the movie titles**: `RETURN m.title`
</explanation>
```cypher
MATCH (p:Person) WHERE p.born = 1952
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN m.title
```",Complex Aggregation Queries,"MATCH (p:Person) WHERE p.born = 1952
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN m.title","This query starts by finding all people born in 1952. Then, it traverses the `PRODUCED` relationships from those people to movies. Finally, it returns the titles of those movies.

1. **Find producers born in 1952**: `MATCH (p:Person) WHERE p.born = 1952`
2. **Traverse PRODUCED relationships**: `MATCH (p)-[:PRODUCED]->(m:Movie)`
3. **Return the movie titles**: `RETURN m.title`"
What are the taglines of movies reviewed with a rating greater than 90?,movies,"<explanation>
This query starts with the `Person` node, matches to movies they reviewed with a rating greater than 90, and then returns the taglines of those movies.
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.tagline","This query starts with the `Person` node, matches to movies they reviewed with a rating greater than 90, and then returns the taglines of those movies."
List the names of people who acted in and produced the same movie.,movies,"<explanation>
This query identifies people who both acted in and produced the same movie. It achieves this by:
1. **Matching**: Finding people who have both ACTED_IN and PRODUCED relationships with the same Movie node.
2. **Returning**: Outputting the 'name' property of those people. 

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name
```
</explanation>",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name","This query identifies people who both acted in and produced the same movie. It achieves this by:
1. **Matching**: Finding people who have both ACTED_IN and PRODUCED relationships with the same Movie node.
2. **Returning**: Outputting the 'name' property of those people. 

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name
```"
What is the average rating of movies released after 2000?,movies,"<explanation>
1. **Find movies released after 2000**: We'll start by matching all `Movie` nodes where the `released` property is greater than 2000.
2. **Match reviewed relationships**: Then, we'll match the `REVIEWED` relationships connected to these movies.
3. **Calculate the average rating**: We'll use the `avg()` function to calculate the average of the `rating` property of these `REVIEWED` relationships.
4. **Return the average rating**: Finally, we'll return the average rating.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
MATCH (:Person)-[r:REVIEWED]->(m)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.released > 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find movies released after 2000**: We'll start by matching all `Movie` nodes where the `released` property is greater than 2000.
2. **Match reviewed relationships**: Then, we'll match the `REVIEWED` relationships connected to these movies.
3. **Calculate the average rating**: We'll use the `avg()` function to calculate the average of the `rating` property of these `REVIEWED` relationships.
4. **Return the average rating**: Finally, we'll return the average rating.

```cypher
MATCH (m:Movie)
WHERE m.released > 2000
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Which person born before 1960 acted in the most movies?,movies,"<explanation>
1. **Find the relevant people:** Start by matching all 'Person' nodes.
2. **Filter by birth year:** Filter for 'Person' nodes where the 'born' property is less than 1960.
3. **Match to movies:** Match these people to the movies they 'ACTED_IN'.
4. **Count movies:** Count the number of movies each person acted in using `size()` for the 'ACTED_IN' relationships.
5. **Find the maximum count:** Find the maximum movie count from the previous step.
6. **Filter for the person with the maximum count:** Filter for the person whose movie count matches the maximum count.
7. **Return the person's name:** Return the 'name' property of the person.

```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[:ACTED_IN]->(m:Movie)
WITH p, size((p)-[:ACTED_IN]->()) AS movieCount
WITH max(movieCount) AS maxCount
MATCH (p:Person)
WHERE size((p)-[:ACTED_IN]->()) = maxCount
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1960
WITH p, size((p)-[:ACTED_IN]->(:Movie)) AS movieCount
WITH max(movieCount) AS maxCount
MATCH (p:Person)
WHERE size((p)-[:ACTED_IN]->(:Movie)) = maxCount
RETURN p.name
```
",Complex Aggregation Queries,"MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[:ACTED_IN]->(m:Movie)
WITH p, size((p)-[:ACTED_IN]->()) AS movieCount
WITH max(movieCount) AS maxCount
MATCH (p:Person)
WHERE size((p)-[:ACTED_IN]->()) = maxCount
RETURN p.name","1. **Find the relevant people:** Start by matching all 'Person' nodes.
2. **Filter by birth year:** Filter for 'Person' nodes where the 'born' property is less than 1960.
3. **Match to movies:** Match these people to the movies they 'ACTED_IN'.
4. **Count movies:** Count the number of movies each person acted in using `size()` for the 'ACTED_IN' relationships.
5. **Find the maximum count:** Find the maximum movie count from the previous step.
6. **Filter for the person with the maximum count:** Filter for the person whose movie count matches the maximum count.
7. **Return the person's name:** Return the 'name' property of the person.

```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[:ACTED_IN]->(m:Movie)
WITH p, size((p)-[:ACTED_IN]->()) AS movieCount
WITH max(movieCount) AS maxCount
MATCH (p:Person)
WHERE size((p)-[:ACTED_IN]->()) = maxCount
RETURN p.name
```"
Find the titles of the top 3 movies with the highest number of votes.,movies,"<explanation>
This query finds the top 3 movies with the highest number of votes. 

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WITH** and **ORDER BY**:  We use `WITH` to sort the movies in descending order based on their `votes` property.
3. **LIMIT**: We limit the result to the top 3 movies.
4. **RETURN**: Finally, we return the `title` of each of these movies.

```cypher
MATCH (m:Movie)
WITH m 
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m 
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WITH m 
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title","This query finds the top 3 movies with the highest number of votes. 

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WITH** and **ORDER BY**:  We use `WITH` to sort the movies in descending order based on their `votes` property.
3. **LIMIT**: We limit the result to the top 3 movies.
4. **RETURN**: Finally, we return the `title` of each of these movies.

```cypher
MATCH (m:Movie)
WITH m 
ORDER BY m.votes DESC
LIMIT 3
RETURN m.title
```"
Which person directed movies with a total vote count greater than 500?,movies,"<explanation>
This Cypher query identifies people who directed movies with a total vote count exceeding 500. 

1. **MATCH**: We start by finding all `Person` nodes who have a `DIRECTED` relationship with a `Movie` node.
2. **WITH**:  We use `WITH` to aggregate the total votes for each `Person` using `sum(movie.votes)`. 
3. **WHERE**: We filter the result to only include `Person` nodes where the `totalVotes` is greater than 500.
4. **RETURN**: Finally, we return the `name` of the `Person` and the `totalVotes`.

```cypher
MATCH (p:Person)-[:DIRECTED]->(movie:Movie)
WITH p, sum(movie.votes) AS totalVotes
WHERE totalVotes > 500
RETURN p.name, totalVotes
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(movie:Movie)
WITH p, sum(movie.votes) AS totalVotes
WHERE totalVotes > 500
RETURN p.name, totalVotes
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(movie:Movie)
WITH p, sum(movie.votes) AS totalVotes
WHERE totalVotes > 500
RETURN p.name, totalVotes","This Cypher query identifies people who directed movies with a total vote count exceeding 500. 

1. **MATCH**: We start by finding all `Person` nodes who have a `DIRECTED` relationship with a `Movie` node.
2. **WITH**:  We use `WITH` to aggregate the total votes for each `Person` using `sum(movie.votes)`. 
3. **WHERE**: We filter the result to only include `Person` nodes where the `totalVotes` is greater than 500.
4. **RETURN**: Finally, we return the `name` of the `Person` and the `totalVotes`.

```cypher
MATCH (p:Person)-[:DIRECTED]->(movie:Movie)
WITH p, sum(movie.votes) AS totalVotes
WHERE totalVotes > 500
RETURN p.name, totalVotes
```"
What are the roles played by Keanu Reeves in movies released after 1995?,movies,"<explanation>
This query looks for a person named Keanu Reeves and then retrieves all the movies he ACTED_IN with a release date after 1995. The query returns the movie title and the roles played. 

1. **MATCH**: We start by matching the Person node with the name ""Keanu Reeves""
2. **MATCH**: We continue by matching the ACTED_IN relationship connecting Keanu Reeves to movies, aliased as `m`.
3. **WHERE**: We filter for movies released after 1995.
4. **RETURN**: We return the title of the movie and the roles Keanu Reeves played.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})
MATCH (p)-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title, r.roles 
```
</explanation>",Complex Aggregation Queries,"MATCH (p:Person {name: 'Keanu Reeves'})
MATCH (p)-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title, r.roles","This query looks for a person named Keanu Reeves and then retrieves all the movies he ACTED_IN with a release date after 1995. The query returns the movie title and the roles played. 

1. **MATCH**: We start by matching the Person node with the name ""Keanu Reeves""
2. **MATCH**: We continue by matching the ACTED_IN relationship connecting Keanu Reeves to movies, aliased as `m`.
3. **WHERE**: We filter for movies released after 1995.
4. **RETURN**: We return the title of the movie and the roles Keanu Reeves played.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})
MATCH (p)-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title, r.roles 
```"
"List the summaries of reviews for movies with ""Matrix"" in the title.",movies,"<explanation>
This query first identifies movies with ""Matrix"" in the title. Then, it finds all reviews associated with those movies and returns the summaries of those reviews.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary","This query first identifies movies with ""Matrix"" in the title. Then, it finds all reviews associated with those movies and returns the summaries of those reviews."
Find the names of people who wrote and directed the same movie.,movies,"<explanation>
This query starts by finding all people who have both WRITTEN and DIRECTED the same movie. It achieves this by matching paths where a person (:Person) has both relationships to the same movie (:Movie). The RETURN clause then retrieves the name of each person. 
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name",This query starts by finding all people who have both WRITTEN and DIRECTED the same movie. It achieves this by matching paths where a person (:Person) has both relationships to the same movie (:Movie). The RETURN clause then retrieves the name of each person.
What is the average number of votes for movies released before 1990?,movies,"<explanation>
1. **MATCH** all movies released before 1990.
2. Use an intermediate **WITH** clause to calculate the average number of votes for those movies using `avg(movie.votes)`.
3. **RETURN** the average number of votes.
</explanation>
```cypher
MATCH (movie:Movie)
WHERE movie.released < 1990
WITH avg(movie.votes) AS average_votes
RETURN average_votes
```",Complex Aggregation Queries,"MATCH (movie:Movie)
WHERE movie.released < 1990
WITH avg(movie.votes) AS average_votes
RETURN average_votes","1. **MATCH** all movies released before 1990.
2. Use an intermediate **WITH** clause to calculate the average number of votes for those movies using `avg(movie.votes)`.
3. **RETURN** the average number of votes."
Which person produced the most movies released after 2000?,movies,"<explanation>
1. **MATCH** the `Person` nodes that have an outgoing `PRODUCED` relationship with a `Movie` node.
2. **WHERE** clause filters the `Movie` nodes to only include those released after 2000.
3. **WITH** clause allows us to perform an aggregation and pass the result to the next part of the query. We count the movies produced by each person using `count(m)` and store the count as `producedCount`.
4. **RETURN** the person's name and the `producedCount`.
5. **ORDER BY**  `producedCount` in descending order to get the person who produced the most movies first.
6. **LIMIT** the result to 1 to get only the person who produced the most movies.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
WITH p, count(m) AS producedCount
RETURN p.name, producedCount
ORDER BY producedCount DESC
LIMIT 1
```",Complex Aggregation Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
WITH p, count(m) AS producedCount
RETURN p.name, producedCount
ORDER BY producedCount DESC
LIMIT 1","1. **MATCH** the `Person` nodes that have an outgoing `PRODUCED` relationship with a `Movie` node.
2. **WHERE** clause filters the `Movie` nodes to only include those released after 2000.
3. **WITH** clause allows us to perform an aggregation and pass the result to the next part of the query. We count the movies produced by each person using `count(m)` and store the count as `producedCount`.
4. **RETURN** the person's name and the `producedCount`.
5. **ORDER BY**  `producedCount` in descending order to get the person who produced the most movies first.
6. **LIMIT** the result to 1 to get only the person who produced the most movies."
Find the titles of movies reviewed with a rating less than 60.,movies,"<explanation>
This query starts with a match on any person node and their reviewed movies where the rating is less than 60.  Then it returns the titles of those movies. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title
```",Complex Aggregation Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title","This query starts with a match on any person node and their reviewed movies where the rating is less than 60.  Then it returns the titles of those movies. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title
```"
What are the taglines of movies acted in by Carrie-Anne Moss?,movies,"<explanation>
1. **Find Carrie-Anne Moss:** Start by finding the `Person` node with the name ""Carrie-Anne Moss"".
2. **Traverse ACTED_IN relationships:** Traverse the `ACTED_IN` relationships originating from Carrie-Anne Moss to find the movies she acted in.
3. **Return the taglines:** For each of these movies, return the `tagline` property.

```cypher
MATCH (p:Person {name: ""Carrie-Anne Moss""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person {name: ""Carrie-Anne Moss""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (p:Person {name: ""Carrie-Anne Moss""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline","1. **Find Carrie-Anne Moss:** Start by finding the `Person` node with the name ""Carrie-Anne Moss"".
2. **Traverse ACTED_IN relationships:** Traverse the `ACTED_IN` relationships originating from Carrie-Anne Moss to find the movies she acted in.
3. **Return the taglines:** For each of these movies, return the `tagline` property.

```cypher
MATCH (p:Person {name: ""Carrie-Anne Moss""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
```"
List the names of people born after 1950 who directed movies with less than 500 votes.,movies,"<explanation>
1. **Start with Person nodes where born > 1950**: `MATCH (p:Person {born: $year})`
2. **Match persons who DIRECTED movies**: `MATCH (p)-[:DIRECTED]->(m:Movie)`
3. **Filter movies with less than 500 votes**: `WHERE m.votes < 500`
4. **Return distinct names of the persons**: `RETURN DISTINCT p.name`

</explanation>
```cypher
MATCH (p:Person {born: $year})-[:DIRECTED]->(m:Movie)
WHERE m.votes < 500 AND p.born > 1950
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person {born: $year})-[:DIRECTED]->(m:Movie)
WHERE m.votes < 500 AND p.born > 1950
RETURN DISTINCT p.name","1. **Start with Person nodes where born > 1950**: `MATCH (p:Person {born: $year})`
2. **Match persons who DIRECTED movies**: `MATCH (p)-[:DIRECTED]->(m:Movie)`
3. **Filter movies with less than 500 votes**: `WHERE m.votes < 500`
4. **Return distinct names of the persons**: `RETURN DISTINCT p.name`"
Which person acted in movies with the highest average rating?,movies,"<explanation>
1. **Calculate the average rating for each movie:**
   - We need to find all `REVIEWED` relationships connected to a `Movie` node.
   - For each movie, we calculate the average rating using the `avg` function.

2. **Find the person with the highest average movie rating:**
   - We traverse the `ACTED_IN` relationships from `Person` to `Movie` nodes.
   - We filter the results to only include movies with an average rating equal to the maximum average rating calculated in the previous step.

3. **Return the person's name:**
   - We return the `name` property of the `Person` node.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH p, m, avg(r.rating) AS average_rating
WITH p, max(average_rating) AS max_average_rating
MATCH (p)-[:ACTED_IN]->(m)<-[r:REVIEWED]-()
WITH p, avg(r.rating) AS average_rating
WHERE average_rating = max_average_rating
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH p, m, avg(r.rating) AS average_rating
WITH p, max(average_rating) AS max_average_rating
MATCH (p)-[:ACTED_IN]->(m)<-[r:REVIEWED]-()
WITH p, avg(r.rating) AS average_rating
WHERE average_rating = max_average_rating
RETURN p.name","1. **Calculate the average rating for each movie:**
   - We need to find all `REVIEWED` relationships connected to a `Movie` node.
   - For each movie, we calculate the average rating using the `avg` function.

2. **Find the person with the highest average movie rating:**
   - We traverse the `ACTED_IN` relationships from `Person` to `Movie` nodes.
   - We filter the results to only include movies with an average rating equal to the maximum average rating calculated in the previous step.

3. **Return the person's name:**
   - We return the `name` property of the `Person` node."
Find the titles of the 3 movies with the lowest number of votes.,movies,"<explanation>
This query first matches all `Movie` nodes. Then, it orders these movies in ascending order based on their `votes` property. It then uses `LIMIT` to keep only the top 3 movies with the lowest vote count. Finally, it returns the titles of these movies. 
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 3
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
ORDER BY m.votes ASC
LIMIT 3
RETURN m.title","This query first matches all `Movie` nodes. Then, it orders these movies in ascending order based on their `votes` property. It then uses `LIMIT` to keep only the top 3 movies with the lowest vote count. Finally, it returns the titles of these movies."
What are the roles played by Laurence Fishburne in movies released before 2005?,movies,"<explanation>
1. **Find the person named ""Laurence Fishburne""**: We start by matching the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse the `ACTED_IN` relationship**: We follow the `ACTED_IN` relationships originating from Laurence Fishburne to find the movies he acted in.
3. **Filter movies based on release year**: We filter the movies to include only those released before 2005.
4. **Return the movie titles and the corresponding roles**: We return the titles of the movies and the `roles` property from the `ACTED_IN` relationships.

This query effectively identifies all movies released before 2005 where Laurence Fishburne acted and provides the roles he played in each of those movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})- [ai:ACTED_IN]->(m:Movie)
WHERE m.released < 2005
RETURN m.title AS movieTitle, ai.roles AS roles
```",Complex Aggregation Queries,"MATCH (p:Person {name: ""Laurence Fishburne""})- [ai:ACTED_IN]->(m:Movie)
WHERE m.released < 2005
RETURN m.title AS movieTitle, ai.roles AS roles","1. **Find the person named ""Laurence Fishburne""**: We start by matching the `Person` node with the name ""Laurence Fishburne"".
2. **Traverse the `ACTED_IN` relationship**: We follow the `ACTED_IN` relationships originating from Laurence Fishburne to find the movies he acted in.
3. **Filter movies based on release year**: We filter the movies to include only those released before 2005.
4. **Return the movie titles and the corresponding roles**: We return the titles of the movies and the `roles` property from the `ACTED_IN` relationships.

This query effectively identifies all movies released before 2005 where Laurence Fishburne acted and provides the roles he played in each of those movies."
List the summaries of reviews with a rating greater than 80 for movies released after 1990.,movies,"<explanation>
This query starts by matching all `Movie` nodes released after 1990. Then it traverses the `REVIEWED` relationships to `Person` nodes, filtering for reviews with a rating higher than 80. Finally, the query returns the review summaries.

1. **MATCH (m:Movie)**: This matches all nodes with the label 'Movie'.
2. **WHERE m.released > 1990**: This filters the `Movie` nodes to only include those released after 1990.
3. **MATCH (m)<-[r:REVIEWED]-(p:Person)**: This part matches the `REVIEWED` relationships connecting the previously filtered `Movie` nodes (m) to `Person` nodes (p).
4. **WHERE r.rating > 80**: This line filters the `REVIEWED` relationships to include only those with a rating greater than 80.
5. **RETURN r.summary**: Finally, the query returns the `summary` property of the selected `REVIEWED` relationships, effectively listing the summaries of highly rated reviews for movies released after 1990.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 1990
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 80
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.released > 1990
MATCH (m)<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 80
RETURN r.summary","This query starts by matching all `Movie` nodes released after 1990. Then it traverses the `REVIEWED` relationships to `Person` nodes, filtering for reviews with a rating higher than 80. Finally, the query returns the review summaries.

1. **MATCH (m:Movie)**: This matches all nodes with the label 'Movie'.
2. **WHERE m.released > 1990**: This filters the `Movie` nodes to only include those released after 1990.
3. **MATCH (m)<-[r:REVIEWED]-(p:Person)**: This part matches the `REVIEWED` relationships connecting the previously filtered `Movie` nodes (m) to `Person` nodes (p).
4. **WHERE r.rating > 80**: This line filters the `REVIEWED` relationships to include only those with a rating greater than 80.
5. **RETURN r.summary**: Finally, the query returns the `summary` property of the selected `REVIEWED` relationships, effectively listing the summaries of highly rated reviews for movies released after 1990."
Which person wrote the most movies with more than 1000 votes?,movies,"<explanation>
1. **MATCH** all persons and the movies they wrote using `(:Person)-[:WROTE]->(movie:Movie)`
2. **WHERE** filter the movies to only include those with more than 1000 votes using `WHERE movie.votes > 1000`
3. **WITH** person and count of movies using `WITH person, count(movie) AS num_movies` to perform aggregation
4. **ORDER BY** the count of movies in descending order using `ORDER BY num_movies DESC`
5. **RETURN** the person's name and the count of movies using `RETURN person.name, num_movies`
6. **LIMIT** the result to the top person using `LIMIT 1`

This query effectively identifies the person who wrote the most movies with over 1000 votes.
</explanation>
```cypher
MATCH (person:Person)-[:WROTE]->(movie:Movie)
WHERE movie.votes > 1000
WITH person, count(movie) AS num_movies
ORDER BY num_movies DESC
RETURN person.name, num_movies
LIMIT 1
```",Complex Aggregation Queries,"MATCH (person:Person)-[:WROTE]->(movie:Movie)
WHERE movie.votes > 1000
WITH person, count(movie) AS num_movies
ORDER BY num_movies DESC
RETURN person.name, num_movies
LIMIT 1","1. **MATCH** all persons and the movies they wrote using `(:Person)-[:WROTE]->(movie:Movie)`
2. **WHERE** filter the movies to only include those with more than 1000 votes using `WHERE movie.votes > 1000`
3. **WITH** person and count of movies using `WITH person, count(movie) AS num_movies` to perform aggregation
4. **ORDER BY** the count of movies in descending order using `ORDER BY num_movies DESC`
5. **RETURN** the person's name and the count of movies using `RETURN person.name, num_movies`
6. **LIMIT** the result to the top person using `LIMIT 1`

This query effectively identifies the person who wrote the most movies with over 1000 votes."
Find the names of people who directed and produced movies released between 1990 and 2000.,movies,"<explanation>
This Cypher query identifies people who have both directed and produced movies released between 1990 and 2000. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query finds all people who have directed movies and ensures those movies were released between 1990 and 2000.
2. **MATCH (p)-[:PRODUCED]->(m2:Movie)**: This part further filters the results to only include people who have also produced movies.
3. **WHERE m.released >= 1990 AND m.released <= 2000**: This clause filters the movies to include only those released between 1990 and 2000.
4. **RETURN DISTINCT p.name**: Finally, the query returns the names of the people who meet both criteria, eliminating any duplicate entries.

</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m2:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:PRODUCED]->(m2:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN DISTINCT p.name","This Cypher query identifies people who have both directed and produced movies released between 1990 and 2000. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query finds all people who have directed movies and ensures those movies were released between 1990 and 2000.
2. **MATCH (p)-[:PRODUCED]->(m2:Movie)**: This part further filters the results to only include people who have also produced movies.
3. **WHERE m.released >= 1990 AND m.released <= 2000**: This clause filters the movies to include only those released between 1990 and 2000.
4. **RETURN DISTINCT p.name**: Finally, the query returns the names of the people who meet both criteria, eliminating any duplicate entries."
What is the average rating of movies acted in by Keanu Reeves?,movies,"<explanation>
1. **Find Keanu Reeves:** Start by matching the `Person` node with the name ""Keanu Reeves."" 
2. **Traverse Relationships:** Follow the `ACTED_IN` relationships from Keanu Reeves to the movies he acted in.
3. **Calculate Average Rating:** Use the `avg()` function to calculate the average rating of those movies based on the `rating` property of the `REVIEWED` relationship.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Complex Aggregation Queries,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find Keanu Reeves:** Start by matching the `Person` node with the name ""Keanu Reeves."" 
2. **Traverse Relationships:** Follow the `ACTED_IN` relationships from Keanu Reeves to the movies he acted in.
3. **Calculate Average Rating:** Use the `avg()` function to calculate the average rating of those movies based on the `rating` property of the `REVIEWED` relationship.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Which person born after 1960 produced the most movies with a rating greater than 90?,movies,"<explanation>
1. **Find people born after 1960:** We need to match all `Person` nodes with a `born` property greater than 1960.
2. **Match produced movies with ratings:** Match the `PRODUCED` relationships from these people to `Movie` nodes. Then traverse to `REVIEWED` relationships and filter by `rating` greater than 90.
3. **Count movies per person:** Group the results by the `Person` node and count the number of movies using `count(*)`.
4. **Order by movie count:** Order the results in descending order based on the movie count to find the person who produced the most movies.
5. **Return the person's name and movie count:** Return the `name` of the `Person` and the count of movies.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960 AND r.rating > 90
WITH p, count(*) AS movieCount
ORDER BY movieCount DESC
RETURN p.name, movieCount
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960 AND r.rating > 90
WITH p, count(*) AS movieCount
ORDER BY movieCount DESC
RETURN p.name, movieCount
```",Complex Aggregation Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960 AND r.rating > 90
WITH p, count(*) AS movieCount
ORDER BY movieCount DESC
RETURN p.name, movieCount","1. **Find people born after 1960:** We need to match all `Person` nodes with a `born` property greater than 1960.
2. **Match produced movies with ratings:** Match the `PRODUCED` relationships from these people to `Movie` nodes. Then traverse to `REVIEWED` relationships and filter by `rating` greater than 90.
3. **Count movies per person:** Group the results by the `Person` node and count the number of movies using `count(*)`.
4. **Order by movie count:** Order the results in descending order based on the movie count to find the person who produced the most movies.
5. **Return the person's name and movie count:** Return the `name` of the `Person` and the count of movies.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960 AND r.rating > 90
WITH p, count(*) AS movieCount
ORDER BY movieCount DESC
RETURN p.name, movieCount
```"
"Find the titles of movies with the word ""The"" in the title and released after 1995.",movies,"<explanation>
This query first identifies all movies (nodes with label `Movie`) and then filters these movies based on two criteria using the `WHERE` clause. 
1. It checks if the movie title (`title`) contains the word ""The"" using the `CONTAINS` operator.
2. It verifies if the movie's release year (`released`) is greater than 1995. 
Finally, it returns the titles of the movies matching both criteria.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The' AND m.released > 1995
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The' AND m.released > 1995
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'The' AND m.released > 1995
RETURN m.title","This query first identifies all movies (nodes with label `Movie`) and then filters these movies based on two criteria using the `WHERE` clause. 
1. It checks if the movie title (`title`) contains the word ""The"" using the `CONTAINS` operator.
2. It verifies if the movie's release year (`released`) is greater than 1995. 
Finally, it returns the titles of the movies matching both criteria.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The' AND m.released > 1995
RETURN m.title
```"
What are the taglines of movies directed by people born before 1960?,movies,"<explanation>
1. We need to find movies directed by people born before 1960. So we start by matching the Person nodes with the born property less than 1960.
2. Then, we traverse the DIRECTED relationship to find the movies directed by these people.
3. Finally, we return the taglines of these movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
```
",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline","1. We need to find movies directed by people born before 1960. So we start by matching the Person nodes with the born property less than 1960.
2. Then, we traverse the DIRECTED relationship to find the movies directed by these people.
3. Finally, we return the taglines of these movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
```"
List the names of people who acted in movies with a rating greater than 95.,movies,"<explanation>
This query starts with the `Person` nodes and uses the `ACTED_IN` relationship to traverse to `Movie` nodes. Then it filters the `Movie` nodes by those with a `rating` greater than 95. Finally, it returns the `name` of the `Person` nodes. 
</explanation>
```cypher
MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE r.rating > 95
RETURN DISTINCT p.name 
```",Complex Aggregation Queries,"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE r.rating > 95
RETURN DISTINCT p.name","This query starts with the `Person` nodes and uses the `ACTED_IN` relationship to traverse to `Movie` nodes. Then it filters the `Movie` nodes by those with a `rating` greater than 95. Finally, it returns the `name` of the `Person` nodes."
"Which person directed a movie with ""Matrix"" in the title?",movies,"<explanation>
This query starts by finding movies with ""Matrix"" in the title. Then it traverses the `DIRECTED` relationship from those movies to find the people who directed them. Finally, it returns the names of those directors. 
</explanation>
```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.title CONTAINS 'Matrix'
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.title CONTAINS 'Matrix'
RETURN p.name","This query starts by finding movies with ""Matrix"" in the title. Then it traverses the `DIRECTED` relationship from those movies to find the people who directed them. Finally, it returns the names of those directors."
Find the release years of the top 5 movies with the highest number of votes.,movies,"<explanation>
This query will identify the top 5 movies based on the number of votes.
1. It orders the movies by votes in descending order.
2. Then it limits the output to the top 5 using `LIMIT`.
3. Finally, it returns the title and the release year of these movies. 
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 5
RETURN m.title, m.released
```",Complex Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 5
RETURN m.title, m.released","This query will identify the top 5 movies based on the number of votes.
1. It orders the movies by votes in descending order.
2. Then it limits the output to the top 5 using `LIMIT`.
3. Finally, it returns the title and the release year of these movies."
"What are the roles played by actors in ""The Matrix Revolutions""?",movies,"<explanation>
1. **Match the movie node:**  We start by finding the movie with the title ""The Matrix Revolutions"".
2. **Traverse the ACTED_IN relationship:** We then traverse the `ACTED_IN` relationships outgoing from that movie node to find the actors who acted in it.
3. **Return the actors and their roles:** Finally, we return the name of each actor and their corresponding roles in the movie.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN {roles: $roles}]->(m)
RETURN p.name AS actor, roles
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name AS actor, [(p)-[:ACTED_IN]->(m) | relationships(p)[0].roles] AS roles
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN {roles: $roles}]->(m)
RETURN p.name AS actor, roles","1. **Match the movie node:**  We start by finding the movie with the title ""The Matrix Revolutions"".
2. **Traverse the ACTED_IN relationship:** We then traverse the `ACTED_IN` relationships outgoing from that movie node to find the actors who acted in it.
3. **Return the actors and their roles:** Finally, we return the name of each actor and their corresponding roles in the movie.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[:ACTED_IN {roles: $roles}]->(m)
RETURN p.name AS actor, roles
```"
List the summaries of reviews for movies produced by Joel Silver.,movies,"<explanation>
1. **Find the person named ""Joel Silver.""** We can use the `Person` node label and the `name` property for this.
2. **Identify movies produced by Joel Silver.** This involves traversing the `PRODUCED` relationship from the ""Joel Silver"" node to `Movie` nodes.
3. **Find the reviews associated with those movies.** This requires traversing the `REVIEWED` relationship from the `Movie` nodes identified in the previous step.
4. **Return the summaries of the reviews.** We can access the `summary` property of the `REVIEWED` relationship. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary AS review_summary
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary AS review_summary
```",Complex Aggregation Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary AS review_summary","1. **Find the person named ""Joel Silver.""** We can use the `Person` node label and the `name` property for this.
2. **Identify movies produced by Joel Silver.** This involves traversing the `PRODUCED` relationship from the ""Joel Silver"" node to `Movie` nodes.
3. **Find the reviews associated with those movies.** This requires traversing the `REVIEWED` relationship from the `Movie` nodes identified in the previous step.
4. **Return the summaries of the reviews.** We can access the `summary` property of the `REVIEWED` relationship. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary AS review_summary
```"
Which person born before 1955 produced and wrote the same movie?,movies,"<explanation>
This query starts by finding all people born before 1955. Then it finds movies that were both produced and written by the same person.  Finally, it returns the name of the person and the title of the movie.

1. **Find people born before 1955:**
   - `MATCH (p:Person) WHERE p.born < 1955`

2. **Find movies produced and written by the same person:**
   - `MATCH (p)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)`

3. **Return the person's name and the movie title:**
   - `RETURN DISTINCT p.name, m.title`
</explanation>
```cypher
MATCH (p:Person) WHERE p.born < 1955
MATCH (p)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name, m.title
```",Complex Aggregation Queries,"MATCH (p:Person) WHERE p.born < 1955
MATCH (p)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name, m.title","This query starts by finding all people born before 1955. Then it finds movies that were both produced and written by the same person.  Finally, it returns the name of the person and the title of the movie.

1. **Find people born before 1955:**
   - `MATCH (p:Person) WHERE p.born < 1955`

2. **Find movies produced and written by the same person:**
   - `MATCH (p)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)`

3. **Return the person's name and the movie title:**
   - `RETURN DISTINCT p.name, m.title`"
Find the average number of votes for movies released after 2000 and with a rating above 80.,movies,"<explanation>
1. **Match movies released after 2000 with a rating above 80**: We need to find movies with `released` greater than 2000 and have an incoming `REVIEWED` relationship with a `rating` greater than 80.
2. **Calculate the average votes**: We can use the `avg()` function to calculate the average of the `votes` property for the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000 AND r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000 AND r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000 AND r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Match movies released after 2000 with a rating above 80**: We need to find movies with `released` greater than 2000 and have an incoming `REVIEWED` relationship with a `rating` greater than 80.
2. **Calculate the average votes**: We can use the `avg()` function to calculate the average of the `votes` property for the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released > 2000 AND r.rating > 80
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
Which person acted in the most movies released before 1995?,movies,"<explanation>
This query identifies the person who acted in the most movies released before 1995. 

1. **MATCH and WHERE**: We start by finding all people who acted in movies released before 1995.
2. **WITH and COUNT**: Then we count how many movies each person acted in.
3. **ORDER BY and LIMIT**: We order the result by the movie count in descending order and limit it to the top person, effectively finding the person who acted in the most movies.
4. **RETURN**:  Finally, we return the person's name and the number of movies they acted in.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1995
WITH p, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 1
RETURN p.name AS personName, movieCount
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1995
WITH p, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 1
RETURN p.name AS personName, movieCount
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1995
WITH p, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 1
RETURN p.name AS personName, movieCount","This query identifies the person who acted in the most movies released before 1995. 

1. **MATCH and WHERE**: We start by finding all people who acted in movies released before 1995.
2. **WITH and COUNT**: Then we count how many movies each person acted in.
3. **ORDER BY and LIMIT**: We order the result by the movie count in descending order and limit it to the top person, effectively finding the person who acted in the most movies.
4. **RETURN**:  Finally, we return the person's name and the number of movies they acted in.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1995
WITH p, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 1
RETURN p.name AS personName, movieCount
```"
What are the taglines of movies with a rating less than 70 and released after 1980?,movies,"<explanation>
1. **Start with movies:** We begin by matching all `Movie` nodes.
2. **Filter on release year:** We filter for movies released after 1980 using the `WHERE` clause and the `released` property.
3. **Match reviewed relationships:** We use `MATCH` to find `REVIEWED` relationships connected to these movies.
4. **Filter on rating:** We filter for reviews with a `rating` property less than 70.
5. **Return the taglines:** Finally, we return the `tagline` property of the movies that meet our criteria.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 1980
MATCH (m)<-[r:REVIEWED]-()
WHERE r.rating < 70
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.released > 1980
MATCH (m)<-[r:REVIEWED]-()
WHERE r.rating < 70
RETURN m.tagline","1. **Start with movies:** We begin by matching all `Movie` nodes.
2. **Filter on release year:** We filter for movies released after 1980 using the `WHERE` clause and the `released` property.
3. **Match reviewed relationships:** We use `MATCH` to find `REVIEWED` relationships connected to these movies.
4. **Filter on rating:** We filter for reviews with a `rating` property less than 70.
5. **Return the taglines:** Finally, we return the `tagline` property of the movies that meet our criteria."
List the names of people who followed someone born before 1950.,movies,"<explanation>
1. We need to find all people who follow someone else. So, we start by matching the `FOLLOWS` relationship between two nodes.
2. We'll refer to the follower as `p1` and the followed person as `p2`.
3. We need to filter `p2` to only include individuals born before 1950. This can be achieved using a `WHERE` clause checking if `p2.born` is less than 1950.
4. Finally, we only want the names of the followers (`p1`). Therefore, we'll return `p1.name`.

```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p2.born < 1950
RETURN p1.name
```
</explanation>
```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p2.born < 1950
RETURN p1.name
```
",Complex Aggregation Queries,"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p2.born < 1950
RETURN p1.name","1. We need to find all people who follow someone else. So, we start by matching the `FOLLOWS` relationship between two nodes.
2. We'll refer to the follower as `p1` and the followed person as `p2`.
3. We need to filter `p2` to only include individuals born before 1950. This can be achieved using a `WHERE` clause checking if `p2.born` is less than 1950.
4. Finally, we only want the names of the followers (`p1`). Therefore, we'll return `p1.name`.

```cypher
MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p2.born < 1950
RETURN p1.name
```"
Which person directed movies with the lowest average rating?,movies,"<explanation>
1. **Calculate average ratings:** For each director, calculate the average rating of the movies they directed.
2. **Find the minimum average rating:** Determine the lowest average rating among all directors.
3. **Retrieve directors with the minimum rating:**  Identify and return the names of the directors whose average movie rating matches the minimum average rating.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WITH min(average_rating) AS min_average_rating
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WHERE average_rating = min_average_rating
RETURN p.name, average_rating
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WITH min(average_rating) AS min_average_rating
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WHERE average_rating = min_average_rating
RETURN p.name, average_rating
```
",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WITH min(average_rating) AS min_average_rating
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WHERE average_rating = min_average_rating
RETURN p.name, average_rating","1. **Calculate average ratings:** For each director, calculate the average rating of the movies they directed.
2. **Find the minimum average rating:** Determine the lowest average rating among all directors.
3. **Retrieve directors with the minimum rating:**  Identify and return the names of the directors whose average movie rating matches the minimum average rating.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WITH min(average_rating) AS min_average_rating
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, avg(m.rating) AS average_rating
WHERE average_rating = min_average_rating
RETURN p.name, average_rating
```"
"Find the titles of movies reviewed with the summary ""A solid romp"".",movies,"<explanation>
This query looks for all movies that have a review with the summary ""A solid romp"" and returns the titles of those movies. 

1. **MATCH Clause:** We start by finding all `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node. 
2. **WHERE Clause:** We filter these relationships to only include those where the `summary` property is ""A solid romp"".
3. **RETURN Clause:** Finally, we return the `title` property of the `Movie` nodes that matched our criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title","This query looks for all movies that have a review with the summary ""A solid romp"" and returns the titles of those movies. 

1. **MATCH Clause:** We start by finding all `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node. 
2. **WHERE Clause:** We filter these relationships to only include those where the `summary` property is ""A solid romp"".
3. **RETURN Clause:** Finally, we return the `title` property of the `Movie` nodes that matched our criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""A solid romp""
RETURN m.title
```"
What are the roles played by actors in movies with more than 1500 votes?,movies,"<explanation>
This query starts by matching all movies with more than 1500 votes. 
It then matches all actors who have an ACTED_IN relationship with those movies.
Finally, it returns the title of the movie and the roles played by each actor.

```cypher
MATCH (m:Movie)
WHERE m.votes > 1500
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN m.title, p.name, p.born, collect(p.name) AS actors
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 1500
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN m.title AS movieTitle, collect(p.name +  '(' + p.born + ')') AS cast
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.votes > 1500
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN m.title, p.name, p.born, collect(p.name) AS actors","This query starts by matching all movies with more than 1500 votes. 
It then matches all actors who have an ACTED_IN relationship with those movies.
Finally, it returns the title of the movie and the roles played by each actor.

```cypher
MATCH (m:Movie)
WHERE m.votes > 1500
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN m.title, p.name, p.born, collect(p.name) AS actors
```"
List the summaries of reviews for movies released between 1998 and 2004.,movies,"<explanation>
This Cypher query identifies movies released between 1998 and 2004, matches their reviews, and returns the summaries of those reviews.

1. **Match Movies:** We start by finding all movies (`m:Movie`) where the release year (`m.released`) is between 1998 and 2004 (inclusive).
2. **Match Reviews:** For each of these movies, we find the reviews (`r:REVIEWED`) connected to them.
3. **Return Summaries:** Finally, we return the summaries (`r.summary`) of these reviews. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE 1998 <= m.released <= 2004
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE 1998 <= m.released <= 2004
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary","This Cypher query identifies movies released between 1998 and 2004, matches their reviews, and returns the summaries of those reviews.

1. **Match Movies:** We start by finding all movies (`m:Movie`) where the release year (`m.released`) is between 1998 and 2004 (inclusive).
2. **Match Reviews:** For each of these movies, we find the reviews (`r:REVIEWED`) connected to them.
3. **Return Summaries:** Finally, we return the summaries (`r.summary`) of these reviews."
Which person wrote movies with a total vote count greater than 2000?,movies,"<explanation>
1. **Matching relevant nodes:** We start by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
2. **Calculating total votes:** We group the results by `Person` and calculate the sum of `votes` for all movies written by each person using the `sum()` function.
3. **Filtering based on vote count:** We filter the results to only include persons whose total vote count is greater than 2000.
4. **Returning the names:** Finally, we return the names of the persons who meet the criteria.
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes > 2000
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes > 2000
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes > 2000
RETURN p.name","1. **Matching relevant nodes:** We start by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
2. **Calculating total votes:** We group the results by `Person` and calculate the sum of `votes` for all movies written by each person using the `sum()` function.
3. **Filtering based on vote count:** We filter the results to only include persons whose total vote count is greater than 2000.
4. **Returning the names:** Finally, we return the names of the persons who meet the criteria.
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes > 2000
RETURN p.name
```"
What is the average rating of movies produced by someone born after 1950?,movies,"<explanation>
1. **Find producers born after 1950:** We need to locate all `Person` nodes with a `born` property greater than 1950 and who have a `PRODUCED` relationship with a `Movie` node.
2. **Calculate the average rating:** We need to get the `rating` property from the `REVIEWED` relationship associated with those movies and calculate the average.

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[r:REVIEWED]-()
WHERE person.born > 1950
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[r:REVIEWED]-()
WHERE person.born > 1950
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Complex Aggregation Queries,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[r:REVIEWED]-()
WHERE person.born > 1950
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find producers born after 1950:** We need to locate all `Person` nodes with a `born` property greater than 1950 and who have a `PRODUCED` relationship with a `Movie` node.
2. **Calculate the average rating:** We need to get the `rating` property from the `REVIEWED` relationship associated with those movies and calculate the average.

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[r:REVIEWED]-()
WHERE person.born > 1950
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
Find the names of people born after 1965 who acted in and wrote the same movie.,movies,"<explanation>
This query starts by matching people born after 1965. It then looks for movies where that person both ACTED_IN and WROTE the same movie. Finally, it returns the names of those people.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1965
AND (p)-[:WROTE]->(m)
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1965
AND (p)-[:WROTE]->(m)
RETURN DISTINCT p.name","This query starts by matching people born after 1965. It then looks for movies where that person both ACTED_IN and WROTE the same movie. Finally, it returns the names of those people."
"What are the taglines of movies with ""Real"" in the tagline?",movies,"<explanation>This query looks for all movies that contain the word ""Real"" in their tagline and then returns the taglines of those movies. 
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m.tagline",
List the names of people who acted in movies released in 2003.,movies,"<explanation>
This Cypher query should find all movies released in 2003, then find all actors who have the `ACTED_IN` relationship with those movies, and return the actors' names.

1. **Find movies released in 2003**: We start by matching all `Movie` nodes with the `released` property equal to 2003.
2. **Find actors who acted in those movies**: We then traverse the `ACTED_IN` relationships from those movies to the `Person` nodes representing the actors.
3. **Return the actors' names**: Finally, we return the `name` property of each found `Person`. 

```cypher
MATCH (m:Movie {released: 2003})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {released: 2003})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie {released: 2003})<-[:ACTED_IN]-(p:Person)
RETURN p.name","This Cypher query should find all movies released in 2003, then find all actors who have the `ACTED_IN` relationship with those movies, and return the actors' names.

1. **Find movies released in 2003**: We start by matching all `Movie` nodes with the `released` property equal to 2003.
2. **Find actors who acted in those movies**: We then traverse the `ACTED_IN` relationships from those movies to the `Person` nodes representing the actors.
3. **Return the actors' names**: Finally, we return the `name` property of each found `Person`. 

```cypher
MATCH (m:Movie {released: 2003})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```"
"Which person produced a movie with ""Racer"" in the title?",movies,"<explanation>
1. We need to find a `Person` node that has an outgoing `PRODUCED` relationship to a `Movie` node.
2. The `Movie` node must have the string ""Racer"" in its `title` property.

Therefore, the Cypher query will:
- Match on the `PRODUCED` relationship between a `Person` and a `Movie`.
- Filter the matched results to only include those where the `Movie` title contains ""Racer"".
- Return the `name` of the `Person` nodes.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'Racer'
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'Racer'
RETURN p.name","1. We need to find a `Person` node that has an outgoing `PRODUCED` relationship to a `Movie` node.
2. The `Movie` node must have the string ""Racer"" in its `title` property.

Therefore, the Cypher query will:
- Match on the `PRODUCED` relationship between a `Person` and a `Movie`.
- Filter the matched results to only include those where the `Movie` title contains ""Racer"".
- Return the `name` of the `Person` nodes."
Find the average number of votes for movies with a rating greater than 90 and released before 2000.,movies,"<explanation>
1. **Match reviewed movies:** Find all movies that have been reviewed. (`(m:Movie)<-[:REVIEWED]-(p:Person)`).
2. **Filter by rating and release year:** Filter for movies with a rating greater than 90 that were released before 2000 (`WHERE r.rating > 90 AND m.released < 2000`).
3. **Calculate average votes:** Calculate the average number of votes for the filtered movies, using `avg(m.votes)`.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.rating > 90 AND m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.rating > 90 AND m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.rating > 90 AND m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes","1. **Match reviewed movies:** Find all movies that have been reviewed. (`(m:Movie)<-[:REVIEWED]-(p:Person)`).
2. **Filter by rating and release year:** Filter for movies with a rating greater than 90 that were released before 2000 (`WHERE r.rating > 90 AND m.released < 2000`).
3. **Calculate average votes:** Calculate the average number of votes for the filtered movies, using `avg(m.votes)`.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.rating > 90 AND m.released < 2000
WITH avg(m.votes) AS average_votes
RETURN average_votes
```"
What are the roles of actors in movies produced by someone born in 1952?,movies,"<explanation>
1. First, find all persons born in 1952.
2. Then, find all movies produced by those persons.
3. Finally, find all actors who ACTED_IN those movies and return the actors' names and their roles.

</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born = 1952
WITH m
MATCH (a:Person)-[ai:ACTED_IN]->(m)
RETURN a.name, ai.roles
```",Complex Aggregation Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born = 1952
WITH m
MATCH (a:Person)-[ai:ACTED_IN]->(m)
RETURN a.name, ai.roles","1. First, find all persons born in 1952.
2. Then, find all movies produced by those persons.
3. Finally, find all actors who ACTED_IN those movies and return the actors' names and their roles."
List the names of people who wrote movies with a rating less than 60.,movies,"<explanation>
1. Start with the `Person` nodes.
2. Match the `WROTE` relationship between `Person` and `Movie` nodes.
3. Filter the `Movie` nodes based on the condition that the `rating` property of the `REVIEWED` relationship is less than 60.
4. Return the distinct `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN DISTINCT p.name","1. Start with the `Person` nodes.
2. Match the `WROTE` relationship between `Person` and `Movie` nodes.
3. Filter the `Movie` nodes based on the condition that the `rating` property of the `REVIEWED` relationship is less than 60.
4. Return the distinct `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN DISTINCT p.name
```"
"Which person acted in ""The Matrix Revolutions"" and was born before 1970?",movies,"<explanation>
This Cypher query first finds the movie with the title ""The Matrix Revolutions."" Then, it matches any person who acted in that movie. Finally, it filters down to only the people who were born before 1970.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(p:Person)
WHERE p.born < 1970
RETURN p
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(p:Person)
WHERE p.born < 1970
RETURN p","This Cypher query first finds the movie with the title ""The Matrix Revolutions."" Then, it matches any person who acted in that movie. Finally, it filters down to only the people who were born before 1970."
"What is the average rating of movies with ""Matrix"" in the title?",movies,"<explanation>
1. **Match movies with ""Matrix"" in the title:** 
   - We'll use `MATCH` to find all movies where the title contains ""Matrix"".
2. **Match the `REVIEWED` relationships for those movies:**
   - We'll extend our `MATCH` to find all `REVIEWED` relationships connected to the movies found in the previous step.
3. **Calculate the average rating:**
   - We'll use `avg()` function to calculate the average of the `rating` property of the `REVIEWED` relationships.
4. **Return the average rating:**
   - We'll use `RETURN` to return the calculated average rating.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Match movies with ""Matrix"" in the title:** 
   - We'll use `MATCH` to find all movies where the title contains ""Matrix"".
2. **Match the `REVIEWED` relationships for those movies:**
   - We'll extend our `MATCH` to find all `REVIEWED` relationships connected to the movies found in the previous step.
3. **Calculate the average rating:**
   - We'll use `avg()` function to calculate the average of the `rating` property of the `REVIEWED` relationships.
4. **Return the average rating:**
   - We'll use `RETURN` to return the calculated average rating.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
"Find the names of people who follow someone who acted in ""The Matrix Revolutions"".",movies,"<explanation>
1. **Match the movie:** We start by finding the movie with the title ""The Matrix Revolutions.""
2. **Find the followers of those who acted in the movie:** We then traverse the ACTED_IN relationship backward to find the people who acted in the movie.  We then traverse the FOLLOWS relationship to find the people who follow those actors.
3. **Return the names:** Finally, we return the distinct names of those followers.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(a:Person)<-[:FOLLOWS]-(f:Person)
RETURN DISTINCT f.name
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(a:Person)<-[:FOLLOWS]-(f:Person)
RETURN DISTINCT f.name","1. **Match the movie:** We start by finding the movie with the title ""The Matrix Revolutions.""
2. **Find the followers of those who acted in the movie:** We then traverse the ACTED_IN relationship backward to find the people who acted in the movie.  We then traverse the FOLLOWS relationship to find the people who follow those actors.
3. **Return the names:** Finally, we return the distinct names of those followers."
"Which movies have ""The"" in their title and were released before 2000?",movies,"<explanation>
This query looks for movies with ""The"" in the title released before 2000.

1. **MATCH**: We start by finding all `Movie` nodes.
2. **WHERE**: We filter these movies based on two criteria:
    - The movie title contains ""The"" (using the `CONTAINS` operator for case-insensitive search).
    - The movie's release year is before 2000.
3. **RETURN**: We return the titles of the movies that meet these conditions. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS ""The"" AND m.released < 2000
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS ""The"" AND m.released < 2000
RETURN m.title","This query looks for movies with ""The"" in the title released before 2000.

1. **MATCH**: We start by finding all `Movie` nodes.
2. **WHERE**: We filter these movies based on two criteria:
    - The movie title contains ""The"" (using the `CONTAINS` operator for case-insensitive search).
    - The movie's release year is before 2000.
3. **RETURN**: We return the titles of the movies that meet these conditions."
List the taglines of movies with more than 1000 votes and released after 1995.,movies,"<explanation>
This query looks for movies (nodes with label `Movie`) with more than 1000 votes and released after 1995, and then returns their taglines.

1. **MATCH Clause**: We start by matching all `Movie` nodes.
2. **WHERE Clause**: We filter these movies based on the criteria: `votes` greater than 1000 and `released` greater than 1995.
3. **RETURN Clause**: We return the `tagline` property of the filtered movies.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 1000 AND m.released > 1995
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.votes > 1000 AND m.released > 1995
RETURN m.tagline","This query looks for movies (nodes with label `Movie`) with more than 1000 votes and released after 1995, and then returns their taglines.

1. **MATCH Clause**: We start by matching all `Movie` nodes.
2. **WHERE Clause**: We filter these movies based on the criteria: `votes` greater than 1000 and `released` greater than 1995.
3. **RETURN Clause**: We return the `tagline` property of the filtered movies."
What are the roles of actors in movies with a rating greater than 95?,movies,"<explanation>
This query starts by matching all relationships of type `REVIEWED` connected to `Person` and `Movie` nodes. It filters these relationships based on the `rating` property being greater than 95. Finally, it returns the `roles` property from the `ACTED_IN` relationship connected to the previously matched movies and people. 

1. **MATCH (person:Person)-[r:REVIEWED]->(movie:Movie)** - This part of the query finds all relationships of type `REVIEWED` that exist between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating > 95** - This line filters the matched relationships to only include those where the `rating` property is greater than 95.
3. **WITH person, movie** - This clause carries over the `person` and `movie` variables for use in the subsequent part of the query.
4. **MATCH (person)-[acted:ACTED_IN]->(movie)** - This line matches relationships of type `ACTED_IN` that exist between the previously matched `person` and `movie` nodes.
5. **RETURN acted.roles** - This line returns the `roles` property from the `ACTED_IN` relationships, which represent the roles of the actors in those movies.

This query effectively identifies highly-rated movies and then returns the roles played by actors in those movies.
</explanation>
```cypher
MATCH (person:Person)-[r:REVIEWED]->(movie:Movie)
WHERE r.rating > 95
WITH person, movie
MATCH (person)-[acted:ACTED_IN]->(movie)
RETURN acted.roles
```",Complex Aggregation Queries,"MATCH (person:Person)-[r:REVIEWED]->(movie:Movie)
WHERE r.rating > 95
WITH person, movie
MATCH (person)-[acted:ACTED_IN]->(movie)
RETURN acted.roles","This query starts by matching all relationships of type `REVIEWED` connected to `Person` and `Movie` nodes. It filters these relationships based on the `rating` property being greater than 95. Finally, it returns the `roles` property from the `ACTED_IN` relationship connected to the previously matched movies and people. 

1. **MATCH (person:Person)-[r:REVIEWED]->(movie:Movie)** - This part of the query finds all relationships of type `REVIEWED` that exist between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating > 95** - This line filters the matched relationships to only include those where the `rating` property is greater than 95.
3. **WITH person, movie** - This clause carries over the `person` and `movie` variables for use in the subsequent part of the query.
4. **MATCH (person)-[acted:ACTED_IN]->(movie)** - This line matches relationships of type `ACTED_IN` that exist between the previously matched `person` and `movie` nodes.
5. **RETURN acted.roles** - This line returns the `roles` property from the `ACTED_IN` relationships, which represent the roles of the actors in those movies.

This query effectively identifies highly-rated movies and then returns the roles played by actors in those movies."
Which person directed movies with a total vote count less than 500?,movies,"<explanation>
1. **MATCH** all people who directed movies.
2. **WITH** the person and the sum of votes for all their directed movies.
3. **WHERE** the sum of votes is less than 500.
4. **RETURN** the name of the person.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes < 500
RETURN p.name
```
</explanation>",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes < 500
RETURN p.name","1. **MATCH** all people who directed movies.
2. **WITH** the person and the sum of votes for all their directed movies.
3. **WHERE** the sum of votes is less than 500.
4. **RETURN** the name of the person.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, sum(m.votes) AS totalVotes
WHERE totalVotes < 500
RETURN p.name
```"
Find the titles of movies released between 1990 and 2010 with a rating above 85.,movies,"<explanation>
This Cypher query first matches all `Movie` nodes. Then it filters these nodes to only include movies released between 1990 and 2010 and have a `rating` property on their incoming `REVIEWED` relationships greater than 85. Finally, the query returns the `title` property of these filtered `Movie` nodes. 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released BETWEEN 1990 AND 2010 AND r.rating > 85
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released BETWEEN 1990 AND 2010 AND r.rating > 85
RETURN m.title","This Cypher query first matches all `Movie` nodes. Then it filters these nodes to only include movies released between 1990 and 2010 and have a `rating` property on their incoming `REVIEWED` relationships greater than 85. Finally, the query returns the `title` property of these filtered `Movie` nodes."
List the summaries of reviews with a rating less than 70.,movies,"<explanation>
This query looks for all `REVIEWED` relationships with a rating property less than 70 and returns the summary of those reviews. 

1. **MATCH Clause:** We use `MATCH (p:Person)-[r:REVIEWED]->(m:Movie)` to find all relationships of type `REVIEWED` between nodes of type `Person` and `Movie`. Although we don't need the `Person` or `Movie` information to answer the question, we need to match on these nodes to traverse the `REVIEWED` relationships in the graph.
2. **WHERE Clause:** We use `WHERE r.rating < 70` to filter for `REVIEWED` relationships with a `rating` property less than 70.
3. **RETURN Clause:** We use `RETURN r.summary` to return the `summary` property of the `REVIEWED` relationships that met the filter criteria.

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 70
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 70
RETURN r.summary","This query looks for all `REVIEWED` relationships with a rating property less than 70 and returns the summary of those reviews. 

1. **MATCH Clause:** We use `MATCH (p:Person)-[r:REVIEWED]->(m:Movie)` to find all relationships of type `REVIEWED` between nodes of type `Person` and `Movie`. Although we don't need the `Person` or `Movie` information to answer the question, we need to match on these nodes to traverse the `REVIEWED` relationships in the graph.
2. **WHERE Clause:** We use `WHERE r.rating < 70` to filter for `REVIEWED` relationships with a `rating` property less than 70.
3. **RETURN Clause:** We use `RETURN r.summary` to return the `summary` property of the `REVIEWED` relationships that met the filter criteria."
"What are the names of people who were born after 1960 and acted in a movie with ""The"" in the title?",movies,"<explanation>
This query starts by finding all people born after 1960. Then it matches those people to movies they acted in where the movie title contains ""The"". Finally, it returns the names of the people.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.title CONTAINS 'The'
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.title CONTAINS 'The'
RETURN DISTINCT p.name","This query starts by finding all people born after 1960. Then it matches those people to movies they acted in where the movie title contains ""The"". Finally, it returns the names of the people."
Which person produced the movie with the lowest number of votes?,movies,"<explanation>
1. We need to find the movie with the lowest number of votes.
2. Then we need to find the person who produced that movie.

We can achieve this with the following steps:
1. Find all movies and order them by the number of votes in ascending order (`ORDER BY m.votes ASC`).
2. Use `LIMIT 1` to get the movie with the lowest number of votes.
3. Match the person who produced that movie (`WHERE p.name = PRODUCED(m)`).
4. Return the name of the person.
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie)
WITH m ORDER BY m.votes ASC
LIMIT 1
MATCH (p:Person)-[:PRODUCED]->(m)
RETURN p.name","1. We need to find the movie with the lowest number of votes.
2. Then we need to find the person who produced that movie.

We can achieve this with the following steps:
1. Find all movies and order them by the number of votes in ascending order (`ORDER BY m.votes ASC`).
2. Use `LIMIT 1` to get the movie with the lowest number of votes.
3. Match the person who produced that movie (`WHERE p.name = PRODUCED(m)`).
4. Return the name of the person."
"Find the titles of movies with a tagline containing ""Welcome"".",movies,"<explanation>
This query searches for all movies with the word ""Welcome"" in the tagline. 

1. **MATCH** clause finds all `Movie` nodes.
2. **WHERE** clause filters for `Movie` nodes which have ""Welcome"" in their tagline. 
3. **RETURN** clause returns the titles of the filtered movies. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Welcome'
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Welcome'
RETURN m.title","This query searches for all movies with the word ""Welcome"" in the tagline. 

1. **MATCH** clause finds all `Movie` nodes.
2. **WHERE** clause filters for `Movie` nodes which have ""Welcome"" in their tagline. 
3. **RETURN** clause returns the titles of the filtered movies."
What are the roles of actors in movies released in the year 2003?,movies,"<explanation>
This query starts by finding movies released in 2003. Then, it traverses the ACTED_IN relationships from those movies to find the actors who acted in them. Finally, it returns the titles of the movies and the roles of the actors who acted in those movies.
</explanation>
```cypher
MATCH (m:Movie {released: 2003})<-[ai:ACTED_IN]-(p:Person)
RETURN m.title AS movie, p.name AS actor, ai.roles AS roles
```",Complex Aggregation Queries,"MATCH (m:Movie {released: 2003})<-[ai:ACTED_IN]-(p:Person)
RETURN m.title AS movie, p.name AS actor, ai.roles AS roles","This query starts by finding movies released in 2003. Then, it traverses the ACTED_IN relationships from those movies to find the actors who acted in them. Finally, it returns the titles of the movies and the roles of the actors who acted in those movies."
List the summaries of reviews for movies with a rating greater than 90 and released after 2000.,movies,"<explanation>
1. We start by matching the `Movie` nodes with `released` property greater than 2000.
2. Then, we match the `REVIEWED` relationships related to these movies with `rating` greater than 90.
3. Finally, we return the `summary` property of these relationships.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.rating > 90
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.rating > 90
RETURN r.summary","1. We start by matching the `Movie` nodes with `released` property greater than 2000.
2. Then, we match the `REVIEWED` relationships related to these movies with `rating` greater than 90.
3. Finally, we return the `summary` property of these relationships."
"Which person wrote a movie with ""Matrix"" in the title and was born after 1950?",movies,"<explanation>
This query starts by finding movies with ""Matrix"" in the title. Then it looks for people who have a WROTE relationship with that movie and were born after 1950. Finally, it returns the names of those people. 

1. **MATCH (m:Movie)**: This line searches for all nodes with the label ""Movie"" and assigns them to the variable 'm'.
2. **WHERE m.title CONTAINS 'Matrix'**: This line filters the 'm' nodes by checking if the 'title' property contains ""Matrix.""
3. **MATCH (p:Person)-[:WROTE]->(m)**: This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered ""Movie"" nodes and assigns those ""Person"" nodes to the variable 'p.'
4. **WHERE p.born > 1950**: This line filters the 'p' nodes, keeping only those where the 'born' property is greater than 1950.
5. **RETURN p.name**: This line returns the ""name"" property of the 'p' nodes that have passed through all the filters. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[:WROTE]->(m)
WHERE p.born > 1950
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
MATCH (p:Person)-[:WROTE]->(m)
WHERE p.born > 1950
RETURN p.name","This query starts by finding movies with ""Matrix"" in the title. Then it looks for people who have a WROTE relationship with that movie and were born after 1950. Finally, it returns the names of those people. 

1. **MATCH (m:Movie)**: This line searches for all nodes with the label ""Movie"" and assigns them to the variable 'm'.
2. **WHERE m.title CONTAINS 'Matrix'**: This line filters the 'm' nodes by checking if the 'title' property contains ""Matrix.""
3. **MATCH (p:Person)-[:WROTE]->(m)**: This line looks for ""Person"" nodes that have a ""WROTE"" relationship with the previously filtered ""Movie"" nodes and assigns those ""Person"" nodes to the variable 'p.'
4. **WHERE p.born > 1950**: This line filters the 'p' nodes, keeping only those where the 'born' property is greater than 1950.
5. **RETURN p.name**: This line returns the ""name"" property of the 'p' nodes that have passed through all the filters."
What is the average rating of movies released before 1990 and with less than 500 votes?,movies,"<explanation>
1. We need to find movies released before 1990: `MATCH (m:Movie) WHERE m.released < 1990`.
2. We also need to filter movies with less than 500 votes: `AND m.votes < 500`.
3. We need to get all the ratings for these movies: `WITH m, r.rating AS ratings`.
4. Finally, we can calculate the average of the collected ratings: `RETURN avg(ratings)`.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 1990 AND m.votes < 500
WITH m, r.rating AS ratings
RETURN avg(ratings)
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 1990 AND m.votes < 500
WITH m, r.rating AS ratings
RETURN avg(ratings)
```
",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 1990 AND m.votes < 500
WITH m, r.rating AS ratings
RETURN avg(ratings)","1. We need to find movies released before 1990: `MATCH (m:Movie) WHERE m.released < 1990`.
2. We also need to filter movies with less than 500 votes: `AND m.votes < 500`.
3. We need to get all the ratings for these movies: `WITH m, r.rating AS ratings`.
4. Finally, we can calculate the average of the collected ratings: `RETURN avg(ratings)`.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE m.released < 1990 AND m.votes < 500
WITH m, r.rating AS ratings
RETURN avg(ratings)
```"
"Find the names of people who follow someone who directed a movie with ""The"" in the title.",movies,"<explanation>
1. **Find people who directed a movie with ""The"" in the title:**
   - Match nodes with label ""Person"" and ""Movie"" connected by the ""DIRECTED"" relationship.
   - Filter movies where the title contains ""The"".
2. **Find people who follow those directors:**
   - Traverse the ""FOLLOWS"" relationship from the directors to the followers.
3. **Return the names of the followers:**
   - Return the ""name"" property of the follower nodes.
</explanation>
```cypher
MATCH (follower:Person)-[:FOLLOWS]->(director:Person)-[:DIRECTED]->(m:Movie)
WHERE  m.title CONTAINS 'The'
RETURN DISTINCT follower.name
```",Complex Aggregation Queries,"MATCH (follower:Person)-[:FOLLOWS]->(director:Person)-[:DIRECTED]->(m:Movie)
WHERE  m.title CONTAINS 'The'
RETURN DISTINCT follower.name","1. **Find people who directed a movie with ""The"" in the title:**
   - Match nodes with label ""Person"" and ""Movie"" connected by the ""DIRECTED"" relationship.
   - Filter movies where the title contains ""The"".
2. **Find people who follow those directors:**
   - Traverse the ""FOLLOWS"" relationship from the directors to the followers.
3. **Return the names of the followers:**
   - Return the ""name"" property of the follower nodes."
Which movies were released after 2000 and have a rating below 70?,movies,"<explanation>
This query looks for movies released after 2000 with a rating below 70. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies that have been reviewed and returns the movie node, the review relationship, and the person node.
2. **WHERE m.released > 2000 AND r.rating < 70**: This filters the results to only include movies released after 2000 and have a rating less than 70.
3. **RETURN DISTINCT m.title AS MovieTitle**: This returns the title of each movie that meets the criteria. The DISTINCT keyword is used to avoid duplicate titles in the result set.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.rating < 70
RETURN DISTINCT m.title AS MovieTitle
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released > 2000 AND r.rating < 70
RETURN DISTINCT m.title AS MovieTitle","This query looks for movies released after 2000 with a rating below 70. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies that have been reviewed and returns the movie node, the review relationship, and the person node.
2. **WHERE m.released > 2000 AND r.rating < 70**: This filters the results to only include movies released after 2000 and have a rating less than 70.
3. **RETURN DISTINCT m.title AS MovieTitle**: This returns the title of each movie that meets the criteria. The DISTINCT keyword is used to avoid duplicate titles in the result set."
List the taglines of movies acted in by someone born before 1960.,movies,"<explanation>
1. We need to find all persons that were born before 1960.
2. Then we need to find all the movies these persons acted in.
3. Finally, we return the taglines of those movies.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline","1. We need to find all persons that were born before 1960.
2. Then we need to find all the movies these persons acted in.
3. Finally, we return the taglines of those movies.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline
```"
"What are the roles of actors in movies with ""Matrix"" in the title?",movies,"<explanation>
This Cypher query identifies the roles of actors in movies with ""Matrix"" in the title:

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.title CONTAINS ""Matrix""**: This line filters the found Movie nodes to only include those where the title property contains the string ""Matrix"".
3. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This line looks for relationships of type ""ACTED_IN"" where the start node is a Person (assigned the variable ""p"") and the end node is one of the previously filtered Movie nodes (m).
4. **RETURN m.title, p.name, ai.roles**: This line returns the title of the movie, the name of the person who acted in it, and the roles they had in the movie.

This query effectively combines pattern matching and property filtering to pinpoint the desired information within the graph.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS ""Matrix""
MATCH (p:Person)-[ai:ACTED_IN]->(m)
RETURN m.title, p.name, ai.roles
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title CONTAINS ""Matrix""
MATCH (p:Person)-[ai:ACTED_IN]->(m)
RETURN m.title, p.name, ai.roles","This Cypher query identifies the roles of actors in movies with ""Matrix"" in the title:

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.title CONTAINS ""Matrix""**: This line filters the found Movie nodes to only include those where the title property contains the string ""Matrix"".
3. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This line looks for relationships of type ""ACTED_IN"" where the start node is a Person (assigned the variable ""p"") and the end node is one of the previously filtered Movie nodes (m).
4. **RETURN m.title, p.name, ai.roles**: This line returns the title of the movie, the name of the person who acted in it, and the roles they had in the movie.

This query effectively combines pattern matching and property filtering to pinpoint the desired information within the graph."
Which person directed a movie released in 2003 and born after 1950?,movies,"<explanation>
This query starts by matching all 'Person' nodes with 'born' property greater than 1950. It then traverses through 'DIRECTED' relationships to find 'Movie' nodes released in 2003. Finally, it returns the names of the people who meet the criteria. 
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950 AND m.released = 2003
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950 AND m.released = 2003
RETURN p.name","This query starts by matching all 'Person' nodes with 'born' property greater than 1950. It then traverses through 'DIRECTED' relationships to find 'Movie' nodes released in 2003. Finally, it returns the names of the people who meet the criteria."
"Find the average number of votes for movies with a tagline containing ""end"".",movies,"<explanation>
1. **Find movies with a tagline containing ""end"":** We can use `MATCH (m:Movie)` to find all movie nodes and then use `WHERE` clause with `CONTAINS` to filter movies whose tagline property contains ""end"".
2. **Calculate the average number of votes:** We can use the `avg()` function to compute the average votes for the filtered movies.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN avg(m.votes) AS average_votes
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN avg(m.votes) AS average_votes
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN avg(m.votes) AS average_votes","1. **Find movies with a tagline containing ""end"":** We can use `MATCH (m:Movie)` to find all movie nodes and then use `WHERE` clause with `CONTAINS` to filter movies whose tagline property contains ""end"".
2. **Calculate the average number of votes:** We can use the `avg()` function to compute the average votes for the filtered movies.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN avg(m.votes) AS average_votes
```"
List the names of people who acted in movies with more than 1000 votes and released before 2000.,movies,"<explanation>
This query finds all people who acted in movies released before the year 2000 with more than 1000 votes.
1. **MATCH** the `ACTED_IN` relationship between `Person` and `Movie` nodes.
2. **WHERE** clause filters for `Movie` nodes released before 2000 and having more than 1000 votes.
3. **RETURN** the `name` property of the `Person` nodes.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000 AND m.votes > 1000
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000 AND m.votes > 1000
RETURN DISTINCT p.name","This query finds all people who acted in movies released before the year 2000 with more than 1000 votes.
1. **MATCH** the `ACTED_IN` relationship between `Person` and `Movie` nodes.
2. **WHERE** clause filters for `Movie` nodes released before 2000 and having more than 1000 votes.
3. **RETURN** the `name` property of the `Person` nodes."
"Which person produced ""Speed Racer""?",movies,"<explanation>This query starts with finding the movie with the title ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards to find the person who produced that movie. Finally, it returns the `name` property of that person.
</explanation>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""Speed Racer""})<-[:PRODUCED]-(p:Person)
RETURN p.name","This query starts with finding the movie with the title ""Speed Racer"". Then, it traverses the `PRODUCED` relationship backwards to find the person who produced that movie. Finally, it returns the `name` property of that person."
What are the taglines of movies with a rating greater than 80 and released after 1995?,movies,"<explanation>
This query first finds all the movies that have been rated above 80. It then filters those movies by release year (after 1995). Finally, the query returns the taglines of the remaining movies.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This matches all movies that have been reviewed by a person.
2. **WHERE r.rating > 80 AND m.released > 1995**: This filters the movies to those released after 1995 and rated above 80.
3. **RETURN m.tagline**: This returns the taglines of the filtered movies.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80 AND m.released > 1995
RETURN m.tagline
```
</explanation>",Complex Aggregation Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80 AND m.released > 1995
RETURN m.tagline","This query first finds all the movies that have been rated above 80. It then filters those movies by release year (after 1995). Finally, the query returns the taglines of the remaining movies.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This matches all movies that have been reviewed by a person.
2. **WHERE r.rating > 80 AND m.released > 1995**: This filters the movies to those released after 1995 and rated above 80.
3. **RETURN m.tagline**: This returns the taglines of the filtered movies.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80 AND m.released > 1995
RETURN m.tagline
```"
"Find the titles of movies reviewed with the summary ""An amazing journey"".",movies,"<explanation>This query starts by finding all :REVIEWED relationships with a `summary` property equal to ""An amazing journey.""  Then, it returns the `title` property of all :Movie nodes that are connected to these relationships.
</explanation>
```cypher
MATCH ()-[:REVIEWED {summary: ""An amazing journey""}]->(m:Movie)
RETURN m.title
```",Complex Aggregation Queries,"MATCH ()-[:REVIEWED {summary: ""An amazing journey""}]->(m:Movie)
RETURN m.title","This query starts by finding all :REVIEWED relationships with a `summary` property equal to ""An amazing journey.""  Then, it returns the `title` property of all :Movie nodes that are connected to these relationships."
List the roles of actors in movies directed by someone born before 1960.,movies,"<explanation>
1. **MATCH** the pattern of a person directing a movie with `(p:Person)-[:DIRECTED]->(m:Movie)`
2. **WHERE** the director's birth year (`p.born`) is before 1960
3. **MATCH** the pattern of an actor acting in the same movie with `(a:Person)-[:ACTED_IN]->(m)`
4. **RETURN** the actor's name (`a.name`) and their roles (`r.roles`)
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN a.name, a.roles
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN a.name, a.roles","1. **MATCH** the pattern of a person directing a movie with `(p:Person)-[:DIRECTED]->(m:Movie)`
2. **WHERE** the director's birth year (`p.born`) is before 1960
3. **MATCH** the pattern of an actor acting in the same movie with `(a:Person)-[:ACTED_IN]->(m)`
4. **RETURN** the actor's name (`a.name`) and their roles (`r.roles`)"
Which person wrote a movie released before 1990 and with more than 500 votes?,movies,"<explanation>
1. **MATCH** the relevant nodes and relationships: We need to find a `Person` who `WROTE` a `Movie`.
2. **WHERE** clause to filter the movies: The movie should have `released` property less than 1990 and `votes` property greater than 500.
3. **RETURN** the `name` of the `Person`. 

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 1990 AND m.votes > 500
RETURN p.name
```
</explanation>",Complex Aggregation Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 1990 AND m.votes > 500
RETURN p.name","1. **MATCH** the relevant nodes and relationships: We need to find a `Person` who `WROTE` a `Movie`.
2. **WHERE** clause to filter the movies: The movie should have `released` property less than 1990 and `votes` property greater than 500.
3. **RETURN** the `name` of the `Person`. 

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 1990 AND m.votes > 500
RETURN p.name
```"
"What is the average rating of movies with a tagline containing ""limits""?",movies,"<explanation>
1. We need to find movies that contain ""limits"" in their tagline.
2. We will then calculate the average rating of those movies using the `avg` function.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
WITH avg(m.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
WITH avg(m.rating) AS average_rating
RETURN average_rating
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
WITH avg(m.rating) AS average_rating
RETURN average_rating","1. We need to find movies that contain ""limits"" in their tagline.
2. We will then calculate the average rating of those movies using the `avg` function.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
WITH avg(m.rating) AS average_rating
RETURN average_rating
```"
"Find the names of people who follow someone who produced a movie with ""Speed"" in the title.",movies,"<explanation>
1. **MATCH (person1)-[:FOLLOWS]->(person2)-[:PRODUCED]->(movie)**: This matches all paths where `person1` follows `person2` who produced a `movie`.
2. **WHERE movie.title CONTAINS 'Speed'**: This filters the results to only include movies with ""Speed"" in the title.
3. **RETURN DISTINCT person1.name**: This returns the names of the `person1` nodes, which are the people who follow someone who produced a movie with ""Speed"" in the title. The `DISTINCT` keyword ensures that each name is only returned once. 

</explanation>
```cypher
MATCH (person1)-[:FOLLOWS]->(person2)-[:PRODUCED]->(movie)
WHERE movie.title CONTAINS 'Speed'
RETURN DISTINCT person1.name
```",Complex Aggregation Queries,"MATCH (person1)-[:FOLLOWS]->(person2)-[:PRODUCED]->(movie)
WHERE movie.title CONTAINS 'Speed'
RETURN DISTINCT person1.name","1. **MATCH (person1)-[:FOLLOWS]->(person2)-[:PRODUCED]->(movie)**: This matches all paths where `person1` follows `person2` who produced a `movie`.
2. **WHERE movie.title CONTAINS 'Speed'**: This filters the results to only include movies with ""Speed"" in the title.
3. **RETURN DISTINCT person1.name**: This returns the names of the `person1` nodes, which are the people who follow someone who produced a movie with ""Speed"" in the title. The `DISTINCT` keyword ensures that each name is only returned once."
List the taglines of movies acted in by someone born after 1965.,movies,"<explanation>
This query first finds all people born after 1965. Then, it matches those people to movies they have ACTED_IN. Finally, it returns the distinct taglines of those movies. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1965
RETURN DISTINCT m.tagline
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1965
RETURN DISTINCT m.tagline","This query first finds all people born after 1965. Then, it matches those people to movies they have ACTED_IN. Finally, it returns the distinct taglines of those movies."
What are the roles of actors in movies with less than 500 votes?,movies,"<explanation>
This Cypher query identifies movies with less than 500 votes and returns the titles of those movies along with the actors and their respective roles.

1. **MATCH Clause**: We start by matching two nodes: `(m:Movie)` and `(p:Person)`. These nodes are connected by the relationship `ACTED_IN`.
2. **WHERE Clause**: We filter the movies based on the number of votes using `m.votes < 500`.
3. **RETURN Clause**: We return the following:
   - `m.title` as `movieTitle`: The title of the movie.
   - `p.name` as `actorName`: The name of the actor.
   - `r.roles` as `roles`: The roles played by the actor in the movie.

This query effectively retrieves the desired information by first finding all movies with less than 500 votes and then traversing the `ACTED_IN` relationship to get the actors and their roles in those movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person)
WHERE m.votes < 500
RETURN m.title AS movieTitle, p.name AS actorName, r.roles AS roles
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person)
WHERE m.votes < 500
RETURN m.title AS movieTitle, p.name AS actorName, r.roles AS roles","This Cypher query identifies movies with less than 500 votes and returns the titles of those movies along with the actors and their respective roles.

1. **MATCH Clause**: We start by matching two nodes: `(m:Movie)` and `(p:Person)`. These nodes are connected by the relationship `ACTED_IN`.
2. **WHERE Clause**: We filter the movies based on the number of votes using `m.votes < 500`.
3. **RETURN Clause**: We return the following:
   - `m.title` as `movieTitle`: The title of the movie.
   - `p.name` as `actorName`: The name of the actor.
   - `r.roles` as `roles`: The roles played by the actor in the movie.

This query effectively retrieves the desired information by first finding all movies with less than 500 votes and then traversing the `ACTED_IN` relationship to get the actors and their roles in those movies."
Which person directed a movie with a rating less than 60?,movies,"<explanation>
This query starts by matching all `Person` nodes that have a `DIRECTED` relationship with a `Movie` node. The `WHERE` clause then filters for `Movie` nodes that have a `rating` property less than 60 on the `REVIEWED` relationship. Finally, the query returns the `name` of the `Person` nodes who directed those movies.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
RETURN p.name","This query starts by matching all `Person` nodes that have a `DIRECTED` relationship with a `Movie` node. The `WHERE` clause then filters for `Movie` nodes that have a `rating` property less than 60 on the `REVIEWED` relationship. Finally, the query returns the `name` of the `Person` nodes who directed those movies."
Find the titles of movies with a released year before 1990.,movies,"<explanation>
This query looks for all movies with a `released` property less than 1990 and returns their titles.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies to only include those released before 1990. 
3. **RETURN Clause:** We return the `title` property of the movies that meet our criteria. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.released < 1990
RETURN m.title","This query looks for all movies with a `released` property less than 1990 and returns their titles.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies to only include those released before 1990. 
3. **RETURN Clause:** We return the `title` property of the movies that meet our criteria."
"What are the summaries of reviews for ""The Matrix Revolutions""?",movies,"<explanation>
1. **Match the movie node:** Start by finding the ""The Matrix Revolutions"" movie node using the `MATCH` clause and filtering by its title.
2. **Match the reviewed relationship:** Traverse the `REVIEWED` relationship outgoing from the movie node to the person nodes who reviewed it.
3. **Return the summaries:** Return the `summary` property of the `REVIEWED` relationship for each review.

This query leverages the relationships in the graph to efficiently retrieve the requested information.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary","1. **Match the movie node:** Start by finding the ""The Matrix Revolutions"" movie node using the `MATCH` clause and filtering by its title.
2. **Match the reviewed relationship:** Traverse the `REVIEWED` relationship outgoing from the movie node to the person nodes who reviewed it.
3. **Return the summaries:** Return the `summary` property of the `REVIEWED` relationship for each review.

This query leverages the relationships in the graph to efficiently retrieve the requested information."
List the names of people born before 1960 who acted in a movie with a rating greater than 90.,movies,"<explanation>
This query starts by finding all people born before 1960. Then it traverses the ACTED_IN relationships to movies. For each of these movies, it checks if there's a REVIEWED relationship with a rating property greater than 90. Finally, it returns the distinct names of the people who meet these criteria. 

Here's a breakdown of the query:

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()**: This matches people who acted in movies that have been reviewed.
2. **WHERE p.born < 1960 AND r.rating > 90**: This filters for people born before 1960 and movies with a rating greater than 90.
3. **RETURN DISTINCT p.name**: This returns the unique names of the people who meet the criteria.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born < 1960 AND r.rating > 90
RETURN DISTINCT p.name
```",Complex Aggregation Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born < 1960 AND r.rating > 90
RETURN DISTINCT p.name","This query starts by finding all people born before 1960. Then it traverses the ACTED_IN relationships to movies. For each of these movies, it checks if there's a REVIEWED relationship with a rating property greater than 90. Finally, it returns the distinct names of the people who meet these criteria. 

Here's a breakdown of the query:

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()**: This matches people who acted in movies that have been reviewed.
2. **WHERE p.born < 1960 AND r.rating > 90**: This filters for people born before 1960 and movies with a rating greater than 90.
3. **RETURN DISTINCT p.name**: This returns the unique names of the people who meet the criteria."
"Which person produced a movie with ""Matrix"" in the title and was born after 1950?",movies,"<explanation>
This query starts by finding movies with ""Matrix"" in the title. Then, it traverses the PRODUCED relationships from those movies to find the people who produced them. Finally, it filters these people based on their birth year being after 1950.
</explanation>
```cypher
MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.title CONTAINS 'Matrix' AND p.born > 1950
RETURN p.name
```",Complex Aggregation Queries,"MATCH (m:Movie)<-[:PRODUCED]-(p:Person)
WHERE m.title CONTAINS 'Matrix' AND p.born > 1950
RETURN p.name","This query starts by finding movies with ""Matrix"" in the title. Then, it traverses the PRODUCED relationships from those movies to find the people who produced them. Finally, it filters these people based on their birth year being after 1950."
What is the average rating of movies released in the year 2003?,movies,"<explanation>
1. **Find movies released in 2003:** We start by matching all `Movie` nodes with the `released` property equal to 2003.
2. **Match reviewed relationships:** We then traverse the `REVIEWED` relationships originating from any `Person` nodes to these movies.
3. **Calculate the average rating:** We use the `avg` aggregation function on the `rating` property of the `REVIEWED` relationships to calculate the average rating.

This query efficiently leverages relationships and properties within the graph to pinpoint the average rating of movies released in 2003.
</explanation>
```cypher
MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-()
RETURN avg(r.rating) AS average_rating
```",Complex Aggregation Queries,"MATCH (m:Movie {released: 2003})<-[r:REVIEWED]-()
RETURN avg(r.rating) AS average_rating","1. **Find movies released in 2003:** We start by matching all `Movie` nodes with the `released` property equal to 2003.
2. **Match reviewed relationships:** We then traverse the `REVIEWED` relationships originating from any `Person` nodes to these movies.
3. **Calculate the average rating:** We use the `avg` aggregation function on the `rating` property of the `REVIEWED` relationships to calculate the average rating.

This query efficiently leverages relationships and properties within the graph to pinpoint the average rating of movies released in 2003."
Find the names of people who follow Carrie-Anne Moss.,movies,"<explanation>
This query starts with finding the Person node with the name 'Carrie-Anne Moss'. Then, it traverses the FOLLOWS relationships outgoing from that node to other Person nodes. Finally, it returns the names of those people. 
</explanation>
```cypher
MATCH (p:Person {name: 'Carrie-Anne Moss'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name
```",Complex Aggregation Queries,"MATCH (p:Person {name: 'Carrie-Anne Moss'})-[:FOLLOWS]->(follower:Person)
RETURN follower.name","This query starts with finding the Person node with the name 'Carrie-Anne Moss'. Then, it traverses the FOLLOWS relationships outgoing from that node to other Person nodes. Finally, it returns the names of those people."
"Which movies have a tagline containing ""beginning""?",movies,"<explanation>This query looks for all movies that contain the word ""beginning"" in their tagline. 

1. **MATCH**: We start by matching all Movie nodes.
2. **WHERE**: We filter the movies to only include those whose tagline contains ""beginning"".
3. **RETURN**: We return the titles of the movies that meet this criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'beginning'
RETURN m.title
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'beginning'
RETURN m.title","This query looks for all movies that contain the word ""beginning"" in their tagline. 

1. **MATCH**: We start by matching all Movie nodes.
2. **WHERE**: We filter the movies to only include those whose tagline contains ""beginning"".
3. **RETURN**: We return the titles of the movies that meet this criteria."
"List the roles of Laurence Fishburne in ""The Matrix Revolutions"".",movies,"<explanation>
This query starts with finding the movie with the title ""The Matrix Revolutions"". Then, it traverses the ACTED_IN relationship to find the person named ""Laurence Fishburne"". Finally, it returns the roles associated with that ACTED_IN relationship. 

1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})**: This part of the query finds the movie node with the title ""The Matrix Revolutions"".
2. **MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m)**: This part finds the person node with the name ""Laurence Fishburne"" who has an outgoing ACTED_IN relationship to the movie node (m) found in the previous step. 
3. **RETURN p.roles**: This part returns the `roles` property of the ACTED_IN relationship, which represents the roles played by Laurence Fishburne in ""The Matrix Revolutions"".
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m)
RETURN p.roles
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m)
RETURN p.roles","This query starts with finding the movie with the title ""The Matrix Revolutions"". Then, it traverses the ACTED_IN relationship to find the person named ""Laurence Fishburne"". Finally, it returns the roles associated with that ACTED_IN relationship. 

1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})**: This part of the query finds the movie node with the title ""The Matrix Revolutions"".
2. **MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m)**: This part finds the person node with the name ""Laurence Fishburne"" who has an outgoing ACTED_IN relationship to the movie node (m) found in the previous step. 
3. **RETURN p.roles**: This part returns the `roles` property of the ACTED_IN relationship, which represents the roles played by Laurence Fishburne in ""The Matrix Revolutions""."
"What is the release year of ""Speed Racer""?",movies,"<explanation>
This query first matches the movie with the title ""Speed Racer."" Then, it returns the `released` property of that movie. 
<br/>
```cypher
MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released
```
",Complex Aggregation Queries,"MATCH (m:Movie {title: ""Speed Racer""})
RETURN m.released",
"Find the number of votes for ""The Matrix Revolutions"".",movies,"<explanation>
This query looks for a Movie node with the title ""The Matrix Revolutions"" and returns the number of votes it has. 

1. **MATCH (m:Movie)** - This line searches for all nodes with the label ""Movie"" and assigns them the variable `m`.
2. **WHERE m.title = ""The Matrix Revolutions""** - This line filters the results from the previous line, keeping only the Movie nodes whose title property is ""The Matrix Revolutions"".
3. **RETURN m.votes** - This line returns the value of the votes property for the Movie node that matched the criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title = ""The Matrix Revolutions""
RETURN m.votes
```",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.title = ""The Matrix Revolutions""
RETURN m.votes","This query looks for a Movie node with the title ""The Matrix Revolutions"" and returns the number of votes it has. 

1. **MATCH (m:Movie)** - This line searches for all nodes with the label ""Movie"" and assigns them the variable `m`.
2. **WHERE m.title = ""The Matrix Revolutions""** - This line filters the results from the previous line, keeping only the Movie nodes whose title property is ""The Matrix Revolutions"".
3. **RETURN m.votes** - This line returns the value of the votes property for the Movie node that matched the criteria."
Which person was born in 1952?,movies,"<explanation>This query starts with all nodes with the label 'Person' and then filters them by those with the property 'born' equal to 1952. Finally, the query returns the 'name' property of these filtered nodes. </explanation>
```cypher
MATCH (p:Person {born: 1952})
RETURN p.name
```",Complex Aggregation Queries,"MATCH (p:Person {born: 1952})
RETURN p.name","This query starts with all nodes with the label 'Person' and then filters them by those with the property 'born' equal to 1952. Finally, the query returns the 'name' property of these filtered nodes."
"List the names of people who acted in movies with a tagline containing ""Speed"".",movies,"<explanation>
1. **Find movies with ""Speed"" in the tagline:** 
   - Start with `(m:Movie)` to look at all movie nodes.
   - Filter these movies using `WHERE m.tagline CONTAINS ""Speed""` to only keep those with ""Speed"" in their tagline.
2. **Find people who acted in those movies:**
   - From the filtered movies, traverse the `ACTED_IN` relationship backwards using `(p:Person)-[:ACTED_IN]->(m)`. This will give us the (p:Person) nodes we're looking for.
3. **Return the names of the actors:**
   - Finally `RETURN p.name` to output the names of the found people.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Speed""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Speed""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```
",Complex Aggregation Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Speed""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name","1. **Find movies with ""Speed"" in the tagline:** 
   - Start with `(m:Movie)` to look at all movie nodes.
   - Filter these movies using `WHERE m.tagline CONTAINS ""Speed""` to only keep those with ""Speed"" in their tagline.
2. **Find people who acted in those movies:**
   - From the filtered movies, traverse the `ACTED_IN` relationship backwards using `(p:Person)-[:ACTED_IN]->(m)`. This will give us the (p:Person) nodes we're looking for.
3. **Return the names of the actors:**
   - Finally `RETURN p.name` to output the names of the found people.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS ""Speed""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
```"
"What is the tagline of ""The Matrix Revolutions""?",movies,"<explanation>
This query looks for a Movie node with the title ""The Matrix Revolutions"" and then returns its tagline. 
1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})**: This line searches for a node with the label ""Movie"" and the property ""title"" set to ""The Matrix Revolutions"". The node is aliased as `m` for easier reference.
2. **RETURN m.tagline**: This line retrieves the value of the ""tagline"" property from the `m` movie node.

</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
RETURN m.tagline
```",Complex Aggregation Queries,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
RETURN m.tagline","This query looks for a Movie node with the title ""The Matrix Revolutions"" and then returns its tagline. 
1. **MATCH (m:Movie {title: ""The Matrix Revolutions""})**: This line searches for a node with the label ""Movie"" and the property ""title"" set to ""The Matrix Revolutions"". The node is aliased as `m` for easier reference.
2. **RETURN m.tagline**: This line retrieves the value of the ""tagline"" property from the `m` movie node."
"List the names of the people who acted in ""The Matrix"".",movies,"<explanation>This query starts with finding the movie titled ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the actors. Finally, it returns the names of those actors.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[:ACTED_IN]-(p:Person)
RETURN p.name
```
",Verbose query,"MATCH (m:Movie {title: ""The Matrix""})<-[:ACTED_IN]-(p:Person)
RETURN p.name","This query starts with finding the movie titled ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the actors. Finally, it returns the names of those actors."
"Who directed ""Speed Racer""?",movies,"<explanation>This query looks for a Movie node with the title ""Speed Racer"" and then returns the name of any Person nodes that have a DIRECTED relationship with it.
</explanation>
```cypher
MATCH (m:Movie {title: 'Speed Racer'})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Verbose query,"MATCH (m:Movie {title: 'Speed Racer'})<-[:DIRECTED]-(p:Person)
RETURN p.name","This query looks for a Movie node with the title ""Speed Racer"" and then returns the name of any Person nodes that have a DIRECTED relationship with it."
"What are the roles Keanu Reeves played in ""Something's Gotta Give""?",movies,"<explanation>
1. We need to find the movie with the title ""Something's Gotta Give"".
2. We need to find the person named ""Keanu Reeves"".
3. We need to traverse the `ACTED_IN` relationship between ""Keanu Reeves"" and ""Something's Gotta Give"" to get the `roles` property. 

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```",Verbose query,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles","1. We need to find the movie with the title ""Something's Gotta Give"".
2. We need to find the person named ""Keanu Reeves"".
3. We need to traverse the `ACTED_IN` relationship between ""Keanu Reeves"" and ""Something's Gotta Give"" to get the `roles` property. 

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[ai:ACTED_IN]-(p:Person {name: ""Keanu Reeves""})
RETURN ai.roles
```"
"What is the tagline of the movie ""The Matrix""?",movies,"<explanation>
This query finds the movie with the title ""The Matrix"" and returns its tagline.

1. **MATCH Clause**: We use the `MATCH` clause to find the movie with the title ""The Matrix"". 
2. **RETURN Clause**: We use the `RETURN` clause to specify that we want to return the `tagline` property of the movie.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
RETURN m.tagline
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
RETURN m.tagline
```",Verbose query,"MATCH (m:Movie {title: ""The Matrix""})
RETURN m.tagline","This query finds the movie with the title ""The Matrix"" and returns its tagline.

1. **MATCH Clause**: We use the `MATCH` clause to find the movie with the title ""The Matrix"". 
2. **RETURN Clause**: We use the `RETURN` clause to specify that we want to return the `tagline` property of the movie.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
RETURN m.tagline
```"
Which movies were produced by Joel Silver?,movies,"<explanation>
1. We need to find the `Person` node with the `name` ""Joel Silver"".
2. Then, we need to traverse the `PRODUCED` relationships outgoing from that node to the `Movie` nodes.
3. Finally, we will return the `title` property of those `Movie` nodes.
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title
```",Verbose query,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title","1. We need to find the `Person` node with the `name` ""Joel Silver"".
2. Then, we need to traverse the `PRODUCED` relationships outgoing from that node to the `Movie` nodes.
3. Finally, we will return the `title` property of those `Movie` nodes."
"Who wrote ""Something's Gotta Give""?",movies,"<explanation>
1. We need to find a `Movie` node with the title ""Something's Gotta Give"".
2. We need to traverse the `WROTE` relationship backwards from that `Movie` node to the `Person` node who wrote it.
3. We need to return the `name` property of that `Person` node.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:WROTE]-(p:Person)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:WROTE]-(p:Person)
RETURN p.name
```",Verbose query,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:WROTE]-(p:Person)
RETURN p.name","1. We need to find a `Movie` node with the title ""Something's Gotta Give"".
2. We need to traverse the `WROTE` relationship backwards from that `Movie` node to the `Person` node who wrote it.
3. We need to return the `name` property of that `Person` node.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:WROTE]-(p:Person)
RETURN p.name
```"
"What is the release year of the movie ""Speed Racer""?",movies,"<explanation>
This query starts by matching the movie node with the title ""Speed Racer"", then it returns the released property of that movie node. 
</explanation>
```cypher
MATCH (m:Movie {title: 'Speed Racer'})
RETURN m.released
```",Verbose query,"MATCH (m:Movie {title: 'Speed Racer'})
RETURN m.released","This query starts by matching the movie node with the title ""Speed Racer"", then it returns the released property of that movie node."
"How many votes did ""Something's Gotta Give"" receive?",movies,"<explanation>
This Cypher query looks for a movie with the title ""Something's Gotta Give"", and then returns the number of votes associated with that movie. 

1. **MATCH Clause:** We use `MATCH (m:Movie {title: ""Something's Gotta Give""})` to find the movie node with the title ""Something's Gotta Give"". 
2. **RETURN Clause:**  We then use `RETURN m.votes` to return the value of the `votes` property for that movie.

</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
RETURN m.votes
```",Verbose query,"MATCH (m:Movie {title: ""Something's Gotta Give""})
RETURN m.votes","This Cypher query looks for a movie with the title ""Something's Gotta Give"", and then returns the number of votes associated with that movie. 

1. **MATCH Clause:** We use `MATCH (m:Movie {title: ""Something's Gotta Give""})` to find the movie node with the title ""Something's Gotta Give"". 
2. **RETURN Clause:**  We then use `RETURN m.votes` to return the value of the `votes` property for that movie."
"Who directed ""Something's Gotta Give""?",movies,"<explanation>
This query starts by finding the movie with the title ""Something's Gotta Give"". Then, it traverses the `DIRECTED` relationship from that movie node to the person node who directed it. Finally, it returns the `name` property of that person node.
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:DIRECTED]-(p:Person)
RETURN p.name
```",Verbose query,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[:DIRECTED]-(p:Person)
RETURN p.name","This query starts by finding the movie with the title ""Something's Gotta Give"". Then, it traverses the `DIRECTED` relationship from that movie node to the person node who directed it. Finally, it returns the `name` property of that person node."
Find the movies with votes between 1000 and 5000.,movies,"<explanation>
This query looks for all movies with a number of votes between 1000 and 5000. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes >= 1000 AND m.votes <= 5000**: This line filters the matched movies to only include those where the value of the `votes` property is between 1000 and 5000 (inclusive).
3. **RETURN m**: This line returns the movie nodes that meet the criteria.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes >= 1000 AND m.votes <= 5000
RETURN m
```",Verbose query,"MATCH (m:Movie)
WHERE m.votes >= 1000 AND m.votes <= 5000
RETURN m","This query looks for all movies with a number of votes between 1000 and 5000. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes >= 1000 AND m.votes <= 5000**: This line filters the matched movies to only include those where the value of the `votes` property is between 1000 and 5000 (inclusive).
3. **RETURN m**: This line returns the movie nodes that meet the criteria."
List the people born after 1960 who acted in movies released before 2000.,movies,"<explanation>
This query starts by matching all people born after 1960. Then it traverses the `ACTED_IN` relationships to movies released before 2000. Finally, it returns the names of the actors.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.released < 2000
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.released < 2000
RETURN DISTINCT p.name","This query starts by matching all people born after 1960. Then it traverses the `ACTED_IN` relationships to movies released before 2000. Finally, it returns the names of the actors."
What are the titles of movies directed by Lana Wachowski?,movies,"<explanation>
This query starts with finding the person node with the name ""Lana Wachowski"", then traverses the `DIRECTED` relationship to find all movies directed by her. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)** - This matches the pattern of a Person node with the name ""Lana Wachowski"" having a DIRECTED relationship to a Movie node.
2. **RETURN m.title** - This returns the title property of each matched Movie node. 
</explanation>
```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title
```",Verbose query,"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title","This query starts with finding the person node with the name ""Lana Wachowski"", then traverses the `DIRECTED` relationship to find all movies directed by her. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)** - This matches the pattern of a Person node with the name ""Lana Wachowski"" having a DIRECTED relationship to a Movie node.
2. **RETURN m.title** - This returns the title property of each matched Movie node."
Find all movies released in 1999.,movies,"<explanation>This query looks for all movies with the property  'released'  set to 1999.
- It starts by matching all 'Movie' nodes.
- Then, it filters these nodes, keeping only those where the 'released' property is equal to 1999.
- Finally, it returns the titles of the movies that satisfy the conditions.</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 1999
RETURN m.title
```",Verbose query,"MATCH (m:Movie)
WHERE m.released = 1999
RETURN m.title","This query looks for all movies with the property  'released'  set to 1999.
- It starts by matching all 'Movie' nodes.
- Then, it filters these nodes, keeping only those where the 'released' property is equal to 1999.
- Finally, it returns the titles of the movies that satisfy the conditions."
List the people who produced movies with more than 1000 votes.,movies,"<explanation>
This Cypher query identifies people who produced movies with over 1000 votes.

1. **Match PRODUCED relationships**: It starts by finding all relationships of type PRODUCED connecting a Person node to a Movie node.
   ```cypher
   MATCH (p:Person)-[:PRODUCED]->(m:Movie)
   ```

2. **Filter on movie votes**: It filters these relationships to only include those where the Movie's `votes` property is greater than 1000.
   ```cypher
   WHERE m.votes > 1000
   ```

3. **Return the names of the people**:  It returns the distinct `name` properties of the Person nodes connected to these filtered relationships.
   ```cypher
   RETURN DISTINCT p.name
   ```

In essence, this query finds all people who have produced movies with more than 1000 votes and returns their names.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.votes > 1000
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
   ```

2. **Filter on movie votes**: It filters these relationships to only include those where the Movie's `votes` property is greater than 1000.
   ```cypher
   WHERE m.votes > 1000
   ```

3. **Return the names of the people**:  It returns the distinct `name` properties of the Person nodes connected to these filtered relationships.
   ```cypher
   RETURN DISTINCT p.name
   ```

In essence, this query finds all people who have produced movies with more than 1000 votes and returns their names.
</explanation>","This Cypher query identifies people who produced movies with over 1000 votes.

1. **Match PRODUCED relationships**: It starts by finding all relationships of type PRODUCED connecting a Person node to a Movie node.
   ```cypher
   MATCH (p:Person)-[:PRODUCED]->(m:Movie)
   ```

2. **Filter on movie votes**: It filters these relationships to only include those where the Movie's `votes` property is greater than 1000.
   ```cypher
   WHERE m.votes > 1000
   ```

3. **Return the names of the people**:  It returns the distinct `name` properties of the Person nodes connected to these filtered relationships.
   ```cypher
   RETURN DISTINCT p.name
   ```

In essence, this query finds all people who have produced movies with more than 1000 votes and returns their names."
What are the taglines of movies released after 2005?,movies,"<explanation>
This Cypher query locates all movies released after 2005 and returns their taglines. 

1. **MATCH (m:Movie)**: This part of the query searches for all nodes with the label ""Movie"" and assigns them to the variable ""m"".
2. **WHERE m.released > 2005**: This line filters the previously matched ""Movie"" nodes, keeping only those where the property ""released"" is greater than 2005.
3. **RETURN m.tagline**: Finally, the query returns the value of the property ""tagline"" for each of the remaining ""Movie"" nodes. 

Therefore, the query efficiently retrieves the taglines of all movies released after 2005.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2005
RETURN m.tagline
```",Verbose query,"MATCH (m:Movie)
WHERE m.released > 2005
RETURN m.tagline","This Cypher query locates all movies released after 2005 and returns their taglines. 

1. **MATCH (m:Movie)**: This part of the query searches for all nodes with the label ""Movie"" and assigns them to the variable ""m"".
2. **WHERE m.released > 2005**: This line filters the previously matched ""Movie"" nodes, keeping only those where the property ""released"" is greater than 2005.
3. **RETURN m.tagline**: Finally, the query returns the value of the property ""tagline"" for each of the remaining ""Movie"" nodes. 

Therefore, the query efficiently retrieves the taglines of all movies released after 2005."
Which people acted in movies with less than 100 votes?,movies,"<explanation>
1. **Start with the ""Person"" node:** `MATCH (p:Person)`
2. **Traverse the ""ACTED_IN"" relationship:** `-[:ACTED_IN]->(m:Movie)`
3. **Filter movies with less than 100 votes:** `WHERE m.votes < 100`
4. **Return the names of the people:** `RETURN DISTINCT p.name`

This query starts with all people, traverses to the movies they acted in, filters those movies to only include ones with less than 100 votes, and then returns the names of the actors. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.name","1. **Start with the ""Person"" node:** `MATCH (p:Person)`
2. **Traverse the ""ACTED_IN"" relationship:** `-[:ACTED_IN]->(m:Movie)`
3. **Filter movies with less than 100 votes:** `WHERE m.votes < 100`
4. **Return the names of the people:** `RETURN DISTINCT p.name`

This query starts with all people, traverses to the movies they acted in, filters those movies to only include ones with less than 100 votes, and then returns the names of the actors."
Find the movies released between 1980 and 2000 with more than 2000 votes.,movies,"<explanation>
1. We start by matching all `Movie` nodes.
2. Then, we filter these movies based on the `released` property to be between 1980 and 2000 and `votes` property to be greater than 2000.
3. Finally, we return the `title` of the movies that meet these criteria. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 2000
RETURN m.title
```",Verbose query,"MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 2000
RETURN m.title","1. We start by matching all `Movie` nodes.
2. Then, we filter these movies based on the `released` property to be between 1980 and 2000 and `votes` property to be greater than 2000.
3. Finally, we return the `title` of the movies that meet these criteria."
List the names of people born before 1960 who directed a movie.,movies,"<explanation>
This query starts by matching all Person nodes with a birth year before 1960. Then it traverses the DIRECTED relationships to find movies directed by those people. Finally, it returns the names of the people. 

1. **MATCH (p:Person)**: This line starts by matching all nodes with the label ""Person"" and assigns them the variable ""p"". 
2. **WHERE p.born < 1960**: This line filters the matched Person nodes to only include those where the ""born"" property is less than 1960.
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This line matches all ""DIRECTED"" relationships going out from the filtered Person nodes to Movie nodes.
4. **RETURN DISTINCT p.name**: This line returns the distinct ""name"" property of the people who matched the criteria.

</explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN DISTINCT p.name","This query starts by matching all Person nodes with a birth year before 1960. Then it traverses the DIRECTED relationships to find movies directed by those people. Finally, it returns the names of the people. 

1. **MATCH (p:Person)**: This line starts by matching all nodes with the label ""Person"" and assigns them the variable ""p"". 
2. **WHERE p.born < 1960**: This line filters the matched Person nodes to only include those where the ""born"" property is less than 1960.
3. **MATCH (p)-[:DIRECTED]->(m:Movie)**: This line matches all ""DIRECTED"" relationships going out from the filtered Person nodes to Movie nodes.
4. **RETURN DISTINCT p.name**: This line returns the distinct ""name"" property of the people who matched the criteria."
"What are the roles of people who acted in ""The Matrix""?",movies,"<explanation>
This query starts with finding the movie with the title ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the people who acted in it. Finally, it returns the names of those people and their roles in the movie.

1. **MATCH (m:Movie {title: ""The Matrix""})** - This finds the movie node with the title ""The Matrix"".
2. **MATCH (p:Person)-[:ACTED_IN {roles: roles}]->(m)** - This finds all people who acted in the movie and captures their roles in the ""roles"" variable.
3. **RETURN p.name AS actorName, roles** - This returns the name of each actor and their roles in the movie.

</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN {roles: roles}]->(m)
RETURN p.name AS actorName, roles
```",Verbose query,"MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN {roles: roles}]->(m)
RETURN p.name AS actorName, roles","This query starts with finding the movie with the title ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the people who acted in it. Finally, it returns the names of those people and their roles in the movie.

1. **MATCH (m:Movie {title: ""The Matrix""})** - This finds the movie node with the title ""The Matrix"".
2. **MATCH (p:Person)-[:ACTED_IN {roles: roles}]->(m)** - This finds all people who acted in the movie and captures their roles in the ""roles"" variable.
3. **RETURN p.name AS actorName, roles** - This returns the name of each actor and their roles in the movie."
Which movies were produced by people born before 1955?,movies,"<explanation>
1. **Find the people born before 1955:** We need to locate all `Person` nodes where the `born` property is less than 1955.
2. **Find the movies produced by these people:**  We need to traverse the `PRODUCED` relationship from those `Person` nodes to `Movie` nodes.
3. **Return the titles of the movies:** We'll use `RETURN` to output the `title` property of each found `Movie`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title
```",Verbose query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title","1. **Find the people born before 1955:** We need to locate all `Person` nodes where the `born` property is less than 1955.
2. **Find the movies produced by these people:**  We need to traverse the `PRODUCED` relationship from those `Person` nodes to `Movie` nodes.
3. **Return the titles of the movies:** We'll use `RETURN` to output the `title` property of each found `Movie`.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1955
RETURN m.title
```"
What are the taglines of the movies Keanu Reeves acted in?,movies,"<explanation>
This query starts with finding the node with the name ""Keanu Reeves"" and then traverses the ACTED_IN relationships to the related movies. Then, it retrieves the taglines of these movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
```",Verbose query,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline","This query starts with finding the node with the name ""Keanu Reeves"" and then traverses the ACTED_IN relationships to the related movies. Then, it retrieves the taglines of these movies."
Find all movies released before 1995.,movies,"<explanation>This query looks for all movies with a `released` property value less than 1995.
- It starts by matching all 'Movie' nodes.
- It filters these nodes based on the `released` property being less than 1995. 
- Finally, it returns the `title` of these movies.</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1995
RETURN m.title
```",Verbose query,"MATCH (m:Movie)
WHERE m.released < 1995
RETURN m.title","This query looks for all movies with a `released` property value less than 1995.
- It starts by matching all 'Movie' nodes.
- It filters these nodes based on the `released` property being less than 1995. 
- Finally, it returns the `title` of these movies."
List the people who wrote movies released after 2000.,movies,"<explanation>This query matches all people who have a WROTE relationship with a Movie node. Then it filters these results to only include movies that were released after 2000. Finally, it returns the names of the people who wrote those movies.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released > 2000
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released > 2000
RETURN DISTINCT p.name","This query matches all people who have a WROTE relationship with a Movie node. Then it filters these results to only include movies that were released after 2000. Finally, it returns the names of the people who wrote those movies."
Which people acted in movies directed by Lana Wachowski?,movies,"<explanation>
1. **MATCH** the person with the name ""Lana Wachowski"".
2. **MATCH** movies directed by the person found in the previous step.
3. **MATCH** other people who acted in the same movies.
4. **RETURN** the names of those other people.
</explanation>
```cypher
MATCH (director:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT actor.name
```",Verbose query,"MATCH (director:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m:Movie)
MATCH (actor:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT actor.name","1. **MATCH** the person with the name ""Lana Wachowski"".
2. **MATCH** movies directed by the person found in the previous step.
3. **MATCH** other people who acted in the same movies.
4. **RETURN** the names of those other people."
Find the movies with votes between 500 and 2000.,movies,"<explanation>
This query looks for all movies with a number of votes between 500 and 2000 and returns their title.
- It starts by matching all Movie nodes.
- It filters these nodes, keeping only the movies with votes between 500 and 2000.
- It returns the title of these movies.
</explanation>
```cypher
MATCH (m:Movie)
WHERE 500 <= m.votes <= 2000
RETURN m.title
```",Verbose query,"MATCH (m:Movie)
WHERE 500 <= m.votes <= 2000
RETURN m.title","This query looks for all movies with a number of votes between 500 and 2000 and returns their title.
- It starts by matching all Movie nodes.
- It filters these nodes, keeping only the movies with votes between 500 and 2000.
- It returns the title of these movies."
List the names of people born after 1970 who produced a movie.,movies,"<explanation>
This query starts with a match on any person node with a birth year after 1970. Then it traverses the PRODUCED relationship to find all the movies they produced. Finally, it returns the names of the people.

1. **MATCH** (p:Person) - Start by matching all ""Person"" nodes.
2. **WHERE** p.born > 1970 - Filter these nodes to only include people born after 1970.
3. **MATCH** (p)-[:PRODUCED]->(m:Movie) -  From the filtered people, match any outgoing ""PRODUCED"" relationships to ""Movie"" nodes.
4. **RETURN** DISTINCT p.name - Return the distinct names of the people who have produced movies. We use DISTINCT to avoid duplicates in case a person produced multiple movies.

```cypher
MATCH (p:Person)
WHERE p.born > 1970
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born > 1970
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)
WHERE p.born > 1970
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN DISTINCT p.name","This query starts with a match on any person node with a birth year after 1970. Then it traverses the PRODUCED relationship to find all the movies they produced. Finally, it returns the names of the people.

1. **MATCH** (p:Person) - Start by matching all ""Person"" nodes.
2. **WHERE** p.born > 1970 - Filter these nodes to only include people born after 1970.
3. **MATCH** (p)-[:PRODUCED]->(m:Movie) -  From the filtered people, match any outgoing ""PRODUCED"" relationships to ""Movie"" nodes.
4. **RETURN** DISTINCT p.name - Return the distinct names of the people who have produced movies. We use DISTINCT to avoid duplicates in case a person produced multiple movies.

```cypher
MATCH (p:Person)
WHERE p.born > 1970
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN DISTINCT p.name
```"
What are the roles of people who acted in movies released in 2003?,movies,"<explanation>
This query starts with all movies released in 2003, then matches to people who acted in those movies, and returns the roles.

1. **Match Movies:** `MATCH (m:Movie) WHERE m.released = 2003` finds all movies released in 2003.
2. **Match Actors:** `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all people who acted in those movies using the `ACTED_IN` relationship.
3. **Return Roles:** `RETURN p.name AS actor, m.title AS movie, collect(r.roles) AS roles` returns the actor's name, the movie title, and a list of their roles in that movie.
    - We use `collect(r.roles)` to aggregate multiple roles into a single list for each actor in each movie.
</explanation>
```cypher
MATCH (m:Movie) WHERE m.released = 2003
MATCH (p:Person)-[r:ACTED_IN]->(m)
RETURN p.name AS actor, m.title AS movie, collect(r.roles) AS roles
```",Verbose query,"MATCH (m:Movie) WHERE m.released = 2003
MATCH (p:Person)-[r:ACTED_IN]->(m)
RETURN p.name AS actor, m.title AS movie, collect(r.roles) AS roles","This query starts with all movies released in 2003, then matches to people who acted in those movies, and returns the roles.

1. **Match Movies:** `MATCH (m:Movie) WHERE m.released = 2003` finds all movies released in 2003.
2. **Match Actors:** `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all people who acted in those movies using the `ACTED_IN` relationship.
3. **Return Roles:** `RETURN p.name AS actor, m.title AS movie, collect(r.roles) AS roles` returns the actor's name, the movie title, and a list of their roles in that movie.
    - We use `collect(r.roles)` to aggregate multiple roles into a single list for each actor in each movie."
Which movies were produced by people born after 1950?,movies,"<explanation>
This query first matches all `Person` nodes where the `born` property is greater than 1950. Then it traverses the `PRODUCED` relationship to find the `Movie` nodes that were produced by those people. Finally, it returns the titles of those movies. 
</explanation>
```cypher
MATCH (p:Person) -[:PRODUCED]-> (m:Movie)
WHERE p.born > 1950
RETURN m.title
```",Verbose query,"MATCH (p:Person) -[:PRODUCED]-> (m:Movie)
WHERE p.born > 1950
RETURN m.title","This query first matches all `Person` nodes where the `born` property is greater than 1950. Then it traverses the `PRODUCED` relationship to find the `Movie` nodes that were produced by those people. Finally, it returns the titles of those movies."
Who directed movies with more than 5000 votes?,movies,"<explanation>
This query finds all directors who have directed at least one movie with more than 5000 votes. 

1. **MATCH**: It starts by finding all directors and the movies they directed. 
2. **WHERE**: It filters these results to only include movies with more than 5000 votes.
3. **RETURN**: Finally, it returns the names of the directors.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 5000
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 5000
RETURN DISTINCT p.name","This query finds all directors who have directed at least one movie with more than 5000 votes. 

1. **MATCH**: It starts by finding all directors and the movies they directed. 
2. **WHERE**: It filters these results to only include movies with more than 5000 votes.
3. **RETURN**: Finally, it returns the names of the directors."
What are the taglines of the movies directed by Nancy Meyers?,movies,"<explanation>
1. We need to find movies directed by a person with the name ""Nancy Meyers"".
2. We can achieve this by starting with the `Person` node, then traversing the `DIRECTED` relationship to the `Movie` nodes.
3. Finally, we will return the `tagline` property of the `Movie` nodes. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.tagline
```",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.tagline","1. We need to find movies directed by a person with the name ""Nancy Meyers"".
2. We can achieve this by starting with the `Person` node, then traversing the `DIRECTED` relationship to the `Movie` nodes.
3. Finally, we will return the `tagline` property of the `Movie` nodes. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.name = ""Nancy Meyers""
RETURN m.tagline
```"
Find all movies released in the year 2008.,movies,"<explanation>
This query looks for all movies with a `released` property value of 2008. 

1. **MATCH Clause:** We use `MATCH (m:Movie)` to search for all nodes with the label 'Movie' and assign them to the variable `m`.
2. **WHERE Clause:** We filter the movies based on the `released` property using `WHERE m.released = 2008`. 
3. **RETURN Clause:**  Finally, we return each movie found using `RETURN m`.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 2008
RETURN m
```",Verbose query,"MATCH (m:Movie)
WHERE m.released = 2008
RETURN m","This query looks for all movies with a `released` property value of 2008. 

1. **MATCH Clause:** We use `MATCH (m:Movie)` to search for all nodes with the label 'Movie' and assign them to the variable `m`.
2. **WHERE Clause:** We filter the movies based on the `released` property using `WHERE m.released = 2008`. 
3. **RETURN Clause:**  Finally, we return each movie found using `RETURN m`."
List the people who wrote movies with less than 100 votes.,movies,"<explanation>
This query identifies people who wrote movies with fewer than 100 votes. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)**: This part finds all persons who wrote movies.
2. **WHERE m.votes < 100**: This filters for movies with less than 100 votes.
3. **RETURN DISTINCT p.name**: This returns the names of the people who meet the criteria, ensuring each name is listed only once.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN DISTINCT p.name","This query identifies people who wrote movies with fewer than 100 votes. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)**: This part finds all persons who wrote movies.
2. **WHERE m.votes < 100**: This filters for movies with less than 100 votes.
3. **RETURN DISTINCT p.name**: This returns the names of the people who meet the criteria, ensuring each name is listed only once."
What are the titles of movies directed by people born before 1960?,movies,"<explanation>
This query first finds all people born before 1960. Then, it matches these people to the movies they directed. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query searches for all pairs of nodes connected by a relationship of type `DIRECTED`. The first node in the pair must have label `Person` and the second one label `Movie`. We introduce variables `p` and `m` to refer to the matched Person and Movie nodes, respectively.
2. **WHERE p.born < 1960**: This clause filters the matched `Person` nodes to only include those born before 1960.
3. **RETURN m.title**: This clause specifies that we want to return the `title` property of the `Movie` nodes found.

</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title
```",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title","This query first finds all people born before 1960. Then, it matches these people to the movies they directed. Finally, it returns the titles of those movies. 

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part of the query searches for all pairs of nodes connected by a relationship of type `DIRECTED`. The first node in the pair must have label `Person` and the second one label `Movie`. We introduce variables `p` and `m` to refer to the matched Person and Movie nodes, respectively.
2. **WHERE p.born < 1960**: This clause filters the matched `Person` nodes to only include those born before 1960.
3. **RETURN m.title**: This clause specifies that we want to return the `title` property of the `Movie` nodes found."
Find the movies released between 1995 and 2005 with more than 1000 votes.,movies,"<explanation>
This query looks for all movies released between 1995 (inclusive) and 2005 (inclusive) that have more than 1000 votes. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000**: This line filters the matched movies based on the release year (between 1995 and 2005) and the number of votes (greater than 1000). 
3. **RETURN m**: Finally, the query returns the movies (m) that meet the specified criteria.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m
```",Verbose query,"MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m","This query looks for all movies released between 1995 (inclusive) and 2005 (inclusive) that have more than 1000 votes. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigning them the variable ""m"".
2. **WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000**: This line filters the matched movies based on the release year (between 1995 and 2005) and the number of votes (greater than 1000). 
3. **RETURN m**: Finally, the query returns the movies (m) that meet the specified criteria."
List the names of people born before 1970 who acted in a movie.,movies,"<explanation>
This query starts with finding `Person` nodes where the `born` property is less than 1970. Then it traverses outgoing `ACTED_IN` relationships to `Movie` nodes. Finally, it returns the `name` property of the `Person` nodes. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1970
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1970
RETURN DISTINCT p.name","This query starts with finding `Person` nodes where the `born` property is less than 1970. Then it traverses outgoing `ACTED_IN` relationships to `Movie` nodes. Finally, it returns the `name` property of the `Person` nodes."
"Who are the people who reviewed ""The Matrix"" and gave it a rating above 90?",movies,"<explanation>
This query starts by matching the movie with the title ""The Matrix"". It then traverses the `REVIEWED` relationships outgoing from that movie to find the people who reviewed it. The `WHERE` clause filters these people, ensuring they gave a rating greater than 90. Finally, the query returns the names of the people who met those criteria. 
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 90
RETURN p.name
```",Verbose query,"MATCH (m:Movie {title: ""The Matrix""})<-[r:REVIEWED]-(p:Person)
WHERE r.rating > 90
RETURN p.name","This query starts by matching the movie with the title ""The Matrix"". It then traverses the `REVIEWED` relationships outgoing from that movie to find the people who reviewed it. The `WHERE` clause filters these people, ensuring they gave a rating greater than 90. Finally, the query returns the names of the people who met those criteria."
What is the average rating of movies reviewed by a person born before 1960?,movies,"<explanation>
1. **Find all persons born before 1960:**
   - Use `MATCH` to find `(p:Person)` nodes.
   - Filter using `WHERE p.born < 1960` to select persons born before 1960.
2. **Match those persons to the movies they reviewed:**
   - Use `MATCH` again to traverse from `(p)` to `(m:Movie)` via the `[:REVIEWED]` relationship.
3. **Calculate the average rating:**
   - Use `WITH` to pass the relevant data to the next clause.
   - Use `avg(r.rating)` to calculate the average rating across all `REVIEWED` relationships.
4. **Return the average rating:**
   - Use `RETURN` to return the result with the name ""average_rating"".

```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```",Verbose query,"MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating","1. **Find all persons born before 1960:**
   - Use `MATCH` to find `(p:Person)` nodes.
   - Filter using `WHERE p.born < 1960` to select persons born before 1960.
2. **Match those persons to the movies they reviewed:**
   - Use `MATCH` again to traverse from `(p)` to `(m:Movie)` via the `[:REVIEWED]` relationship.
3. **Calculate the average rating:**
   - Use `WITH` to pass the relevant data to the next clause.
   - Use `avg(r.rating)` to calculate the average rating across all `REVIEWED` relationships.
4. **Return the average rating:**
   - Use `RETURN` to return the result with the name ""average_rating"".

```cypher
MATCH (p:Person)
WHERE p.born < 1960
MATCH (p)-[r:REVIEWED]->(m:Movie)
WITH avg(r.rating) AS average_rating
RETURN average_rating
```"
"List the movies reviewed by Keanu Reeves, along with their summaries and ratings.",movies,"<explanation>
This query starts by finding the person named Keanu Reeves. Then, it traverses the `REVIEWED` relationships originating from that person to find all the movies reviewed by them.  Finally, the query returns the title of the movies, the summaries, and the ratings of the reviews.
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
RETURN m.title, r.summary, r.rating
```",Verbose query,"MATCH (p:Person {name: 'Keanu Reeves'})-[r:REVIEWED]->(m:Movie)
RETURN m.title, r.summary, r.rating","This query starts by finding the person named Keanu Reeves. Then, it traverses the `REVIEWED` relationships originating from that person to find all the movies reviewed by them.  Finally, the query returns the title of the movies, the summaries, and the ratings of the reviews."
Find the people who reviewed movies with more than 5000 votes and gave a rating below 70.,movies,"<explanation>
1. **MATCH** the pattern of a `Person` who `REVIEWED` a `Movie`.
2. **WHERE** the `Movie` has `votes` greater than 5000 and the `rating` given by the `Person` is below 70.
3. **RETURN** the `name` of the `Person`.

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.votes > 5000 AND r.rating < 70
RETURN p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.votes > 5000 AND r.rating < 70
RETURN p.name","1. **MATCH** the pattern of a `Person` who `REVIEWED` a `Movie`.
2. **WHERE** the `Movie` has `votes` greater than 5000 and the `rating` given by the `Person` is below 70.
3. **RETURN** the `name` of the `Person`."
What are the summaries and ratings of reviews for movies released in 1999?,movies,"<explanation>
This query looks for all movies released in 1999, then finds all reviews associated with those movies, and returns the summary and rating for each review. 

1. **Matching Movies:** We start by matching all `Movie` nodes with the `released` property set to 1999.
2. **Matching Reviews:** We then traverse the `REVIEWED` relationships from those movies to `Person` nodes.
3. **Return Information:**  Finally, we return the `summary` and `rating` properties of the `REVIEWED` relationships. 

</explanation>
```cypher
MATCH (m:Movie {released: 1999})<-[r:REVIEWED]-()
RETURN r.summary, r.rating
```",Verbose query,"MATCH (m:Movie {released: 1999})<-[r:REVIEWED]-()
RETURN r.summary, r.rating","This query looks for all movies released in 1999, then finds all reviews associated with those movies, and returns the summary and rating for each review. 

1. **Matching Movies:** We start by matching all `Movie` nodes with the `released` property set to 1999.
2. **Matching Reviews:** We then traverse the `REVIEWED` relationships from those movies to `Person` nodes.
3. **Return Information:**  Finally, we return the `summary` and `rating` properties of the `REVIEWED` relationships."
Which person gave the highest rating to a movie directed by Lana Wachowski?,movies,"<explanation>
1. **Match relationships:** Find all relationships of type `REVIEWED` related to movies directed by a person named ""Lana Wachowski"".
2. **Find the highest rating:** Identify the highest rating among all the reviews.
3. **Return the person:** Return the name of the person who gave the highest rating.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WITH max(r.rating) AS maxRating
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WHERE r.rating = maxRating
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WITH max(r.rating) AS maxRating
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WHERE r.rating = maxRating
RETURN p.name
```
",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WITH max(r.rating) AS maxRating
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WHERE r.rating = maxRating
RETURN p.name","1. **Match relationships:** Find all relationships of type `REVIEWED` related to movies directed by a person named ""Lana Wachowski"".
2. **Find the highest rating:** Identify the highest rating among all the reviews.
3. **Return the person:** Return the name of the person who gave the highest rating.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WITH max(r.rating) AS maxRating
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)<-[:DIRECTED]-(d:Person {name: 'Lana Wachowski'})
WHERE r.rating = maxRating
RETURN p.name
```"
"List the movies with a rating of 100, along with the reviewer's name.",movies,"<explanation>
This query starts with finding all `REVIEWED` relationships that have a `rating` property equal to 100. Then it traverses to the `Person` node connected to the relationship and the `Movie` node connected to the relationship. Finally, it returns the title of the movie and the name of the reviewer.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title, p.name
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title, p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title, p.name","This query starts with finding all `REVIEWED` relationships that have a `rating` property equal to 100. Then it traverses to the `Person` node connected to the relationship and the `Movie` node connected to the relationship. Finally, it returns the title of the movie and the name of the reviewer.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title, p.name
```"
Find the people who wrote and also reviewed the same movie.,movies,"<explanation>
This query locates individuals who both wrote and reviewed a movie. It achieves this by:

1. Matching nodes representing ""Person"" who participated as both ""WROTE"" and ""REVIEWED"" on the same ""Movie"" node.

2. Returning the ""name"" of each ""Person"" satisfying the condition.

</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name
```
",Verbose query,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name","This query locates individuals who both wrote and reviewed a movie. It achieves this by:

1. Matching nodes representing ""Person"" who participated as both ""WROTE"" and ""REVIEWED"" on the same ""Movie"" node.

2. Returning the ""name"" of each ""Person"" satisfying the condition."
What is the average rating for movies released in 2003?,movies,"<explanation>
1. **Find movies released in 2003**: We start by matching all movies with the property `released` equal to 2003.
2. **Match reviewed relationships**: Then, we traverse the `REVIEWED` relationships from those movies to the people who reviewed them.
3. **Calculate the average rating**:  We use the `avg` function to calculate the average rating of all reviews related to the movies.

```cypher
MATCH (m:Movie {released: 2003})
WITH m, [(m)<-[r:REVIEWED]-() | r.rating] AS ratings
RETURN avg(ratings) AS average_rating
```
</explanation>
```cypher
MATCH (m:Movie {released: 2003})
WITH m, [(m)<-[r:REVIEWED]-() | r.rating] AS ratings
RETURN avg(ratings) AS average_rating
```",Verbose query,"MATCH (m:Movie {released: 2003})
WITH m, [(m)<-[r:REVIEWED]-() | r.rating] AS ratings
RETURN avg(ratings) AS average_rating","1. **Find movies released in 2003**: We start by matching all movies with the property `released` equal to 2003.
2. **Match reviewed relationships**: Then, we traverse the `REVIEWED` relationships from those movies to the people who reviewed them.
3. **Calculate the average rating**:  We use the `avg` function to calculate the average rating of all reviews related to the movies.

```cypher
MATCH (m:Movie {released: 2003})
WITH m, [(m)<-[r:REVIEWED]-() | r.rating] AS ratings
RETURN avg(ratings) AS average_rating
```"
Which person reviewed the most movies?,movies,"<explanation>
This query identifies the person who reviewed the most movies.
1. **MATCH**: We start by matching all Person nodes that have a REVIEWED relationship with a Movie node.
2. **WITH**: This clause allows us to perform an aggregation and pass the result to the next part of the query. We group by the Person node (p) and count the number of movies reviewed by each person using `count(m)`. This count is aliased as `reviewCount`.
3. **ORDER BY**: We order the results in descending order of `reviewCount` to ensure the person with the most reviews appears first.
4. **RETURN**: Finally, we return the name of the person (`p.name`) and the number of movies they reviewed (`reviewCount`).
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name, reviewCount
LIMIT 1
```",Verbose query,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH p, count(m) AS reviewCount
ORDER BY reviewCount DESC
RETURN p.name, reviewCount
LIMIT 1","This query identifies the person who reviewed the most movies.
1. **MATCH**: We start by matching all Person nodes that have a REVIEWED relationship with a Movie node.
2. **WITH**: This clause allows us to perform an aggregation and pass the result to the next part of the query. We group by the Person node (p) and count the number of movies reviewed by each person using `count(m)`. This count is aliased as `reviewCount`.
3. **ORDER BY**: We order the results in descending order of `reviewCount` to ensure the person with the most reviews appears first.
4. **RETURN**: Finally, we return the name of the person (`p.name`) and the number of movies they reviewed (`reviewCount`)."
"List the movies reviewed by a person born after 1960, along with the summary and rating.",movies,"<explanation>
1. **Start with the Person nodes where ""born"" is greater than 1960**.
2. **Traverse the ""REVIEWED"" relationship to find the movies reviewed by these people.**
3. **Return the title of the movie, the summary, and the rating of the review.**

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, r.summary, r.rating
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, r.summary, r.rating
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, r.summary, r.rating","1. **Start with the Person nodes where ""born"" is greater than 1960**.
2. **Traverse the ""REVIEWED"" relationship to find the movies reviewed by these people.**
3. **Return the title of the movie, the summary, and the rating of the review.**

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, r.summary, r.rating
```"
Find the people who acted in and also reviewed the same movie.,movies,"<explanation>
This query looks for instances of a Person who has both ACTED_IN and REVIEWED the same Movie.  We return the name of the Person and the title of the Movie.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m)
RETURN p.name, m.title
```",Verbose query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:REVIEWED]->(m)
RETURN p.name, m.title",This query looks for instances of a Person who has both ACTED_IN and REVIEWED the same Movie.  We return the name of the Person and the title of the Movie.
What is the lowest rating given by any reviewer?,movies,"<explanation>
This query finds the lowest rating from all reviews:

1. **MATCH**: We match all relationships of type `REVIEWED` between a `Person` and a `Movie`.
2. **RETURN**: We return the minimum value of the `rating` property among all matched reviews.

```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN min(r.rating)
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN min(r.rating)
```",Verbose query,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN min(r.rating)","This query finds the lowest rating from all reviews:

1. **MATCH**: We match all relationships of type `REVIEWED` between a `Person` and a `Movie`.
2. **RETURN**: We return the minimum value of the `rating` property among all matched reviews.

```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN min(r.rating)
```"
"Which person reviewed ""Speed Racer"" and what was their summary?",movies,"<explanation>
This Cypher query looks for a Person node that has a `REVIEWED` relationship with a Movie node where the title is ""Speed Racer"". It will then return the name of the person and the summary of their review. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)** - This part of the query matches any Person node that has a `REVIEWED` relationship with a Movie.
2. **WHERE m.title = ""Speed Racer""** - This part of the query filters to only include results where the title of the movie is ""Speed Racer"".
3. **RETURN p.name, r.summary** - Finally, we return the name of the person who reviewed the movie, as well as the summary text of the review. 

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.title = ""Speed Racer""
RETURN p.name, r.summary
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.title = ""Speed Racer""
RETURN p.name, r.summary","This Cypher query looks for a Person node that has a `REVIEWED` relationship with a Movie node where the title is ""Speed Racer"". It will then return the name of the person and the summary of their review. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)** - This part of the query matches any Person node that has a `REVIEWED` relationship with a Movie.
2. **WHERE m.title = ""Speed Racer""** - This part of the query filters to only include results where the title of the movie is ""Speed Racer"".
3. **RETURN p.name, r.summary** - Finally, we return the name of the person who reviewed the movie, as well as the summary text of the review."
"List the movies with a rating below 60, along with the reviewer's name.",movies,"<explanation>
This query starts with the `Person` nodes and traverses the `REVIEWED` relationship. It then filters the movies based on the rating property of the `REVIEWED` relationship. Finally, it returns the titles of the movies and the names of the reviewers.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title, p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN m.title, p.name","This query starts with the `Person` nodes and traverses the `REVIEWED` relationship. It then filters the movies based on the rating property of the `REVIEWED` relationship. Finally, it returns the titles of the movies and the names of the reviewers."
Find the people who produced and also reviewed the same movie.,movies,"<explanation>
To answer this question, we can follow these steps:

1. **Match on people who produced movies:** Find all people who have a PRODUCED relationship with a movie.
2. **Match on people who reviewed movies:** Using the same person node from the previous step, find all movies that the person also reviewed.
3. **Filter for matching movies:** Ensure that the movie the person produced is the same movie they reviewed.
4. **Return the people:** Return the names of the people who meet the criteria. 

</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(producedMovie:Movie)
MATCH (person)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE producedMovie = reviewedMovie
RETURN DISTINCT person.name 
```",Verbose query,"MATCH (person:Person)-[:PRODUCED]->(producedMovie:Movie)
MATCH (person)-[:REVIEWED]->(reviewedMovie:Movie)
WHERE producedMovie = reviewedMovie
RETURN DISTINCT person.name","To answer this question, we can follow these steps:

1. **Match on people who produced movies:** Find all people who have a PRODUCED relationship with a movie.
2. **Match on people who reviewed movies:** Using the same person node from the previous step, find all movies that the person also reviewed.
3. **Filter for matching movies:** Ensure that the movie the person produced is the same movie they reviewed.
4. **Return the people:** Return the names of the people who meet the criteria."
What is the average rating for movies with more than 5000 votes?,movies,"<explanation>
This query identifies movies with over 5000 votes and calculates the average rating of those movies.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes > 5000** - This line filters the matched movies, keeping only those with a ""votes"" property greater than 5000.
3. **WITH avg(m.rating) AS average_rating** - This line calculates the average rating of the selected movies using the `avg` function and assigns it to the variable ""average_rating"".
4. **RETURN average_rating** - This line returns the calculated average rating.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 5000
WITH avg(m.rating) AS average_rating
RETURN average_rating
```",Verbose query,"MATCH (m:Movie)
WHERE m.votes > 5000
WITH avg(m.rating) AS average_rating
RETURN average_rating","This query identifies movies with over 5000 votes and calculates the average rating of those movies.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.votes > 5000** - This line filters the matched movies, keeping only those with a ""votes"" property greater than 5000.
3. **WITH avg(m.rating) AS average_rating** - This line calculates the average rating of the selected movies using the `avg` function and assigns it to the variable ""average_rating"".
4. **RETURN average_rating** - This line returns the calculated average rating."
"Which person gave the lowest rating to ""Something's Gotta Give""?",movies,"<explanation>
This query works in two steps:

1. **Match the movie and the review:** 
   - It first matches the movie with the title ""Something's Gotta Give"".
   - Then, it traverses the `REVIEWED` relationship to find the `Person` nodes who reviewed the movie.
2. **Find the lowest rating and return the person:** 
   - It orders the results in ascending order based on the `rating` property of the `REVIEWED` relationship.
   - It uses `LIMIT 1` to return only the person who gave the lowest rating.

</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WITH p, r 
ORDER BY r.rating 
LIMIT 1
RETURN p.name, r.rating
```",Verbose query,"MATCH (m:Movie {title: ""Something's Gotta Give""})<-[r:REVIEWED]-(p:Person)
WITH p, r 
ORDER BY r.rating 
LIMIT 1
RETURN p.name, r.rating","This query works in two steps:

1. **Match the movie and the review:** 
   - It first matches the movie with the title ""Something's Gotta Give"".
   - Then, it traverses the `REVIEWED` relationship to find the `Person` nodes who reviewed the movie.
2. **Find the lowest rating and return the person:** 
   - It orders the results in ascending order based on the `rating` property of the `REVIEWED` relationship.
   - It uses `LIMIT 1` to return only the person who gave the lowest rating."
"List the movies reviewed by Joel Silver, including their summaries and ratings.",movies,"<explanation>
This query starts with finding the person node with the name 'Joel Silver'. Then, it traverses the `REVIEWED` relationships to find all the movies reviewed by that person. Finally, it returns the title of the movie, the summary of the review, and the rating.
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[r:REVIEWED]->(m:Movie)
RETURN m.title, r.summary, r.rating
```",Verbose query,"MATCH (p:Person {name: 'Joel Silver'})-[r:REVIEWED]->(m:Movie)
RETURN m.title, r.summary, r.rating","This query starts with finding the person node with the name 'Joel Silver'. Then, it traverses the `REVIEWED` relationships to find all the movies reviewed by that person. Finally, it returns the title of the movie, the summary of the review, and the rating."
Find the people who directed and also reviewed the same movie.,movies,"<explanation>
This query starts with a MATCH clause that searches for patterns of a Person directing a Movie and that same Person also reviewing that Movie. Then it returns the name of those Persons.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name
```
",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name",
What is the highest rating given to a movie released before 1990?,movies,"<explanation>
This query starts by matching all `Movie` nodes. Then, it filters down to only movies released before 1990. For these movies, we find all the `REVIEWED` relationships. We return the movie title and the highest rating.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
MATCH (m)-[r:REVIEWED]->()
RETURN m.title, max(r.rating) AS highest_rating
```",Verbose query,"MATCH (m:Movie)
WHERE m.released < 1990
MATCH (m)-[r:REVIEWED]->()
RETURN m.title, max(r.rating) AS highest_rating","This query starts by matching all `Movie` nodes. Then, it filters down to only movies released before 1990. For these movies, we find all the `REVIEWED` relationships. We return the movie title and the highest rating."
Which person reviewed the least number of movies?,movies,"<explanation>
This Cypher query identifies the person who reviewed the least number of movies:
1. **MATCH and count reviews:** We start by matching all people who have reviewed movies and count how many movies each person reviewed.
2. **Order and return the result:** We order the results in ascending order based on the review count and return the top result, which represents the person with the least number of movie reviews.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, count(r) AS reviewCount
RETURN p.name AS personName, reviewCount
ORDER BY reviewCount ASC
LIMIT 1
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, count(r) AS reviewCount
RETURN p.name AS personName, reviewCount
ORDER BY reviewCount ASC
LIMIT 1
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, count(r) AS reviewCount
RETURN p.name AS personName, reviewCount
ORDER BY reviewCount ASC
LIMIT 1","This Cypher query identifies the person who reviewed the least number of movies:
1. **MATCH and count reviews:** We start by matching all people who have reviewed movies and count how many movies each person reviewed.
2. **Order and return the result:** We order the results in ascending order based on the review count and return the top result, which represents the person with the least number of movie reviews.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, count(r) AS reviewCount
RETURN p.name AS personName, reviewCount
ORDER BY reviewCount ASC
LIMIT 1
```"
"List the movies with ""fun"" in their review summary.",movies,"<explanation>
1. **Find all reviews that contain ""fun"" in the summary:** We start by finding all `REVIEWED` relationships where the `summary` property contains the word ""fun"".
2. **Return the movies:** We then return the `Movie` nodes connected to those relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'fun'
RETURN m
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'fun'
RETURN m
```",Verbose query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'fun'
RETURN m","1. **Find all reviews that contain ""fun"" in the summary:** We start by finding all `REVIEWED` relationships where the `summary` property contains the word ""fun"".
2. **Return the movies:** We then return the `Movie` nodes connected to those relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'fun'
RETURN m
```"
"Find the people who reviewed movies with ""compelling"" in their review summary.",movies,"<explanation>
1. We need to find `Person` nodes that are connected to `Movie` nodes through the `REVIEWED` relationship.
2. We'll filter the `REVIEWED` relationships based on whether the `summary` property contains the word ""compelling"".
3. We'll then return the `name` property of the `Person` nodes. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'compelling'
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'compelling'
RETURN p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'compelling'
RETURN p.name","1. We need to find `Person` nodes that are connected to `Movie` nodes through the `REVIEWED` relationship.
2. We'll filter the `REVIEWED` relationships based on whether the `summary` property contains the word ""compelling"".
3. We'll then return the `name` property of the `Person` nodes. 

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'compelling'
RETURN p.name
```"
"What is the average rating of movies with ""amazing"" in their review summary?",movies,"<explanation>
1. **Find movies with ""amazing"" in their review summary:**
   - We start by finding all `REVIEWED` relationships where the `summary` property contains ""amazing"".
2. **Get the average rating:**
   - We use `avg(review.rating)` to calculate the average rating of those movies.
3. **Return the average rating:**
   - Finally, we return the average rating.

```cypher
MATCH (:Person)-[review:REVIEWED]->(movie:Movie)
WHERE toLower(review.summary) CONTAINS 'amazing'
RETURN avg(review.rating) AS average_rating
```
</explanation>
```cypher
MATCH (:Person)-[review:REVIEWED]->(movie:Movie)
WHERE toLower(review.summary) CONTAINS 'amazing'
RETURN avg(review.rating) AS average_rating
```",Verbose query,"MATCH (:Person)-[review:REVIEWED]->(movie:Movie)
WHERE toLower(review.summary) CONTAINS 'amazing'
RETURN avg(review.rating) AS average_rating","1. **Find movies with ""amazing"" in their review summary:**
   - We start by finding all `REVIEWED` relationships where the `summary` property contains ""amazing"".
2. **Get the average rating:**
   - We use `avg(review.rating)` to calculate the average rating of those movies.
3. **Return the average rating:**
   - Finally, we return the average rating.

```cypher
MATCH (:Person)-[review:REVIEWED]->(movie:Movie)
WHERE toLower(review.summary) CONTAINS 'amazing'
RETURN avg(review.rating) AS average_rating
```"
"Which person wrote a movie that has a review summary containing ""slapdash""?",movies,"<explanation>
This query should first find all movies with reviews containing the word ""slapstick"" and then return the names of any people who wrote those movies.

1. **Find movies with specific review summaries:** We start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship where the `summary` property contains the word ""slapstick"".
2. **Find the writers of those movies:** From the movies found in the previous step, we traverse the `WROTE` relationship in reverse to find the `Person` nodes who wrote those movies.
3. **Return the names of the writers:**  Finally, we return the `name` property of the writers found.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'slapstick'
WITH m
MATCH (m)<-[:WROTE]-(writer:Person)
RETURN DISTINCT writer.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'slapstick'
WITH m
MATCH (m)<-[:WROTE]-(writer:Person)
RETURN DISTINCT writer.name
```",Verbose query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'slapstick'
WITH m
MATCH (m)<-[:WROTE]-(writer:Person)
RETURN DISTINCT writer.name","This query should first find all movies with reviews containing the word ""slapstick"" and then return the names of any people who wrote those movies.

1. **Find movies with specific review summaries:** We start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship where the `summary` property contains the word ""slapstick"".
2. **Find the writers of those movies:** From the movies found in the previous step, we traverse the `WROTE` relationship in reverse to find the `Person` nodes who wrote those movies.
3. **Return the names of the writers:**  Finally, we return the `name` property of the writers found.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'slapstick'
WITH m
MATCH (m)<-[:WROTE]-(writer:Person)
RETURN DISTINCT writer.name
```"
"List the movies with ""journey"" in their review summary.",movies,"<explanation>
1. We need to find all `REVIEWED` relationships which have the word ""journey"" in the `summary` property.
2. Then we need to return the `title` property of the `Movie` nodes connected to those relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```",Verbose query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.title","1. We need to find all `REVIEWED` relationships which have the word ""journey"" in the `summary` property.
2. Then we need to return the `title` property of the `Movie` nodes connected to those relationships.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.title
```"
"Find the people who reviewed movies with ""dark"" in their review summary.",movies,"<explanation>
This query starts with all `Person` nodes and looks for those who have a `REVIEWED` relationship with a `Movie` where the review summary contains ""dark"".
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'dark'
RETURN DISTINCT p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'dark'
RETURN DISTINCT p.name","This query starts with all `Person` nodes and looks for those who have a `REVIEWED` relationship with a `Movie` where the review summary contains ""dark""."
"What is the average rating of movies with ""romp"" in their review summary.",movies,"<explanation>
1. **Find movies with ""romp"" in their review summary**: We'll start by finding all `REVIEWED` relationships where the `summary` property contains the word ""romp"".
2. **Calculate the average rating**: We'll use the `avg()` function to calculate the average of the `rating` property of the `REVIEWED` relationships that we identified in the previous step.
3. **Return the average rating**: Finally, we'll return the average rating.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'romp'
RETURN avg(r.rating) AS average_rating
```
</explanation>",Verbose query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'romp'
RETURN avg(r.rating) AS average_rating","1. **Find movies with ""romp"" in their review summary**: We'll start by finding all `REVIEWED` relationships where the `summary` property contains the word ""romp"".
2. **Calculate the average rating**: We'll use the `avg()` function to calculate the average of the `rating` property of the `REVIEWED` relationships that we identified in the previous step.
3. **Return the average rating**: Finally, we'll return the average rating.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'romp'
RETURN avg(r.rating) AS average_rating
```"
Who directed a movie that has a review summary mentioning 'football'?,movies,"<explanation>
1. **Match nodes:** We need to find a `Person` who `DIRECTED` a `Movie` that has a `REVIEWED` relationship with a `summary` containing ""football"".
2. **Match relationships:** Match the `DIRECTED` relationship between `Person` and `Movie`, and the `REVIEWED` relationship between `Movie` and another `Person`.
3. **Filter on review summary:** Filter the `REVIEWED` relationships to only include those where the `summary` property contains the word ""football"".
4. **Return the directors:** Finally, return the `name` of the `Person` who directed the movie. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'football'
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'football'
RETURN p.name
```",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'football'
RETURN p.name","1. **Match nodes:** We need to find a `Person` who `DIRECTED` a `Movie` that has a `REVIEWED` relationship with a `summary` containing ""football"".
2. **Match relationships:** Match the `DIRECTED` relationship between `Person` and `Movie`, and the `REVIEWED` relationship between `Movie` and another `Person`.
3. **Filter on review summary:** Filter the `REVIEWED` relationships to only include those where the `summary` property contains the word ""football"".
4. **Return the directors:** Finally, return the `name` of the `Person` who directed the movie. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary CONTAINS 'football'
RETURN p.name
```"
List all movies released after 2000 and their respective taglines.,movies,"<explanation>This query looks for all movies released after 2000 and returns their titles and taglines.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter for movies released after the year 2000.
3. **RETURN Clause:**  We return the title of the movie and its tagline.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.title, m.tagline
```",Verbose query,"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.title, m.tagline","This query looks for all movies released after 2000 and returns their titles and taglines.

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter for movies released after the year 2000.
3. **RETURN Clause:**  We return the title of the movie and its tagline."
Find all people born before 1950 and the titles of the movies they directed.,movies,"<explanation>
This query looks for all people born before 1950 and the titles of the movies they directed.
1. **MATCH** clause finds all `Person` nodes related to `Movie` nodes via the `DIRECTED` relationship.
2. **WHERE** clause filters to only include people born before 1950.
3. **RETURN** clause returns the name of the person and the title of the movie.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, m.title
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, m.title
```",Verbose query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, m.title","This query looks for all people born before 1950 and the titles of the movies they directed.
1. **MATCH** clause finds all `Person` nodes related to `Movie` nodes via the `DIRECTED` relationship.
2. **WHERE** clause filters to only include people born before 1950.
3. **RETURN** clause returns the name of the person and the title of the movie.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, m.title
```"
What are the titles and release years of all movies with more than 3000 votes?,movies,"<explanation>
This query looks for all movies with more than 3000 votes and returns their titles and release years.

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WHERE**: We filter these nodes, keeping only those where the `votes` property is greater than 3000.
3. **RETURN**:  Finally, we return the `title` and `released` properties of the movies that passed the filter.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.votes > 3000
RETURN m.title, m.released
```",Verbose query,"MATCH (m:Movie)
WHERE m.votes > 3000
RETURN m.title, m.released","This query looks for all movies with more than 3000 votes and returns their titles and release years.

1. **MATCH**: We start by matching all `Movie` nodes.
2. **WHERE**: We filter these nodes, keeping only those where the `votes` property is greater than 3000.
3. **RETURN**:  Finally, we return the `title` and `released` properties of the movies that passed the filter."
List the names of all people who acted in movies released in 1999.,movies,"<explanation>
This query starts by matching all movies released in 1999. Then, it traverses the ACTED_IN relationships backward to find the people who acted in those movies. Finally, it returns the names of those people.
</explanation>
```cypher
MATCH (m:Movie {released: 1999})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name
```",Verbose query,"MATCH (m:Movie {released: 1999})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name","This query starts by matching all movies released in 1999. Then, it traverses the ACTED_IN relationships backward to find the people who acted in those movies. Finally, it returns the names of those people."
What are the taglines of all movies directed by Lana Wachowski?,movies,"<explanation>
This query starts with finding the person named ""Lana Wachowski"". Then it traverses the DIRECTED relationships to find all movies directed by this person. Finally, it returns the taglines of these movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.tagline
```",Verbose query,"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.tagline","This query starts with finding the person named ""Lana Wachowski"". Then it traverses the DIRECTED relationships to find all movies directed by this person. Finally, it returns the taglines of these movies."
Find all people born between 1950 and 1960 and the movies they produced.,movies,"<explanation>
This query first finds all people born between 1950 and 1960 and then returns those people along with the titles of the movies that they produced. 

1. **MATCH (p:Person)**: We start by matching all nodes with the label ""Person"" and assigning them to the variable `p`.
2. **WHERE p.born >= 1950 AND p.born <= 1960**: This filters the matched ""Person"" nodes to only include those where the ""born"" property is between 1950 and 1960 (inclusive).
3. **WITH p MATCH (p)-[:PRODUCED]->(m:Movie)**: For each person `p` passing the filter, we match the pattern where the person `p` has an outgoing ""PRODUCED"" relationship to a node with the label ""Movie"", which we assign to the variable `m`.
4. **RETURN p.name, m.title**: This returns the ""name"" property of the ""Person"" nodes and the ""title"" property of the ""Movie"" nodes that satisfy the specified pattern. 

</explanation>
```cypher
MATCH (p:Person)
WHERE p.born >= 1950 AND p.born <= 1960
WITH p
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN p.name, m.title
```",Verbose query,"MATCH (p:Person)
WHERE p.born >= 1950 AND p.born <= 1960
WITH p
MATCH (p)-[:PRODUCED]->(m:Movie)
RETURN p.name, m.title","This query first finds all people born between 1950 and 1960 and then returns those people along with the titles of the movies that they produced. 

1. **MATCH (p:Person)**: We start by matching all nodes with the label ""Person"" and assigning them to the variable `p`.
2. **WHERE p.born >= 1950 AND p.born <= 1960**: This filters the matched ""Person"" nodes to only include those where the ""born"" property is between 1950 and 1960 (inclusive).
3. **WITH p MATCH (p)-[:PRODUCED]->(m:Movie)**: For each person `p` passing the filter, we match the pattern where the person `p` has an outgoing ""PRODUCED"" relationship to a node with the label ""Movie"", which we assign to the variable `m`.
4. **RETURN p.name, m.title**: This returns the ""name"" property of the ""Person"" nodes and the ""title"" property of the ""Movie"" nodes that satisfy the specified pattern."
What are the roles played by Keanu Reeves in all the movies he acted in?,movies,"<explanation>
This query starts by matching the person node with the name 'Keanu Reeves'. Then, it traverses the ACTED_IN relationships to find all the movies Keanu Reeves acted in. Finally, it returns the titles of those movies and the roles he played. 
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released,  p.name, m.tagline
```",Verbose query,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released,  p.name, m.tagline","This query starts by matching the person node with the name 'Keanu Reeves'. Then, it traverses the ACTED_IN relationships to find all the movies Keanu Reeves acted in. Finally, it returns the titles of those movies and the roles he played."
List the names and birth years of all people who wrote movies released before 2005.,movies,"<explanation>
This query starts by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
It then filters these results to only include movies released before 2005. 
Finally, it returns the name and birth year of each person.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2005
RETURN p.name, p.born
```",Verbose query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2005
RETURN p.name, p.born","This query starts by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node.
It then filters these results to only include movies released before 2005. 
Finally, it returns the name and birth year of each person."
What are the titles and vote counts of all movies directed by Nancy Meyers?,movies,"<explanation>
This query starts by finding the person node with the name ""Nancy Meyers"". Then, it traverses the `DIRECTED` relationships from that person node to the movie nodes. Finally, it returns the title and vote count for each movie found.
</explanation>
```cypher
MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.title, m.votes
```",Verbose query,"MATCH (p:Person {name: 'Nancy Meyers'})-[:DIRECTED]->(m:Movie)
RETURN m.title, m.votes","This query starts by finding the person node with the name ""Nancy Meyers"". Then, it traverses the `DIRECTED` relationships from that person node to the movie nodes. Finally, it returns the title and vote count for each movie found."
Find all people who follow Keanu Reeves.,movies,"<explanation>
This query starts by finding the node with the name 'Keanu Reeves' and then traverses the `FOLLOWS` relationship in the outgoing direction to find all the nodes representing people who follow him. Finally, it returns the names of those followers. 
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower)
RETURN follower.name
```",Verbose query,"MATCH (p:Person {name: 'Keanu Reeves'})-[:FOLLOWS]->(follower)
RETURN follower.name","This query starts by finding the node with the name 'Keanu Reeves' and then traverses the `FOLLOWS` relationship in the outgoing direction to find all the nodes representing people who follow him. Finally, it returns the names of those followers."
Who follows Joel Silver?,movies,"<explanation>
This query starts with a node with the name 'Joel Silver' and then traverses the `FOLLOWS` relationship to find all the people that Joel Silver follows.
</explanation>
```cypher
MATCH (p:Person {name: 'Joel Silver'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
```",Verbose query,"MATCH (p:Person {name: 'Joel Silver'})-[:FOLLOWS]->(followed:Person)
RETURN followed.name",This query starts with a node with the name 'Joel Silver' and then traverses the `FOLLOWS` relationship to find all the people that Joel Silver follows.
List all people followed by Lana Wachowski.,movies,"<explanation>
This query starts with Lana Wachowski, then traverses the `FOLLOWS` relationship to find all the people she follows.

1. **MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(person:Person)** - This line matches the node with the name ""Lana Wachowski"" and then traverses the `FOLLOWS` relationship to find all the people she follows.
2. **RETURN person.name** - This line returns the names of the people Lana Wachowski follows.
</explanation>
```cypher
MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(person:Person)
RETURN person.name
```",Verbose query,"MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(person:Person)
RETURN person.name","This query starts with Lana Wachowski, then traverses the `FOLLOWS` relationship to find all the people she follows.

1. **MATCH (lana:Person {name: ""Lana Wachowski""})-[:FOLLOWS]->(person:Person)** - This line matches the node with the name ""Lana Wachowski"" and then traverses the `FOLLOWS` relationship to find all the people she follows.
2. **RETURN person.name** - This line returns the names of the people Lana Wachowski follows."
Which people are followed by both Keanu Reeves and Joel Silver?,movies,"<explanation>
To answer this question, we can start by finding the nodes representing Keanu Reeves and Joel Silver. We then identify all the people followed by Keanu and all the people followed by Joel. Finally, we find the intersection of these two groups - these are the people followed by both Keanu Reeves and Joel Silver.

1. **Find Keanu Reeves and Joel Silver**: We use MATCH clauses to find the nodes with the 'Person' label and the respective names.
2. **Find people they follow**: We use two separate MATCH clauses, one for each actor, to find the people they follow. We traverse the 'FOLLOWS' relationship outwards from the actor nodes.
3. **Find the intersection**: We use the WITH clause to pass the list of people followed by each actor to the next part of the query. We then use the `apoc.coll.intersection` function (from the APOC library) to find the people present in both lists.
4. **Return the result**: We return the `name` property of each person in the intersection.

```cypher
MATCH (keanu:Person { name: ""Keanu Reeves"" })
MATCH (joel:Person { name: ""Joel Silver"" })
MATCH (keanu)-[:FOLLOWS]->(keanuFollows:Person)
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
WITH collect(keanuFollows) AS keanuFollows, collect(joelFollows) AS joelFollows
RETURN apoc.coll.intersection(keanuFollows, joelFollows) AS peopleFollowedByBoth
```
</explanation>
```cypher
MATCH (keanu:Person { name: ""Keanu Reeves"" })
MATCH (joel:Person { name: ""Joel Silver"" })
MATCH (keanu)-[:FOLLOWS]->(keanuFollows:Person)
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
WITH collect(keanuFollows) AS keanuFollows, collect(joelFollows) AS joelFollows
RETURN apoc.coll.intersection(keanuFollows, joelFollows) AS peopleFollowedByBoth
```",Verbose query,"MATCH (keanu:Person { name: ""Keanu Reeves"" })
MATCH (joel:Person { name: ""Joel Silver"" })
MATCH (keanu)-[:FOLLOWS]->(keanuFollows:Person)
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
WITH collect(keanuFollows) AS keanuFollows, collect(joelFollows) AS joelFollows
RETURN apoc.coll.intersection(keanuFollows, joelFollows) AS peopleFollowedByBoth","To answer this question, we can start by finding the nodes representing Keanu Reeves and Joel Silver. We then identify all the people followed by Keanu and all the people followed by Joel. Finally, we find the intersection of these two groups - these are the people followed by both Keanu Reeves and Joel Silver.

1. **Find Keanu Reeves and Joel Silver**: We use MATCH clauses to find the nodes with the 'Person' label and the respective names.
2. **Find people they follow**: We use two separate MATCH clauses, one for each actor, to find the people they follow. We traverse the 'FOLLOWS' relationship outwards from the actor nodes.
3. **Find the intersection**: We use the WITH clause to pass the list of people followed by each actor to the next part of the query. We then use the `apoc.coll.intersection` function (from the APOC library) to find the people present in both lists.
4. **Return the result**: We return the `name` property of each person in the intersection.

```cypher
MATCH (keanu:Person { name: ""Keanu Reeves"" })
MATCH (joel:Person { name: ""Joel Silver"" })
MATCH (keanu)-[:FOLLOWS]->(keanuFollows:Person)
MATCH (joel)-[:FOLLOWS]->(joelFollows:Person)
WITH collect(keanuFollows) AS keanuFollows, collect(joelFollows) AS joelFollows
RETURN apoc.coll.intersection(keanuFollows, joelFollows) AS peopleFollowedByBoth
```"
Who is the most followed person? (Limit to top 3),movies,"<explanation>
This query identifies the top 3 most followed people in the graph.
1. **MATCH and COUNT**: It starts by matching all `FOLLOWS` relationships and uses `WITH` with `count(*)` to aggregate and count the number of times each person is followed.
2. **ORDERING**: It then orders the results in descending order based on the follow count to get the most followed individuals first.
3. **LIMITING RESULTS**: Finally, it limits the results to the top 3 using `LIMIT` and returns the names of those people and their corresponding follow counts.
</explanation>
```cypher
MATCH (p:Person)<-[:FOLLOWS]-()
WITH p, count(*) AS followerCount
ORDER BY followerCount DESC
LIMIT 3
RETURN p.name AS personName, followerCount
```",Verbose query,"MATCH (p:Person)<-[:FOLLOWS]-()
WITH p, count(*) AS followerCount
ORDER BY followerCount DESC
LIMIT 3
RETURN p.name AS personName, followerCount","This query identifies the top 3 most followed people in the graph.
1. **MATCH and COUNT**: It starts by matching all `FOLLOWS` relationships and uses `WITH` with `count(*)` to aggregate and count the number of times each person is followed.
2. **ORDERING**: It then orders the results in descending order based on the follow count to get the most followed individuals first.
3. **LIMITING RESULTS**: Finally, it limits the results to the top 3 using `LIMIT` and returns the names of those people and their corresponding follow counts."
Who follows the most people? (Limit to top 3),movies,"<explanation>
1. **Identify starting nodes:** We need to start with `Person` nodes as we are looking for who follows the most people.
2. **Traversal:** We need to traverse the `FOLLOWS` relationship.
3. **Aggregation:** We need to count how many people each person follows.
4. **Filtering and Ordering:**  We need to order the results in descending order of the number of people they follow and limit the result to the top 3.
5. **Return:** We need to return the name of the person and the number of people they follow.

```cypher
MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WITH p, count(followed) AS numFollowed
ORDER BY numFollowed DESC
RETURN p.name, numFollowed
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WITH p, count(followed) AS numFollowed
ORDER BY numFollowed DESC
RETURN p.name, numFollowed
LIMIT 3
```",Verbose query,"MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WITH p, count(followed) AS numFollowed
ORDER BY numFollowed DESC
RETURN p.name, numFollowed
LIMIT 3","1. **Identify starting nodes:** We need to start with `Person` nodes as we are looking for who follows the most people.
2. **Traversal:** We need to traverse the `FOLLOWS` relationship.
3. **Aggregation:** We need to count how many people each person follows.
4. **Filtering and Ordering:**  We need to order the results in descending order of the number of people they follow and limit the result to the top 3.
5. **Return:** We need to return the name of the person and the number of people they follow.

```cypher
MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WITH p, count(followed) AS numFollowed
ORDER BY numFollowed DESC
RETURN p.name, numFollowed
LIMIT 3
```"
List the movies with the highest number of votes (top 5).,movies,"<explanation>
This Cypher query will find the top 5 movies with the highest number of votes.
1. It starts with matching all `Movie` nodes.
2. It will then order these `Movie` nodes by their `votes` property in descending order.
3. The query then returns the title of the movie and the number of votes it received for the top 5 movies with the highest votes.

```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5
```",Verbose query,"MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5","This Cypher query will find the top 5 movies with the highest number of votes.
1. It starts with matching all `Movie` nodes.
2. It will then order these `Movie` nodes by their `votes` property in descending order.
3. The query then returns the title of the movie and the number of votes it received for the top 5 movies with the highest votes.

```cypher
MATCH (m:Movie)
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5
```"
Find the movies with the lowest number of votes (first 3).,movies,"<explanation>
This query looks for the three movies with the lowest number of votes.

1. **MATCH (m:Movie)**: This line matches all nodes with the label 'Movie' and assigns them to the variable 'm'.
2. **RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3**: This line returns the title and the number of votes for each movie, orders them in ascending order based on the number of votes, and limits the result to the first three movies. 
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3
```",Verbose query,"MATCH (m:Movie)
RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3","This query looks for the three movies with the lowest number of votes.

1. **MATCH (m:Movie)**: This line matches all nodes with the label 'Movie' and assigns them to the variable 'm'.
2. **RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3**: This line returns the title and the number of votes for each movie, orders them in ascending order based on the number of votes, and limits the result to the first three movies."
What are the earliest 3 released movies?,movies,"<explanation>
This query returns the title of the 3 movies with the earliest `released` date. It orders all movies by `released` in ascending order and then uses `LIMIT` to return only the first 3.

```cypher
MATCH (m:Movie)
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3
```",Verbose query,"MATCH (m:Movie)
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3","This query returns the title of the 3 movies with the earliest `released` date. It orders all movies by `released` in ascending order and then uses `LIMIT` to return only the first 3.

```cypher
MATCH (m:Movie)
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3
```"
List the 5 most recently released movies.,movies,"<explanation>
This query returns the title of the 5 most recently released movies.
1. We start with all Movie nodes.
2. We order them in descending order based on their `released` property.
3. We limit the result to 5 movies.
4. We return the title of each movie.
</explanation>
```cypher
MATCH (m:Movie)
ORDER BY m.released DESC
RETURN m.title AS movieTitle
LIMIT 5
```",Verbose query,"MATCH (m:Movie)
ORDER BY m.released DESC
RETURN m.title AS movieTitle
LIMIT 5","This query returns the title of the 5 most recently released movies.
1. We start with all Movie nodes.
2. We order them in descending order based on their `released` property.
3. We limit the result to 5 movies.
4. We return the title of each movie."
Who are the 3 oldest people in the database?,movies,"<explanation>
This query starts by getting all `Person` nodes. It then orders them in descending order of their `born` property and uses `LIMIT` to return only the top 3, effectively selecting the 3 oldest people.
</explanation>
```cypher
MATCH (p:Person)
RETURN p ORDER BY p.born ASC LIMIT 3
```",Verbose query,"MATCH (p:Person)
RETURN p ORDER BY p.born ASC LIMIT 3","This query starts by getting all `Person` nodes. It then orders them in descending order of their `born` property and uses `LIMIT` to return only the top 3, effectively selecting the 3 oldest people."
Who are the 3 youngest people in the database?,movies,"<explanation>
This query finds the 3 youngest people in the database.
1. It orders all `Person` nodes in ascending order of their `born` property.
2. It returns the `name` and `born` properties of the first 3 people.
</explanation>
```cypher
MATCH (p:Person)
RETURN p.name, p.born
ORDER BY p.born
LIMIT 3
```",Verbose query,"MATCH (p:Person)
RETURN p.name, p.born
ORDER BY p.born
LIMIT 3","This query finds the 3 youngest people in the database.
1. It orders all `Person` nodes in ascending order of their `born` property.
2. It returns the `name` and `born` properties of the first 3 people."
Find the top 3 movies with the highest ratings.,movies,"<explanation>
1. **Find all reviewed movies:** Match all relationships of type `REVIEWED` between a `Person` node and a `Movie` node.
2. **Aggregate ratings**: Group by movie title and calculate the average rating using `avg(review.rating)`. Alias the average rating as `average_rating`.
3. **Order by average rating**: Use `WITH` clause to pass aggregated results and order them by `average_rating` in descending order.
4. **Limit to top 3:** Use `LIMIT` to return only the top 3 movies.
5. **Return movie titles and average ratings:** Return the `title` of the movie and its `average_rating`.

```cypher
MATCH (p:Person)-[review:REVIEWED]->(m:Movie)
WITH m.title AS movieTitle, avg(review.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
RETURN movieTitle, average_rating
```
</explanation>
```cypher
MATCH (p:Person)-[review:REVIEWED]->(m:Movie)
WITH m.title AS movieTitle, avg(review.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
RETURN movieTitle, average_rating
```",Verbose query,"MATCH (p:Person)-[review:REVIEWED]->(m:Movie)
WITH m.title AS movieTitle, avg(review.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
RETURN movieTitle, average_rating","1. **Find all reviewed movies:** Match all relationships of type `REVIEWED` between a `Person` node and a `Movie` node.
2. **Aggregate ratings**: Group by movie title and calculate the average rating using `avg(review.rating)`. Alias the average rating as `average_rating`.
3. **Order by average rating**: Use `WITH` clause to pass aggregated results and order them by `average_rating` in descending order.
4. **Limit to top 3:** Use `LIMIT` to return only the top 3 movies.
5. **Return movie titles and average ratings:** Return the `title` of the movie and its `average_rating`.

```cypher
MATCH (p:Person)-[review:REVIEWED]->(m:Movie)
WITH m.title AS movieTitle, avg(review.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3
RETURN movieTitle, average_rating
```"
What are the 3 lowest rated movies?,movies,"<explanation>
This query starts with all movies and orders them in ascending order based on the review rating. Then, it limits the result to only the first 3 movies and returns the titles of these movies along with their ratings.

1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: This matches all movies that have been reviewed.
2. **WITH m, avg(r.rating) AS average_rating**: This calculates the average rating for each movie.
3. **ORDER BY average_rating LIMIT 3**: This orders the movies in ascending order of their average rating and limits the result to the top 3.
4. **RETURN m.title, average_rating**: This returns the title of the movie and its average rating.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating 
RETURN m.title, average_rating LIMIT 3
```",Verbose query,"MATCH (m:Movie)<-[r:REVIEWED]-()
WITH m, avg(r.rating) AS average_rating
ORDER BY average_rating 
RETURN m.title, average_rating LIMIT 3","This query starts with all movies and orders them in ascending order based on the review rating. Then, it limits the result to only the first 3 movies and returns the titles of these movies along with their ratings.

1. **MATCH (m:Movie)<-[r:REVIEWED]-()**: This matches all movies that have been reviewed.
2. **WITH m, avg(r.rating) AS average_rating**: This calculates the average rating for each movie.
3. **ORDER BY average_rating LIMIT 3**: This orders the movies in ascending order of their average rating and limits the result to the top 3.
4. **RETURN m.title, average_rating**: This returns the title of the movie and its average rating."
List the movies with the longest taglines (top 3).,movies,"<explanation>
This query first matches all `Movie` nodes. Then, it uses `WITH` and `order()` to order the movies by tagline length in descending order.  Finally, it returns the title of the top 3 movies with the longest taglines. 
</explanation>
```cypher
MATCH (m:Movie)
WITH m, size(m.tagline) AS taglineLength
ORDER BY taglineLength DESC
RETURN m.title AS movieTitle, taglineLength
LIMIT 3
```",Verbose query,"MATCH (m:Movie)
WITH m, size(m.tagline) AS taglineLength
ORDER BY taglineLength DESC
RETURN m.title AS movieTitle, taglineLength
LIMIT 3","This query first matches all `Movie` nodes. Then, it uses `WITH` and `order()` to order the movies by tagline length in descending order.  Finally, it returns the title of the top 3 movies with the longest taglines."
Find the movies with the shortest taglines (first 3).,movies,"<explanation>
This query should find the movies with the shortest taglines and return the title of the first 3.
1. We need to match all movie nodes.
2. Order them by the size of their tagline property.
3. Return the title of the first 3. 

```cypher
MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
```",Verbose query,"MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3","This query should find the movies with the shortest taglines and return the title of the first 3.
1. We need to match all movie nodes.
2. Order them by the size of their tagline property.
3. Return the title of the first 3. 

```cypher
MATCH (m:Movie)
RETURN m.title, size(m.tagline) AS tagline_length
ORDER BY tagline_length ASC
LIMIT 3
```"
Which people acted in the top 3 highest-grossing movies? (Assume votes represent gross revenue),movies,"<explanation>
1. **Find movies with the top 3 highest votes**: Order all movies by votes in descending order and limit the result to the top 3.
2. **Find people who acted in those movies**: Traverse the ACTED_IN relationship from those movies to the Person nodes.
3. **Return the people**: Collect and return the distinct person names.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT collect(p.name)
```
</explanation>
```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT collect(p.name)
```",Verbose query,"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT collect(p.name)","1. **Find movies with the top 3 highest votes**: Order all movies by votes in descending order and limit the result to the top 3.
2. **Find people who acted in those movies**: Traverse the ACTED_IN relationship from those movies to the Person nodes.
3. **Return the people**: Collect and return the distinct person names.

```cypher
MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 3
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT collect(p.name)
```"
"Which movies were reviewed with the summary ""A solid romp""?",movies,"<explanation>
This query starts with the Movie nodes and then matches on the REVIEWED relationships with the property summary equal to 'A solid romp'. It then returns the titles of the movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = 'A solid romp'
RETURN m.title
```",Verbose query,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = 'A solid romp'
RETURN m.title",This query starts with the Movie nodes and then matches on the REVIEWED relationships with the property summary equal to 'A solid romp'. It then returns the titles of the movies.
"Who reviewed a movie with the summary ""Dark, but compelling""?",movies,"<explanation>
This query starts by finding the Movie nodes with reviews that have the summary ""Dark, but compelling"". It then traverses the REVIEWED relationships from those Movie nodes to the Person nodes that created the reviews. Finally, it returns the names of those Person nodes. 
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Dark, but compelling""
RETURN p.name
```",Verbose query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Dark, but compelling""
RETURN p.name","This query starts by finding the Movie nodes with reviews that have the summary ""Dark, but compelling"". It then traverses the REVIEWED relationships from those Movie nodes to the Person nodes that created the reviews. Finally, it returns the names of those Person nodes."
"What is the average rating of movies with the summary ""Pretty funny at times""?",movies,"<explanation>
1. **Match reviewed movies with the target summary**: We start by matching all `REVIEWED` relationships where the `summary` property is ""Pretty funny at times."" 
2. **Calculate the average rating**: We then use the `avg` function to calculate the average rating of the movies returned in the previous step.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN avg(r.rating)
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN avg(r.rating)
```",Verbose query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN avg(r.rating)","1. **Match reviewed movies with the target summary**: We start by matching all `REVIEWED` relationships where the `summary` property is ""Pretty funny at times."" 
2. **Calculate the average rating**: We then use the `avg` function to calculate the average rating of the movies returned in the previous step.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Pretty funny at times""
RETURN avg(r.rating)
```"
Which movies were reviewed with a rating of 100?,movies,"<explanation>This query looks for all movies that have a REVIEWED relationship with a rating of 100.
- It starts by matching all REVIEWED relationships.
- It then filters these relationships to only include those with a rating of 100.
- Finally, it returns the titles of the movies that are connected to the matching relationships. 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = 100
RETURN m.title
```",Verbose query,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.rating = 100
RETURN m.title","This query looks for all movies that have a REVIEWED relationship with a rating of 100.
- It starts by matching all REVIEWED relationships.
- It then filters these relationships to only include those with a rating of 100.
- Finally, it returns the titles of the movies that are connected to the matching relationships."
What are the titles of the 3 movies with the most votes?,movies,"<explanation>
This query starts with all Movie nodes, orders them in descending order by the number of votes, limits the results to the top 3, and then returns the title of each movie.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **RETURN m.title**: This line returns the title of each movie represented by the variable ""m"".
3. **ORDER BY m.votes DESC**: This line orders the results in descending order based on the value of the ""votes"" property of each movie.
4. **LIMIT 3**: This line limits the number of results returned to 3.
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.title AS title
ORDER BY m.votes DESC
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)
RETURN m.title AS title
ORDER BY m.votes DESC
LIMIT 3","This query starts with all Movie nodes, orders them in descending order by the number of votes, limits the results to the top 3, and then returns the title of each movie.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **RETURN m.title**: This line returns the title of each movie represented by the variable ""m"".
3. **ORDER BY m.votes DESC**: This line orders the results in descending order based on the value of the ""votes"" property of each movie.
4. **LIMIT 3**: This line limits the number of results returned to 3."
List the names of the 5 people born between 1950 and 1960.,movies,"<explanation>
This query starts by matching all `Person` nodes. 
It then filters these nodes to those with a `born` property between 1950 (inclusive) and 1960 (inclusive). 
The filtered nodes are then ordered in descending order by their `born` property.
Finally, the query returns the names of the first 5 `Person` nodes, which represent the 5 people born between 1950 and 1960.

```cypher
MATCH (p:Person)
WHERE 1950 <= p.born <= 1960
RETURN p.name
ORDER BY p.born DESC
LIMIT 5
```
</explanation>",Evaluation query,"MATCH (p:Person)
WHERE 1950 <= p.born <= 1960
RETURN p.name
ORDER BY p.born DESC
LIMIT 5","This query starts by matching all `Person` nodes. 
It then filters these nodes to those with a `born` property between 1950 (inclusive) and 1960 (inclusive). 
The filtered nodes are then ordered in descending order by their `born` property.
Finally, the query returns the names of the first 5 `Person` nodes, which represent the 5 people born between 1950 and 1960.

```cypher
MATCH (p:Person)
WHERE 1950 <= p.born <= 1960
RETURN p.name
ORDER BY p.born DESC
LIMIT 5
```"
Which movies were released between 1990 and 2000?  Limit to 5 results.,movies,"<explanation>
This query looks for movies with a release date between 1990 and 2000 (inclusive) and then returns the titles of those movies. 
It limits the results to the top 5.

1. **MATCH (m:Movie)** - This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released >= 1990 AND m.released <= 2000** - This line filters the matched movies to only include those released between 1990 and 2000.
3. **RETURN m.title** - This line specifies that we want to return the title of each movie.
4. **LIMIT 5** - This line limits the number of results returned to 5. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN m.title
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN m.title
LIMIT 5","This query looks for movies with a release date between 1990 and 2000 (inclusive) and then returns the titles of those movies. 
It limits the results to the top 5.

1. **MATCH (m:Movie)** - This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released >= 1990 AND m.released <= 2000** - This line filters the matched movies to only include those released between 1990 and 2000.
3. **RETURN m.title** - This line specifies that we want to return the title of each movie.
4. **LIMIT 5** - This line limits the number of results returned to 5."
Find the names of 3 people who acted in movies released in 1995.,movies,"<explanation>
This query looks for all movies released in 1995, then identifies all people who acted in those movies.  Finally, it limits the result set to the first 3 actors found.

1. **Match Movies:** `MATCH (m:Movie {released: 1995})` locates all nodes with the label ""Movie"" and the property ""released"" equal to 1995.
2. **Match Actors:**  `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all ""Person"" nodes that have an ""ACTED_IN"" relationship with the movies found in the previous step.
3. **Return Names:** `RETURN p.name` specifies that the ""name"" property of the ""Person"" nodes should be returned as the result.
4. **Limit results:** `LIMIT 3` limits the number of results to 3.
</explanation>
```cypher
MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3
```",Evaluation query,"MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 3","This query looks for all movies released in 1995, then identifies all people who acted in those movies.  Finally, it limits the result set to the first 3 actors found.

1. **Match Movies:** `MATCH (m:Movie {released: 1995})` locates all nodes with the label ""Movie"" and the property ""released"" equal to 1995.
2. **Match Actors:**  `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all ""Person"" nodes that have an ""ACTED_IN"" relationship with the movies found in the previous step.
3. **Return Names:** `RETURN p.name` specifies that the ""name"" property of the ""Person"" nodes should be returned as the result.
4. **Limit results:** `LIMIT 3` limits the number of results to 3."
What are the taglines of the 5 movies with the fewest votes?,movies,"<explanation>
This query first matches all Movie nodes. Then it orders them by the number of votes in ascending order and limits the results to the top 5. Finally, it returns the taglines of these 5 movies.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them to the variable `m`.
2. **RETURN m.tagline**: This line returns the tagline property of each movie node (`m`).
3. **ORDER BY m.votes ASC**: This line orders the results in ascending order based on the 'votes' property of the movie nodes.
4. **LIMIT 5**: This line limits the number of results returned to 5.
</explanation>
```cypher
MATCH (m:Movie)
RETURN m.tagline
ORDER BY m.votes ASC
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
RETURN m.tagline
ORDER BY m.votes ASC
LIMIT 5","This query first matches all Movie nodes. Then it orders them by the number of votes in ascending order and limits the results to the top 5. Finally, it returns the taglines of these 5 movies.

1. **MATCH (m:Movie)**: This line matches all nodes with the label ""Movie"" and assigns them to the variable `m`.
2. **RETURN m.tagline**: This line returns the tagline property of each movie node (`m`).
3. **ORDER BY m.votes ASC**: This line orders the results in ascending order based on the 'votes' property of the movie nodes.
4. **LIMIT 5**: This line limits the number of results returned to 5."
What are the names of the people who directed movies released after 2000? Limit to 3.,movies,"<explanation>
This query starts with the `Movie` nodes and filters them down to those released after 2000. Then, it traverses the `DIRECTED` relationships from those movies to the `Person` nodes who directed them. Finally, it returns the `name` property of those people, limited to the first 3 results. 
<explanation>
```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.released > 2000
RETURN p.name
LIMIT 3",
List the titles of 3 movies Keanu Reeves acted in.,movies,"<explanation>
This query looks for a person node with the name ""Keanu Reeves"" and then traverses the ACTED_IN relationships to find movies the person has acted in. It then returns the titles of those movies.  We limit the returned movies to 3 to satisfy the user's request. 
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title
LIMIT 3","This query looks for a person node with the name ""Keanu Reeves"" and then traverses the ACTED_IN relationships to find movies the person has acted in. It then returns the titles of those movies.  We limit the returned movies to 3 to satisfy the user's request."
Which people born before 1960 acted in movies released after 2000? Limit to 5.,movies,"<explanation>
This query starts by matching all people born before 1960. Then it traverses the `ACTED_IN` relationship to find the movies they acted in. It filters these movies to only those released after 2000. Finally, it returns the names of the actors and the titles of the movies, limiting the result set to 5.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 2000
RETURN p.name, m.title
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 2000
RETURN p.name, m.title
LIMIT 5","This query starts by matching all people born before 1960. Then it traverses the `ACTED_IN` relationship to find the movies they acted in. It filters these movies to only those released after 2000. Finally, it returns the names of the actors and the titles of the movies, limiting the result set to 5."
"What are the roles played by Laurence Fishburne in ""The Matrix Revolutions""?",movies,"<explanation>
1. We start by matching the movie with the title ""The Matrix Revolutions"".
2. Then we match the person with the name ""Laurence Fishburne"".
3. We need to find the ACTED_IN relationship that connects the person and the movie.
4. Finally, we return the roles property of the ACTED_IN relationship.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person {name: ""Laurence Fishburne""})
MATCH (p)-[ai:ACTED_IN]->(m)
RETURN ai.roles
```",Evaluation query,"MATCH (m:Movie {title: ""The Matrix Revolutions""})
MATCH (p:Person {name: ""Laurence Fishburne""})
MATCH (p)-[ai:ACTED_IN]->(m)
RETURN ai.roles","1. We start by matching the movie with the title ""The Matrix Revolutions"".
2. Then we match the person with the name ""Laurence Fishburne"".
3. We need to find the ACTED_IN relationship that connects the person and the movie.
4. Finally, we return the roles property of the ACTED_IN relationship."
List the names of 5 people who follow Tom Hanks.,movies,"<explanation>
1. **Find the node with the name ""Tom Hanks""**: We start by matching the `Person` node with the name ""Tom Hanks.""
2. **Traverse the FOLLOWS relationships**: We then traverse the `FOLLOWS` relationships outgoing from Tom Hanks to find the people who follow him.
3. **Return the names of the followers**: We return the `name` property of these people.
4. **Limit the result to 5**: We limit the number of results to 5. 
</explanation>
```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:FOLLOWS]->(follower)
RETURN follower.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: ""Tom Hanks""})-[:FOLLOWS]->(follower)
RETURN follower.name
LIMIT 5","1. **Find the node with the name ""Tom Hanks""**: We start by matching the `Person` node with the name ""Tom Hanks.""
2. **Traverse the FOLLOWS relationships**: We then traverse the `FOLLOWS` relationships outgoing from Tom Hanks to find the people who follow him.
3. **Return the names of the followers**: We return the `name` property of these people.
4. **Limit the result to 5**: We limit the number of results to 5."
"What is the rating given by the first 3 people who reviewed ""Apollo 13""?",movies,"<explanation>
1. We start by matching the movie with the title ""Apollo 13"".
2. We then traverse the `REVIEWED` relationships from the movie node to the people nodes.
3. We use `WITH` to order the reviewers by their internal ID to ensure consistent ordering.
4. We limit the result to the first 3 reviewers.
5. Finally, we return the rating given by each of the first 3 reviewers.

```cypher
MATCH (m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:REVIEWED]->(m)
WITH p, m
ORDER BY id(p)
LIMIT 3
RETURN p.rating
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:REVIEWED]->(m)
WITH p, m
ORDER BY id(p)
LIMIT 3
RETURN p.rating
```",Evaluation query,"MATCH (m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:REVIEWED]->(m)
WITH p, m
ORDER BY id(p)
LIMIT 3
RETURN p.rating","1. We start by matching the movie with the title ""Apollo 13"".
2. We then traverse the `REVIEWED` relationships from the movie node to the people nodes.
3. We use `WITH` to order the reviewers by their internal ID to ensure consistent ordering.
4. We limit the result to the first 3 reviewers.
5. Finally, we return the rating given by each of the first 3 reviewers.

```cypher
MATCH (m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:REVIEWED]->(m)
WITH p, m
ORDER BY id(p)
LIMIT 3
RETURN p.rating
```"
Find the summaries of 5 reviews with a rating greater than 90.,movies,"<explanation>
This query looks for all `REVIEWED` relationships with a rating property greater than 90 and returns the summary of the top 5. 
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
WHERE r.rating > 90
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
WHERE r.rating > 90
RETURN r.summary
LIMIT 5",This query looks for all `REVIEWED` relationships with a rating property greater than 90 and returns the summary of the top 5.
What are the titles of the 3 movies produced by Joel Silver?,movies,"<explanation>
This query starts with finding the Person node with the name ""Joel Silver"". From there, it traverses the PRODUCED relationships to find all movies produced by him. Finally, it returns the titles of those movies. 

1. **Find the person named ""Joel Silver""**: `MATCH (p:Person {name: ""Joel Silver""})`
2. **Traverse the PRODUCED relationships**: `-[:PRODUCED]->(m:Movie)`
3. **Return the titles of the movies**: `RETURN m.title`
4. **Limit to 3 results**: `LIMIT 3`
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title
LIMIT 3","This query starts with finding the Person node with the name ""Joel Silver"". From there, it traverses the PRODUCED relationships to find all movies produced by him. Finally, it returns the titles of those movies. 

1. **Find the person named ""Joel Silver""**: `MATCH (p:Person {name: ""Joel Silver""})`
2. **Traverse the PRODUCED relationships**: `-[:PRODUCED]->(m:Movie)`
3. **Return the titles of the movies**: `RETURN m.title`
4. **Limit to 3 results**: `LIMIT 3`"
List the names of the people who wrote and directed the same movie. Limit to 3.,movies,"<explanation>
This query starts with finding all `Person` nodes who have both `WROTE` and `DIRECTED` relationships with a `Movie`. 
It achieves this by using two `MATCH` clauses, one for each relationship type, and then using a `WHERE` clause to ensure we are referring to the same `Person` and `Movie` nodes. 
The `WITH` clause allows us to perform aggregation and pass the distinct person names to the `RETURN` clause.
Finally, we use `LIMIT` to restrict the results to the first three found.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
WITH DISTINCT p.name AS personName
RETURN personName LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
WITH DISTINCT p.name AS personName
RETURN personName LIMIT 3","This query starts with finding all `Person` nodes who have both `WROTE` and `DIRECTED` relationships with a `Movie`. 
It achieves this by using two `MATCH` clauses, one for each relationship type, and then using a `WHERE` clause to ensure we are referring to the same `Person` and `Movie` nodes. 
The `WITH` clause allows us to perform aggregation and pass the distinct person names to the `RETURN` clause.
Finally, we use `LIMIT` to restrict the results to the first three found."
Which movies did Hugo Weaving act in before 2000? Limit to 5.,movies,"<explanation>
This query starts by finding the Person node with the name ""Hugo Weaving,"" then traverses the ACTED_IN relationships to find movies that person acted in. It filters these movies to those released before the year 2000 and returns the titles of those movies. Finally, it limits the results to the top 5.
</explanation>
```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
LIMIT 5","This query starts by finding the Person node with the name ""Hugo Weaving,"" then traverses the ACTED_IN relationships to find movies that person acted in. It filters these movies to those released before the year 2000 and returns the titles of those movies. Finally, it limits the results to the top 5."
What are the taglines of the movies released in 1995? Limit to 3.,movies,"<explanation>
This query looks for movies released in 1995 and returns their taglines, limited to the first three results. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:**  We filter these nodes to only include movies where the `released` property is equal to 1995.
3. **RETURN Clause:** We return the `tagline` property of the matched movies.
4. **LIMIT Clause:** We limit the returned results to 3. 

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 1995
RETURN m.tagline
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released = 1995
RETURN m.tagline
LIMIT 3","This query looks for movies released in 1995 and returns their taglines, limited to the first three results. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:**  We filter these nodes to only include movies where the `released` property is equal to 1995.
3. **RETURN Clause:** We return the `tagline` property of the matched movies.
4. **LIMIT Clause:** We limit the returned results to 3."
Find the names of 5 people born after 1960 who acted in movies.,movies,"<explanation>
This query starts by matching all `Person` nodes. Then, it filters these nodes based on the `born` property being greater than 1960 and having an outgoing `ACTED_IN` relationship to a `Movie` node. Finally, it returns the `name` property of the first 5 `Person` nodes that meet these criteria. 
<explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1960
RETURN p.name
LIMIT 5",
What are the released years of the first 3 movies Laurence Fishburne acted in?,movies,"<explanation>
1. We start by finding the person named ""Laurence Fishburne"".
2. We traverse the `ACTED_IN` relationships from Laurence Fishburne to the movies he acted in.
3. We sort these movies by their release year in ascending order.
4. We limit the results to the first 3 movies.
5. Finally, we return the `released` year of these movies.

```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WITH m 
ORDER BY m.released ASC
LIMIT 3
RETURN m.released
```
</explanation>
```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WITH m 
ORDER BY m.released ASC
LIMIT 3
RETURN m.released
```",Evaluation query,"MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WITH m 
ORDER BY m.released ASC
LIMIT 3
RETURN m.released","1. We start by finding the person named ""Laurence Fishburne"".
2. We traverse the `ACTED_IN` relationships from Laurence Fishburne to the movies he acted in.
3. We sort these movies by their release year in ascending order.
4. We limit the results to the first 3 movies.
5. Finally, we return the `released` year of these movies.

```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WITH m 
ORDER BY m.released ASC
LIMIT 3
RETURN m.released
```"
List the names of the people who directed movies with more than 500 votes. Limit to 3.,movies,"<explanation>
1. **Start with Movie nodes:** We begin by matching all `Movie` nodes.
2. **Filter by votes:** We filter these movies to only include those with more than 500 votes (`WHERE m.votes > 500`).
3. **Match directors:** We then traverse the `DIRECTED` relationship to find the `Person` nodes who directed these movies.
4. **Return director names and limit results:** Finally, we return the `name` property of the directors and limit the result set to 3.

```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.votes > 500
RETURN DISTINCT p.name
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.votes > 500
RETURN DISTINCT p.name
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.votes > 500
RETURN DISTINCT p.name
LIMIT 3","1. **Start with Movie nodes:** We begin by matching all `Movie` nodes.
2. **Filter by votes:** We filter these movies to only include those with more than 500 votes (`WHERE m.votes > 500`).
3. **Match directors:** We then traverse the `DIRECTED` relationship to find the `Person` nodes who directed these movies.
4. **Return director names and limit results:** Finally, we return the `name` property of the directors and limit the result set to 3.

```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.votes > 500
RETURN DISTINCT p.name
LIMIT 3
```"
Which movies released before 1990 were reviewed with a rating less than 60? Limit to 5.,movies,"<explanation>
This query starts by matching all `Movie` nodes. Then it uses a `WHERE` clause to filter for movies released before 1990 and that have been reviewed with a rating less than 60. Finally, the query returns the title of the movie and the rating. The `LIMIT` clause is used to limit the number of results to 5. 

1. **Match Movie Nodes:** `MATCH (m:Movie)`
2. **Match Reviewed Relationships:** `MATCH (m)<-[r:REVIEWED]-(p:Person)`
3. **Filter on Release Date and Rating:** `WHERE m.released < 1990 AND r.rating < 60`
4. **Return Movie Title and Rating:** `RETURN m.title, r.rating`
5. **Limit Results:** `LIMIT 5`

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 1990 AND r.rating < 60
RETURN m.title, r.rating
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 1990 AND r.rating < 60
RETURN m.title, r.rating
LIMIT 5","This query starts by matching all `Movie` nodes. Then it uses a `WHERE` clause to filter for movies released before 1990 and that have been reviewed with a rating less than 60. Finally, the query returns the title of the movie and the rating. The `LIMIT` clause is used to limit the number of results to 5. 

1. **Match Movie Nodes:** `MATCH (m:Movie)`
2. **Match Reviewed Relationships:** `MATCH (m)<-[r:REVIEWED]-(p:Person)`
3. **Filter on Release Date and Rating:** `WHERE m.released < 1990 AND r.rating < 60`
4. **Return Movie Title and Rating:** `RETURN m.title, r.rating`
5. **Limit Results:** `LIMIT 5`"
"What are the roles of the first 3 people who acted in ""The Matrix Revolutions""?",movies,"<explanation>
1. We need to find the movie with the title ""The Matrix Revolutions"".
2. Then, traverse the ACTED_IN relationships from the movie to the actors.
3. We'll limit the results to the first 3 actors.
4. Finally, we'll return the collected roles of those actors. 

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[ai:ACTED_IN]-(p:Person)
RETURN ai.roles
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[ai:ACTED_IN]-(p:Person)
RETURN ai.roles
LIMIT 3
```",Evaluation query,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[ai:ACTED_IN]-(p:Person)
RETURN ai.roles
LIMIT 3","1. We need to find the movie with the title ""The Matrix Revolutions"".
2. Then, traverse the ACTED_IN relationships from the movie to the actors.
3. We'll limit the results to the first 3 actors.
4. Finally, we'll return the collected roles of those actors. 

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[ai:ACTED_IN]-(p:Person)
RETURN ai.roles
LIMIT 3
```"
Find the summaries of the reviews written by people born after 1960. Limit to 5.,movies,"<explanation>
This query first finds all people born after 1960. Then, it matches those people to the movies they reviewed. Finally, it returns the summaries of those reviews, limiting the result set to 5.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN r.summary
LIMIT 5","This query first finds all people born after 1960. Then, it matches those people to the movies they reviewed. Finally, it returns the summaries of those reviews, limiting the result set to 5."
What are the titles of the movies directed by people born before 1950? Limit to 3.,movies,"<explanation>
This query starts by finding all `Person` nodes where `born` is less than 1950. It then traverses the `DIRECTED` relationships to find all the movies directed by these people. Finally, it returns the `title` property of the first 3 movies.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN m.title
LIMIT 3","This query starts by finding all `Person` nodes where `born` is less than 1950. It then traverses the `DIRECTED` relationships to find all the movies directed by these people. Finally, it returns the `title` property of the first 3 movies."
List the names of the people who produced movies with less than 100 votes. Limit to 5.,movies,"<explanation>
This query starts by matching all people who PRODUCED movies. Then it filters these people based on the movie votes being less than 100. Finally, it returns the names of the first 5 people returned. 

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE movie.votes < 100
WITH DISTINCT person
RETURN person.name
LIMIT 5
```
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE movie.votes < 100
WITH DISTINCT person
RETURN person.name
LIMIT 5
```",Evaluation query,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE movie.votes < 100
WITH DISTINCT person
RETURN person.name
LIMIT 5","This query starts by matching all people who PRODUCED movies. Then it filters these people based on the movie votes being less than 100. Finally, it returns the names of the first 5 people returned. 

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE movie.votes < 100
WITH DISTINCT person
RETURN person.name
LIMIT 5
```"
Which movies released after 2005 were acted in by people born before 1965? Limit to 3.,movies,"<explanation>
This query first identifies movies released after 2005. Then it checks for actors related to these movies who were born before 1965. Finally, it returns the movie titles and limits the result to the top 3.
</explanation>
```cypher
MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2005 AND p.born < 1965
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE m.released > 2005 AND p.born < 1965
RETURN m.title
LIMIT 3","This query first identifies movies released after 2005. Then it checks for actors related to these movies who were born before 1965. Finally, it returns the movie titles and limits the result to the top 3."
What are the taglines of the movies reviewed with a rating greater than 80? Limit to 5.,movies,"<explanation>
This query starts with the Person nodes and looks for outgoing REVIEWED relationships to Movie nodes. It filters for reviews with a rating greater than 80 and returns the tagline of the associated movies. Finally, it limits the results to 5.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
RETURN m.tagline
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
RETURN m.tagline
LIMIT 5","This query starts with the Person nodes and looks for outgoing REVIEWED relationships to Movie nodes. It filters for reviews with a rating greater than 80 and returns the tagline of the associated movies. Finally, it limits the results to 5."
"Find the born year of the first 3 people who directed ""Apollo 13"".",movies,"<explanation>
This query first matches the movie with the title ""Apollo 13"". Then it traverses the DIRECTED relationships from those movies to the people who directed them. It then orders these people by their born year in ascending order, limits the result to the first 3 people, and returns their born years.

```cypher
MATCH (m:Movie {title: ""Apollo 13""})<-[:DIRECTED]-(p:Person)
WITH p 
ORDER BY p.born
LIMIT 3
RETURN p.born
```
</explanation>",Evaluation query,"MATCH (m:Movie {title: ""Apollo 13""})<-[:DIRECTED]-(p:Person)
WITH p 
ORDER BY p.born
LIMIT 3
RETURN p.born","This query first matches the movie with the title ""Apollo 13"". Then it traverses the DIRECTED relationships from those movies to the people who directed them. It then orders these people by their born year in ascending order, limits the result to the first 3 people, and returns their born years.

```cypher
MATCH (m:Movie {title: ""Apollo 13""})<-[:DIRECTED]-(p:Person)
WITH p 
ORDER BY p.born
LIMIT 3
RETURN p.born
```"
What are the summaries of the reviews for movies released in 1995? Limit to 3.,movies,"<explanation>
1. **Find movies released in 1995:**
   - Start with the `Movie` node.
   - Filter movies by `released` property equal to 1995.
2. **Find reviews for these movies:**
   - Traverse the `REVIEWED` relationship from those movies.
3. **Get the review summaries:**
   - Return the `summary` property of the `REVIEWED` relationships.
4. **Limit results to 3:**
   - Use `LIMIT` to restrict the number of returned summaries to 3.

```cypher
MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 3
```",Evaluation query,"MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 3","1. **Find movies released in 1995:**
   - Start with the `Movie` node.
   - Filter movies by `released` property equal to 1995.
2. **Find reviews for these movies:**
   - Traverse the `REVIEWED` relationship from those movies.
3. **Get the review summaries:**
   - Return the `summary` property of the `REVIEWED` relationships.
4. **Limit results to 3:**
   - Use `LIMIT` to restrict the number of returned summaries to 3.

```cypher
MATCH (m:Movie {released: 1995})
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 3
```"
"List the titles of the 5 movies with ""The"" in their title.",movies,"<explanation>
This query looks for movies with ""The"" in their title and returns the top 5 titles.

1. **MATCH**: We start by finding all `Movie` nodes.
2. **WHERE**: We filter these movies to only include those with ""The"" in the title using the `CONTAINS` keyword.
3. **WITH** This acts as an intermediate step to use the aggregation function `count(*)`
4. **RETURN**:  We return the `title` of the movie.
5. **LIMIT**: We limit the returned results to the top 5.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
WITH m, count(*) AS count
RETURN m.title
ORDER BY count DESC
LIMIT 5
```
</explanation>",Evaluation query,"MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
WITH m, count(*) AS count
RETURN m.title
ORDER BY count DESC
LIMIT 5","This query looks for movies with ""The"" in their title and returns the top 5 titles.

1. **MATCH**: We start by finding all `Movie` nodes.
2. **WHERE**: We filter these movies to only include those with ""The"" in the title using the `CONTAINS` keyword.
3. **WITH** This acts as an intermediate step to use the aggregation function `count(*)`
4. **RETURN**:  We return the `title` of the movie.
5. **LIMIT**: We limit the returned results to the top 5.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
WITH m, count(*) AS count
RETURN m.title
ORDER BY count DESC
LIMIT 5
```"
"What are the names of people who acted in movies with ""Matrix"" in the title? Limit to 3.",movies,"<explanation>
This query starts by finding movies with ""Matrix"" in their title. Then, it traverses the ACTED_IN relationships to find the actors. Lastly, it limits the results to 3 and returns the actors' names. 

1. **MATCH (m:Movie) WHERE m.title CONTAINS ""Matrix""**: This part finds all movies that have ""Matrix"" in their title.
2. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This part finds all persons related to the previously found movies through the ""ACTED_IN"" relationship. 
3. **RETURN DISTINCT p.name LIMIT 3**: This part returns the names of the persons found, limits the results to 3, and ensures distinct names are returned.
</explanation>
```cypher
MATCH (m:Movie) WHERE m.title CONTAINS ""Matrix""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name LIMIT 3
```",Evaluation query,"MATCH (m:Movie) WHERE m.title CONTAINS ""Matrix""
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name LIMIT 3","This query starts by finding movies with ""Matrix"" in their title. Then, it traverses the ACTED_IN relationships to find the actors. Lastly, it limits the results to 3 and returns the actors' names. 

1. **MATCH (m:Movie) WHERE m.title CONTAINS ""Matrix""**: This part finds all movies that have ""Matrix"" in their title.
2. **MATCH (p:Person)-[:ACTED_IN]->(m)**: This part finds all persons related to the previously found movies through the ""ACTED_IN"" relationship. 
3. **RETURN DISTINCT p.name LIMIT 3**: This part returns the names of the persons found, limits the results to 3, and ensures distinct names are returned."
Which movies released after 2000 have more than 100 votes? Limit to 5.,movies,"<explanation>
This query starts with all movies, filters them down to those released after 2000 with more than 100 votes, and returns the title of those movies. Finally, it limits the result to 5.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released > 2000 AND m.votes > 100** - This line filters the matched movies to only include those released after 2000 and have more than 100 votes.
3. **RETURN m.title** - This line specifies that we want to return the title of each movie that meets our criteria.
4. **LIMIT 5** - This line limits the number of results returned to 5.
```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND m.votes > 100
RETURN m.title
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND m.votes > 100
RETURN m.title
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released > 2000 AND m.votes > 100
RETURN m.title
LIMIT 5","This query starts with all movies, filters them down to those released after 2000 with more than 100 votes, and returns the title of those movies. Finally, it limits the result to 5.

1. **MATCH (m:Movie)** - This line matches all nodes with the label ""Movie"" and assigns them the variable ""m"".
2. **WHERE m.released > 2000 AND m.votes > 100** - This line filters the matched movies to only include those released after 2000 and have more than 100 votes.
3. **RETURN m.title** - This line specifies that we want to return the title of each movie that meets our criteria.
4. **LIMIT 5** - This line limits the number of results returned to 5.
```cypher
MATCH (m:Movie)
WHERE m.released > 2000 AND m.votes > 100
RETURN m.title
LIMIT 5
```"
Find the release years of the 3 movies with the lowest number of votes.,movies,"<explanation>
1. **Find movies with the lowest vote count**: Order all movies by their `votes` property in ascending order and limit the result to the top 3.
2. **Extract release years**: From the 3 movies, retrieve their `released` property, representing the release year.

```cypher
MATCH (m:Movie)
RETURN m.released AS releaseYear, m.votes
ORDER BY m.votes ASC
LIMIT 3
```
</explanation>",Evaluation query,"MATCH (m:Movie)
RETURN m.released AS releaseYear, m.votes
ORDER BY m.votes ASC
LIMIT 3","1. **Find movies with the lowest vote count**: Order all movies by their `votes` property in ascending order and limit the result to the top 3.
2. **Extract release years**: From the 3 movies, retrieve their `released` property, representing the release year.

```cypher
MATCH (m:Movie)
RETURN m.released AS releaseYear, m.votes
ORDER BY m.votes ASC
LIMIT 3
```"
What are the taglines of movies acted in by Keanu Reeves? Limit to 3.,movies,"<explanation>
This query starts by finding the person node with the name 'Keanu Reeves'. Then, it traverses the ACTED_IN relationships outgoing from that node to find movies. For these movies, we return the tagline property. We also limit the number of results to 3. 
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
RETURN m.tagline
LIMIT 3","This query starts by finding the person node with the name 'Keanu Reeves'. Then, it traverses the ACTED_IN relationships outgoing from that node to find movies. For these movies, we return the tagline property. We also limit the number of results to 3."
List the names of people who directed or produced movies released before 1990. Limit to 5.,movies,"<explanation>
This query starts by finding all movies released before 1990. It then traverses the DIRECTED and PRODUCED relationships from those movies to find the people who directed or produced them. Finally, it returns the names of those people, limiting the results to the top 5. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".

2. **WHERE m.released < 1990**: This line filters the matched movies to only include those released before 1990.

3. **WITH m MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m)**: This line starts by using WITH to carry over the filtered movies from the previous step. Then it matches all ""Person"" nodes that have either a ""DIRECTED"" or ""PRODUCED"" relationship to the filtered movies.

4. **RETURN DISTINCT p.name LIMIT 5**: This line returns the distinct names of the people found in the previous step, limiting the results to 5.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1990
WITH m MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m)
RETURN DISTINCT p.name LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released < 1990
WITH m MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m)
RETURN DISTINCT p.name LIMIT 5","This query starts by finding all movies released before 1990. It then traverses the DIRECTED and PRODUCED relationships from those movies to find the people who directed or produced them. Finally, it returns the names of those people, limiting the results to the top 5. 

1. **MATCH (m:Movie)**: This line starts by matching all nodes with the label ""Movie"" and assigns them the variable ""m"".

2. **WHERE m.released < 1990**: This line filters the matched movies to only include those released before 1990.

3. **WITH m MATCH (p:Person)-[:DIRECTED|:PRODUCED]->(m)**: This line starts by using WITH to carry over the filtered movies from the previous step. Then it matches all ""Person"" nodes that have either a ""DIRECTED"" or ""PRODUCED"" relationship to the filtered movies.

4. **RETURN DISTINCT p.name LIMIT 5**: This line returns the distinct names of the people found in the previous step, limiting the results to 5."
Which movies were reviewed with a rating between 70 and 90? Limit to 3.,movies,"<explanation>
This query looks for all movies that have a `REVIEWED` relationship with a `rating` property between 70 and 90. It returns the titles of those movies, limiting the results to 3.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies (`m`) that have been reviewed by a person (`p`) through the `REVIEWED` relationship (`r`).
2. **WHERE r.rating >= 70 AND r.rating <= 90**: This filters the matches to only include reviews with a rating between 70 and 90 (inclusive).
3. **RETURN m.title**: This returns the title of each movie that meets the criteria.
4. **LIMIT 3**: This limits the number of results returned to 3.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating >= 70 AND r.rating <= 90
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating >= 70 AND r.rating <= 90
RETURN m.title
LIMIT 3","This query looks for all movies that have a `REVIEWED` relationship with a `rating` property between 70 and 90. It returns the titles of those movies, limiting the results to 3.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies (`m`) that have been reviewed by a person (`p`) through the `REVIEWED` relationship (`r`).
2. **WHERE r.rating >= 70 AND r.rating <= 90**: This filters the matches to only include reviews with a rating between 70 and 90 (inclusive).
3. **RETURN m.title**: This returns the title of each movie that meets the criteria.
4. **LIMIT 3**: This limits the number of results returned to 3."
What are the roles of Hugo Weaving in the movies he acted in? Limit to 5.,movies,"<explanation>
This query starts with finding the person node with the name ""Hugo Weaving"", then traverses the ACTED_IN relationships to the connected Movie nodes. Finally, it returns the roles property of those ACTED_IN relationships.

1. **MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)** - This part finds all movies where Hugo Weaving acted.
2. **RETURN m.title, p.name, relationships(p, m)[0].roles** - This part returns the title of the movie, the name of the actor (Hugo Weaving), and the roles associated with the ACTED_IN relationship.
3. **LIMIT 5** - This part limits the result to 5 movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, p.name, relationships(p, m)[0].roles
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, p.name, relationships(p, m)[0].roles
LIMIT 5","This query starts with finding the person node with the name ""Hugo Weaving"", then traverses the ACTED_IN relationships to the connected Movie nodes. Finally, it returns the roles property of those ACTED_IN relationships.

1. **MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)** - This part finds all movies where Hugo Weaving acted.
2. **RETURN m.title, p.name, relationships(p, m)[0].roles** - This part returns the title of the movie, the name of the actor (Hugo Weaving), and the roles associated with the ACTED_IN relationship.
3. **LIMIT 5** - This part limits the result to 5 movies."
Find the born years of the people who wrote movies released after 2000. Limit to 3.,movies,"<explanation>
This query starts by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node. 
It then filters these pairs based on the `released` property of the movie being greater than 2000. 
Finally, the query returns the `born` property of the `Person` nodes and limits the results to 3. 
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released > 2000
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released > 2000
RETURN p.born
LIMIT 3","This query starts by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node. 
It then filters these pairs based on the `released` property of the movie being greater than 2000. 
Finally, the query returns the `born` property of the `Person` nodes and limits the results to 3."
What are the summaries of reviews with a rating less than 60? Limit to 5.,movies,"<explanation>
This query looks for all reviews with a rating less than 60 and returns the summary of those reviews. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This part of the query matches all relationships of type `REVIEWED` between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating < 60**: This filters the matched relationships to only include those where the `rating` property is less than 60.
3. **RETURN r.summary**: This returns the `summary` property of the matched relationships.
4. **LIMIT 5**: This limits the number of returned results to 5. 

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN r.summary
LIMIT 5","This query looks for all reviews with a rating less than 60 and returns the summary of those reviews. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This part of the query matches all relationships of type `REVIEWED` between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating < 60**: This filters the matched relationships to only include those where the `rating` property is less than 60.
3. **RETURN r.summary**: This returns the `summary` property of the matched relationships.
4. **LIMIT 5**: This limits the number of returned results to 5."
List the titles of movies produced by people born between 1950 and 1960. Limit to 3.,movies,"<explanation>
This Cypher query will identify movies produced by individuals born between 1950 and 1960 and list up to three of their titles.

1. **MATCH (person:Person)-[:PRODUCED]->(movie:Movie)**: We start by matching all ""Person"" nodes that have a ""PRODUCED"" relationship with ""Movie"" nodes.
2. **WHERE person.born >= 1950 AND person.born <= 1960**: We filter for ""Person"" nodes where the ""born"" property falls within the range of 1950 and 1960 (inclusive).
3. **RETURN DISTINCT movie.title**: We return the ""title"" property of the ""Movie"" nodes connected to the filtered ""Person"" nodes. ""DISTINCT"" ensures we don't get duplicate titles.
4. **LIMIT 3**: We limit the number of returned movie titles to a maximum of 3. 
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE person.born >= 1950 AND person.born <= 1960
RETURN DISTINCT movie.title
LIMIT 3
```",Evaluation query,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)
WHERE person.born >= 1950 AND person.born <= 1960
RETURN DISTINCT movie.title
LIMIT 3","This Cypher query will identify movies produced by individuals born between 1950 and 1960 and list up to three of their titles.

1. **MATCH (person:Person)-[:PRODUCED]->(movie:Movie)**: We start by matching all ""Person"" nodes that have a ""PRODUCED"" relationship with ""Movie"" nodes.
2. **WHERE person.born >= 1950 AND person.born <= 1960**: We filter for ""Person"" nodes where the ""born"" property falls within the range of 1950 and 1960 (inclusive).
3. **RETURN DISTINCT movie.title**: We return the ""title"" property of the ""Movie"" nodes connected to the filtered ""Person"" nodes. ""DISTINCT"" ensures we don't get duplicate titles.
4. **LIMIT 3**: We limit the number of returned movie titles to a maximum of 3."
Which people acted in movies released in the same year they were born? Limit to 5.,movies,"<explanation>
This query starts with a match on people and movies connected through the `ACTED_IN` relationship.  Then it filters down to only the people and movies where the person's birth year (`p.born`) matches the movie's release year (`m.released`). Finally, it returns the names of the people and limits the results to 5. 
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = m.released
RETURN p.name
LIMIT 5","This query starts with a match on people and movies connected through the `ACTED_IN` relationship.  Then it filters down to only the people and movies where the person's birth year (`p.born`) matches the movie's release year (`m.released`). Finally, it returns the names of the people and limits the results to 5."
What are the taglines of movies directed by people born before 1960? Limit to 3.,movies,"<explanation>
This query will find all directors born before 1960, match their directed movies, and then return the taglines of those movies, limiting the result to the top 3.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part finds all Person nodes who have a DIRECTED relationship to a Movie node, creating a paired list of directors and their movies. 
2. **WHERE p.born < 1960**:  This filters the list of directors, keeping only those born before 1960.
3. **RETURN DISTINCT m.tagline LIMIT 3**: This returns the taglines of the movies directed by the filtered directors, limiting the results to the first three distinct taglines.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960
RETURN DISTINCT m.tagline LIMIT 3","This query will find all directors born before 1960, match their directed movies, and then return the taglines of those movies, limiting the result to the top 3.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)**: This part finds all Person nodes who have a DIRECTED relationship to a Movie node, creating a paired list of directors and their movies. 
2. **WHERE p.born < 1960**:  This filters the list of directors, keeping only those born before 1960.
3. **RETURN DISTINCT m.tagline LIMIT 3**: This returns the taglines of the movies directed by the filtered directors, limiting the results to the first three distinct taglines."
Find the number of votes for the movies released before 1980. Limit to 5.,movies,"<explanation>
1. **Find movies released before 1980:** We start by matching all ""Movie"" nodes with the ""released"" property less than 1980.
2. **Get the number of votes for each movie:** We use the ""votes"" property of the ""Movie"" nodes.
3. **Limit the result to 5:** We use the ""LIMIT"" clause to restrict the number of results to 5.

```cypher
MATCH (m:Movie)
WHERE m.released < 1980
RETURN m.title, m.votes
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released < 1980
RETURN m.title, m.votes
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released < 1980
RETURN m.title, m.votes
LIMIT 5","1. **Find movies released before 1980:** We start by matching all ""Movie"" nodes with the ""released"" property less than 1980.
2. **Get the number of votes for each movie:** We use the ""votes"" property of the ""Movie"" nodes.
3. **Limit the result to 5:** We use the ""LIMIT"" clause to restrict the number of results to 5.

```cypher
MATCH (m:Movie)
WHERE m.released < 1980
RETURN m.title, m.votes
LIMIT 5
```"
What are the roles of people born after 1960 in movies released after 2000? Limit to 3.,movies,"<explanation>
This query starts by matching people born after 1960 and movies released after 2000. It then matches when these people have acted in these movies. The query returns the person's name, the movie title, and the roles they played. Finally, the query limits the result to 3.
</explanation>
```cypher
MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.released > 2000
RETURN p.name, m.title, ai.roles
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[ai:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.released > 2000
RETURN p.name, m.title, ai.roles
LIMIT 3","This query starts by matching people born after 1960 and movies released after 2000. It then matches when these people have acted in these movies. The query returns the person's name, the movie title, and the roles they played. Finally, the query limits the result to 3."
List the names of people who followed someone born before 1950. Limit to 5.,movies,"<explanation>
1. We need to find people who follow other people. So we start with a `MATCH` clause looking for `Person` nodes that have an outgoing `FOLLOWS` relationship to other `Person` nodes.
2. The question asks for those following someone born before 1950, so we add a `WHERE` clause to filter for `Person` nodes where the `born` property is less than 1950.
3. Finally, we want the names of those followers, so we `RETURN` the `name` property of the `Person` nodes that are following. 
4. We use `LIMIT` to return a maximum of 5 names.
</explanation>
```cypher
MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WHERE followed.born < 1950
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WHERE followed.born < 1950
RETURN p.name
LIMIT 5","1. We need to find people who follow other people. So we start with a `MATCH` clause looking for `Person` nodes that have an outgoing `FOLLOWS` relationship to other `Person` nodes.
2. The question asks for those following someone born before 1950, so we add a `WHERE` clause to filter for `Person` nodes where the `born` property is less than 1950.
3. Finally, we want the names of those followers, so we `RETURN` the `name` property of the `Person` nodes that are following. 
4. We use `LIMIT` to return a maximum of 5 names."
Which movies released between 1990 and 2000 have less than 200 votes? Limit to 3.,movies,"<explanation>
This query looks for movies released between 1990 and 2000 with less than 200 votes and returns the title of those movies. 
1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies based on the `released` property and the `votes` property.
3. **WITH Clause:** We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN Clause:** We return the `title` of the movie.
5. **LIMIT Clause:** We limit the returned results to 3.
</explanation>
```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000 AND m.votes < 200
WITH m
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)
WHERE 1990 <= m.released <= 2000 AND m.votes < 200
WITH m
RETURN m.title
LIMIT 3","This query looks for movies released between 1990 and 2000 with less than 200 votes and returns the title of those movies. 
1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter these movies based on the `released` property and the `votes` property.
3. **WITH Clause:** We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN Clause:** We return the `title` of the movie.
5. **LIMIT Clause:** We limit the returned results to 3."
What are the summaries of reviews for movies with more than 500 votes? Limit to 5.,movies,"<explanation>
This query starts with finding movies with more than 500 votes. Then it matches to any Person nodes that reviewed those movies. It returns the review summaries, limited to the top 5. 
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.votes > 500
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.votes > 500
RETURN r.summary
LIMIT 5","This query starts with finding movies with more than 500 votes. Then it matches to any Person nodes that reviewed those movies. It returns the review summaries, limited to the top 5."
"Find the born years of people who acted in movies with ""The"" in the title. Limit to 3.",movies,"<explanation>
1. **Match actors who acted in movies with ""The"" in the title:** 
   - Match nodes with the label ""Person"" and assign them to the variable ""p"".
   - Traverse the ""ACTED_IN"" relationship to find movies they acted in. 
   - Filter the movies to include only those where the title property contains ""The"".
2. **Return the born year of the actors and limit to 3:**
   - Return the ""born"" property of the actors ""p"".
   - Limit the results to 3.
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.title CONTAINS 'The'
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.title CONTAINS 'The'
RETURN p.born
LIMIT 3","1. **Match actors who acted in movies with ""The"" in the title:** 
   - Match nodes with the label ""Person"" and assign them to the variable ""p"".
   - Traverse the ""ACTED_IN"" relationship to find movies they acted in. 
   - Filter the movies to include only those where the title property contains ""The"".
2. **Return the born year of the actors and limit to 3:**
   - Return the ""born"" property of the actors ""p"".
   - Limit the results to 3."
What are the release years of movies directed by people born after 1960? Limit to 3.,movies,"<explanation>
1. **MATCH** all people born after 1960 and have directed in movies
2. **WITH** the movie nodes
3. **RETURN** the distinct release years of the movies
4. **LIMIT** the result to 3

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear
LIMIT 3","1. **MATCH** all people born after 1960 and have directed in movies
2. **WITH** the movie nodes
3. **RETURN** the distinct release years of the movies
4. **LIMIT** the result to 3

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear
LIMIT 3
```"
List the names of people who wrote and produced the same movie. Limit to 5.,movies,"<explanation>
This query looks for people who have both WRITTEN and PRODUCED relationships with the same movie. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:PRODUCED]-(p)**: This part of the query matches people who have both WRITTEN and PRODUCED relationships with the same movie.
2. **RETURN DISTINCT p.name LIMIT 5**: This part of the query returns the names of the people found in the previous step and limits the result to the top 5.

</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:PRODUCED]-(p)
RETURN DISTINCT p.name LIMIT 5","This query looks for people who have both WRITTEN and PRODUCED relationships with the same movie. 

1. **MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:PRODUCED]-(p)**: This part of the query matches people who have both WRITTEN and PRODUCED relationships with the same movie.
2. **RETURN DISTINCT p.name LIMIT 5**: This part of the query returns the names of the people found in the previous step and limits the result to the top 5."
Which movies acted in by Laurence Fishburne were released before 2000? Limit to 3.,movies,"<explanation>
This Cypher query first matches all `Person` nodes with the name 'Laurence Fishburne'. Then, it traverses the `ACTED_IN` relationships to find all movies in which Laurence Fishburne acted. The `WHERE` clause filters these movies to only include those released before the year 2000. Finally, the query returns the titles of these movies, limited to the top 3 results.
</explanation>
```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: 'Laurence Fishburne'})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title
LIMIT 3","This Cypher query first matches all `Person` nodes with the name 'Laurence Fishburne'. Then, it traverses the `ACTED_IN` relationships to find all movies in which Laurence Fishburne acted. The `WHERE` clause filters these movies to only include those released before the year 2000. Finally, the query returns the titles of these movies, limited to the top 3 results."
"What are the taglines of movies reviewed with ""amazing"" in the summary? Limit to 3.",movies,"<explanation>
1. We start by matching on the `REVIEWED` relationships that have a summary containing ""amazing"".
2. We then traverse to the `Movie` nodes connected by these relationships.
3. We return the `tagline` property of these movies and limit to 3 results.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'amazing'
RETURN m.tagline
LIMIT 3
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'amazing'
RETURN m.tagline
LIMIT 3
```",Evaluation query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'amazing'
RETURN m.tagline
LIMIT 3","1. We start by matching on the `REVIEWED` relationships that have a summary containing ""amazing"".
2. We then traverse to the `Movie` nodes connected by these relationships.
3. We return the `tagline` property of these movies and limit to 3 results.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE toLower(r.summary) CONTAINS 'amazing'
RETURN m.tagline
LIMIT 3
```"
Find the number of votes for movies reviewed with a rating greater than 90. Limit to 5.,movies,"<explanation>
This query starts by matching all `REVIEWED` relationships with a rating property greater than 90. Then, it returns the count of votes for those movies, limiting the result to 5.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This matches all relationships of type `REVIEWED` between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating > 90**: This filters the matched relationships, keeping only those where the `rating` property is greater than 90.
3. **WITH m.votes AS votes**: This uses WITH to aggregate the results, passing the `votes` property of the movie nodes to the next part of the query.
4. **RETURN votes LIMIT 5**: This returns the `votes` property. The `LIMIT` clause limits the number of returned records to a maximum of 5.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH m.votes AS votes
RETURN votes LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH m.votes AS votes
RETURN votes LIMIT 5","This query starts by matching all `REVIEWED` relationships with a rating property greater than 90. Then, it returns the count of votes for those movies, limiting the result to 5.

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This matches all relationships of type `REVIEWED` between nodes labeled `Person` and `Movie`.
2. **WHERE r.rating > 90**: This filters the matched relationships, keeping only those where the `rating` property is greater than 90.
3. **WITH m.votes AS votes**: This uses WITH to aggregate the results, passing the `votes` property of the movie nodes to the next part of the query.
4. **RETURN votes LIMIT 5**: This returns the `votes` property. The `LIMIT` clause limits the number of returned records to a maximum of 5."
What are the roles of Tom Hanks in movies released after 1990? Limit to 3.,movies,"<explanation>
This query starts with finding the node with name ""Tom Hanks"", then traverses ACTED_IN relationships to find movies he acted in. It filters these movies to those released after 1990, and then returns the movie title and the roles Tom Hanks played in each. Finally it limits the result set to 3 records.

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1990
RETURN m.title AS movie, m.released AS released, collect(p.roles) AS roles
LIMIT 3
```
</explanation>",Evaluation query,"MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1990
RETURN m.title AS movie, m.released AS released, collect(p.roles) AS roles
LIMIT 3","This query starts with finding the node with name ""Tom Hanks"", then traverses ACTED_IN relationships to find movies he acted in. It filters these movies to those released after 1990, and then returns the movie title and the roles Tom Hanks played in each. Finally it limits the result set to 3 records.

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1990
RETURN m.title AS movie, m.released AS released, collect(p.roles) AS roles
LIMIT 3
```"
"List the names of people who produced movies with ""The"" in the title. Limit to 5.",movies,"<explanation>
This Cypher query identifies people who produced movies with ""The"" in the title and returns the top 5 names.

1. **MATCH**: We start by matching all `Person` nodes related to `Movie` nodes through the `PRODUCED` relationship.
2. **WHERE**: We filter these relationships to only include movies where the title contains ""The"".
3. **WITH**: We use `WITH` to pass the filtered `Person` nodes to the next part of the query.
4. **RETURN**: We return the `name` property of the `Person` nodes.
5. **LIMIT**: We limit the results to the top 5.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'The'
WITH p
RETURN p.name
LIMIT 5
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'The'
WITH p
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'The'
WITH p
RETURN p.name
LIMIT 5","This Cypher query identifies people who produced movies with ""The"" in the title and returns the top 5 names.

1. **MATCH**: We start by matching all `Person` nodes related to `Movie` nodes through the `PRODUCED` relationship.
2. **WHERE**: We filter these relationships to only include movies where the title contains ""The"".
3. **WITH**: We use `WITH` to pass the filtered `Person` nodes to the next part of the query.
4. **RETURN**: We return the `name` property of the `Person` nodes.
5. **LIMIT**: We limit the results to the top 5.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.title CONTAINS 'The'
WITH p
RETURN p.name
LIMIT 5
```"
Which movies released before 1990 were directed by people born after 1940? Limit to 3.,movies,"<explanation>
This query starts by matching all ""Movie"" nodes and ""Person"" nodes that are connected by the ""DIRECTED"" relationship. It then filters these results to only include movies released before 1990 and directors born after 1940. Finally, it returns the titles of the movies that fit these criteria and limits the result set to 3.
</explanation>
```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.released < 1990 AND p.born > 1940
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE m.released < 1990 AND p.born > 1940
RETURN m.title
LIMIT 3","This query starts by matching all ""Movie"" nodes and ""Person"" nodes that are connected by the ""DIRECTED"" relationship. It then filters these results to only include movies released before 1990 and directors born after 1940. Finally, it returns the titles of the movies that fit these criteria and limits the result set to 3."
"What are the summaries of reviews with ""fun"" in the summary? Limit to 5.",movies,"<explanation>
This query looks for all `REVIEWED` relationships with the word ""fun"" in the  `summary` property and returns the first 5.

1. **MATCH Clause:** We start by finding all `REVIEWED` relationships.
2. **WHERE Clause:** We filter for relationships where the `summary` property contains ""fun"".
3. **WITH Clause:** We use WITH to avoid implicit aggregation.
4. **RETURN Clause:** We return the `summary` property of the `REVIEWED` relationships. 
5. **LIMIT Clause:** We limit the returned results to 5. 

</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(:Movie)
WHERE toLower(r.summary) CONTAINS ""fun""
WITH r
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (:Person)-[r:REVIEWED]->(:Movie)
WHERE toLower(r.summary) CONTAINS ""fun""
WITH r
RETURN r.summary
LIMIT 5","This query looks for all `REVIEWED` relationships with the word ""fun"" in the  `summary` property and returns the first 5.

1. **MATCH Clause:** We start by finding all `REVIEWED` relationships.
2. **WHERE Clause:** We filter for relationships where the `summary` property contains ""fun"".
3. **WITH Clause:** We use WITH to avoid implicit aggregation.
4. **RETURN Clause:** We return the `summary` property of the `REVIEWED` relationships. 
5. **LIMIT Clause:** We limit the returned results to 5."
Find the born years of people who wrote movies with less than 100 votes. Limit to 3.,movies,"<explanation>
1. We start by matching the pattern ""people who wrote movies"" (`(p:Person)-[:WROTE]->(m:Movie)`).
2. We filter the movies based on the condition that they have less than 100 votes (`WHERE m.votes < 100`).
3. We return the born year of each person (`RETURN p.born`) and limit the result set to 3 records (`LIMIT 3`).

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN p.born
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN p.born
LIMIT 3","1. We start by matching the pattern ""people who wrote movies"" (`(p:Person)-[:WROTE]->(m:Movie)`).
2. We filter the movies based on the condition that they have less than 100 votes (`WHERE m.votes < 100`).
3. We return the born year of each person (`RETURN p.born`) and limit the result set to 3 records (`LIMIT 3`).

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.votes < 100
RETURN p.born
LIMIT 3
```"
What are the release years of movies acted in by Hugo Weaving? Limit to 3.,movies,"<explanation>
This query starts by finding the person node with the name 'Hugo Weaving', then traverses the ACTED_IN relationships to find the movies he acted in. Finally, it returns the release year of those movies and limits the result to 3.
</explanation>
```cypher
MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
RETURN m.released
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: 'Hugo Weaving'})-[:ACTED_IN]->(m:Movie)
RETURN m.released
LIMIT 3","This query starts by finding the person node with the name 'Hugo Weaving', then traverses the ACTED_IN relationships to find the movies he acted in. Finally, it returns the release year of those movies and limits the result to 3."
List the names of people who directed and acted in the same movie. Limit to 5.,movies,"<explanation>
This query starts by finding all Person nodes that have both DIRECTED and ACTED_IN relationships with the same Movie node. 
It then returns the names of those people, limiting the result set to the top 5.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
MATCH (p)-[:ACTED_IN]->(m)
RETURN p.name
LIMIT 5","This query starts by finding all Person nodes that have both DIRECTED and ACTED_IN relationships with the same Movie node. 
It then returns the names of those people, limiting the result set to the top 5."
Which movies released after 2000 were produced by Joel Silver? Limit to 3.,movies,"<explanation>
1. **Start with Joel Silver:** Find the person named ""Joel Silver.""
2. **Traverse PRODUCED relationships:** Follow outgoing `PRODUCED` relationships from Joel Silver to movies he produced.
3. **Filter by release year:** Filter for movies released after the year 2000.
4. **Limit to 3 results:** Limit the returned results to 3 movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
RETURN m.title
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
RETURN m.title
LIMIT 3","1. **Start with Joel Silver:** Find the person named ""Joel Silver.""
2. **Traverse PRODUCED relationships:** Follow outgoing `PRODUCED` relationships from Joel Silver to movies he produced.
3. **Filter by release year:** Filter for movies released after the year 2000.
4. **Limit to 3 results:** Limit the returned results to 3 movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
RETURN m.title
LIMIT 3
```"
What are the taglines of movies reviewed with a rating less than 60? Limit to 3.,movies,"<explanation>
This Cypher query identifies movies with reviews rated less than 60 and returns the taglines of those movies. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies (`m`) that have been reviewed (`REVIEWED`) by a person (`p`).
2. **WHERE r.rating < 60**: This filters the matches to only include reviews where the rating is less than 60.
3. **RETURN DISTINCT m.tagline LIMIT 3**: This returns the taglines (`tagline`) of the movies. The `DISTINCT` keyword ensures that only unique taglines are returned. The `LIMIT 3` clause limits the results to the first three.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN DISTINCT m.tagline LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.rating < 60
RETURN DISTINCT m.tagline LIMIT 3","This Cypher query identifies movies with reviews rated less than 60 and returns the taglines of those movies. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This matches all movies (`m`) that have been reviewed (`REVIEWED`) by a person (`p`).
2. **WHERE r.rating < 60**: This filters the matches to only include reviews where the rating is less than 60.
3. **RETURN DISTINCT m.tagline LIMIT 3**: This returns the taglines (`tagline`) of the movies. The `DISTINCT` keyword ensures that only unique taglines are returned. The `LIMIT 3` clause limits the results to the first three."
"Find the number of votes for movies with ""Matrix"" in the title. Limit to 5.",movies,"<explanation>
1. **Match movies with ""Matrix"" in the title**: We start by finding all movies with the word ""Matrix"" in their title.
2. **Get the number of votes**: For each of these movies, we return their number of votes.
3. **Limit the results**: We limit the results to the top 5 movies with the highest vote count.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.votes
ORDER BY m.votes DESC
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.votes
ORDER BY m.votes DESC
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.votes
ORDER BY m.votes DESC
LIMIT 5","1. **Match movies with ""Matrix"" in the title**: We start by finding all movies with the word ""Matrix"" in their title.
2. **Get the number of votes**: For each of these movies, we return their number of votes.
3. **Limit the results**: We limit the results to the top 5 movies with the highest vote count.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN m.votes
ORDER BY m.votes DESC
LIMIT 5
```"
What are the roles of Keanu Reeves in movies released after 1995? Limit to 3.,movies,"<explanation>
1. **Find Keanu Reeves:** Start by finding the ""Person"" node with the name ""Keanu Reeves.""
2. **Match Movies:** Traverse the ""ACTED_IN"" relationships from Keanu Reeves to the ""Movie"" nodes.
3. **Filter by Release Year:** Filter these movies to only include those released after 1995.
4. **Return Roles:**  For the remaining movies, return the `roles` property of the ""ACTED_IN"" relationships.
5. **Limit results:** Limit the returned results to 3.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title AS movieTitle, collect(m.released) AS released, collect(m.tagline) AS taglines, collect(m.votes) AS votes
LIMIT 3
```
</explanation>",Evaluation query,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title AS movieTitle, collect(m.released) AS released, collect(m.tagline) AS taglines, collect(m.votes) AS votes
LIMIT 3","1. **Find Keanu Reeves:** Start by finding the ""Person"" node with the name ""Keanu Reeves.""
2. **Match Movies:** Traverse the ""ACTED_IN"" relationships from Keanu Reeves to the ""Movie"" nodes.
3. **Filter by Release Year:** Filter these movies to only include those released after 1995.
4. **Return Roles:**  For the remaining movies, return the `roles` property of the ""ACTED_IN"" relationships.
5. **Limit results:** Limit the returned results to 3.

```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title AS movieTitle, collect(m.released) AS released, collect(m.tagline) AS taglines, collect(m.votes) AS votes
LIMIT 3
```"
List the names of people who followed someone born after 1960. Limit to 5.,movies,"<explanation>
This query works in two steps:

1. **Match followed people born after 1960:** 
   - It starts by finding all `Person` nodes where `born` is greater than 1960.
   - Then, it traverses the `FOLLOWS` relationship to find the `Person` nodes who are following them.

2. **Return the names:**
   - It returns the `name` property of the people found in the previous step.
   - The results are limited to the top 5 using `LIMIT`.
</explanation>
```cypher
MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WHERE followed.born > 1960
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WHERE followed.born > 1960
RETURN p.name
LIMIT 5","This query works in two steps:

1. **Match followed people born after 1960:** 
   - It starts by finding all `Person` nodes where `born` is greater than 1960.
   - Then, it traverses the `FOLLOWS` relationship to find the `Person` nodes who are following them.

2. **Return the names:**
   - It returns the `name` property of the people found in the previous step.
   - The results are limited to the top 5 using `LIMIT`."
"Which movies released before 2000 were reviewed with ""compelling"" in the summary? Limit to 3.",movies,"<explanation>
1. **Find movies released before 2000:** We start by matching all `Movie` nodes with the `released` property less than 2000.
2. **Match reviewed relationships:** Then, we match the `REVIEWED` relationships originating from any `Person` node to these movies.
3. **Filter by review summary:** We filter these relationships, keeping only those where the `summary` property contains the word ""compelling"".
4. **Return the movie titles:** Finally, we return the `title` property of the `Movie` nodes connected to the filtered relationships.
5. **Limit the results:** We use `LIMIT` to restrict the output to a maximum of 3 movie titles.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE m.released < 2000 AND r.summary CONTAINS 'compelling'
RETURN m.title
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE m.released < 2000 AND r.summary CONTAINS 'compelling'
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE m.released < 2000 AND r.summary CONTAINS 'compelling'
RETURN m.title
LIMIT 3","1. **Find movies released before 2000:** We start by matching all `Movie` nodes with the `released` property less than 2000.
2. **Match reviewed relationships:** Then, we match the `REVIEWED` relationships originating from any `Person` node to these movies.
3. **Filter by review summary:** We filter these relationships, keeping only those where the `summary` property contains the word ""compelling"".
4. **Return the movie titles:** Finally, we return the `title` property of the `Movie` nodes connected to the filtered relationships.
5. **Limit the results:** We use `LIMIT` to restrict the output to a maximum of 3 movie titles.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE m.released < 2000 AND r.summary CONTAINS 'compelling'
RETURN m.title
LIMIT 3
```"
"What are the summaries of reviews for movies with ""The"" in the title? Limit to 5.",movies,"<explanation>
1. **Find movies with ""The"" in the title:** We can use `MATCH (m:Movie)` to find all movies and then filter using `WHERE m.title CONTAINS 'The'` to only keep those with ""The"" in the title.
2. **Find the reviews for those movies:** We can use `MATCH (p:Person)-[r:REVIEWED]->(m)` to find all `REVIEWED` relationships connected to the movies we found in the previous step.
3. **Return the summaries:** We can use `RETURN r.summary` to return the summary of each review.
4. **Limit to 5 results:** We can use `LIMIT 5` to limit the number of returned results to 5.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 5","1. **Find movies with ""The"" in the title:** We can use `MATCH (m:Movie)` to find all movies and then filter using `WHERE m.title CONTAINS 'The'` to only keep those with ""The"" in the title.
2. **Find the reviews for those movies:** We can use `MATCH (p:Person)-[r:REVIEWED]->(m)` to find all `REVIEWED` relationships connected to the movies we found in the previous step.
3. **Return the summaries:** We can use `RETURN r.summary` to return the summary of each review.
4. **Limit to 5 results:** We can use `LIMIT 5` to limit the number of returned results to 5.

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'The'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
LIMIT 5
```"
Find the born years of people who acted in movies released in 1995. Limit to 3.,movies,"<explanation>
This query starts with all movies released in 1995, then matches people who acted in those movies. Finally, it returns the distinct born years of those people, limited to 3 results. 

1. **Match Movies:** `MATCH (m:Movie) WHERE m.released = 1995` finds all movies released in 1995.
2. **Match Actors:** `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all people who have an ACTED_IN relationship with those movies.
3. **Return Born Years:** `RETURN DISTINCT p.born` returns the distinct born years of those people.
4. **Limit Results:** `LIMIT 3` limits the results to the first 3. 
</explanation>
```cypher
MATCH (m:Movie) WHERE m.released = 1995
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born
LIMIT 3
```",Evaluation query,"MATCH (m:Movie) WHERE m.released = 1995
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.born
LIMIT 3","This query starts with all movies released in 1995, then matches people who acted in those movies. Finally, it returns the distinct born years of those people, limited to 3 results. 

1. **Match Movies:** `MATCH (m:Movie) WHERE m.released = 1995` finds all movies released in 1995.
2. **Match Actors:** `MATCH (p:Person)-[:ACTED_IN]->(m)` finds all people who have an ACTED_IN relationship with those movies.
3. **Return Born Years:** `RETURN DISTINCT p.born` returns the distinct born years of those people.
4. **Limit Results:** `LIMIT 3` limits the results to the first 3."
What are the release years of movies produced by people born before 1950? Limit to 3.,movies,"<explanation>
1. We start by matching all people born before 1950 (`WHERE p.born < 1950`).
2. Then, we traverse the `PRODUCED` relationships to find movies produced by those people.
3. We collect distinct release years (`DISTINCT m.released`) of those movies and alias it as `releaseYear`.
4. We use `LIMIT 3` to get only the first three distinct release years.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1950
RETURN DISTINCT m.released AS releaseYear
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1950
RETURN DISTINCT m.released AS releaseYear
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1950
RETURN DISTINCT m.released AS releaseYear
LIMIT 3","1. We start by matching all people born before 1950 (`WHERE p.born < 1950`).
2. Then, we traverse the `PRODUCED` relationships to find movies produced by those people.
3. We collect distinct release years (`DISTINCT m.released`) of those movies and alias it as `releaseYear`.
4. We use `LIMIT 3` to get only the first three distinct release years.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1950
RETURN DISTINCT m.released AS releaseYear
LIMIT 3
```"
List the names of people who wrote movies reviewed with a rating greater than 80. Limit to 5.,movies,"<explanation>
This query starts by matching all `Person` nodes that have a `WROTE` relationship with a `Movie` node. Then it filters these results to only include those where the `Movie` node also has an incoming `REVIEWED` relationship with a `rating` property greater than 80. Finally, it returns the `name` property of the `Person` nodes and limits the results to 5. 
<explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN DISTINCT p.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating > 80
RETURN DISTINCT p.name
LIMIT 5",
Which movies acted in by Tom Hanks were released after 1995? Limit to 3.,movies,"<explanation>
1. **Match on the person named ""Tom Hanks"".**
2. **Traverse the `ACTED_IN` relationships to find the movies.**
3. **Filter the movies based on the release year being after 1995.**
4. **Return the titles of the movies, limited to the top 3.**

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title
LIMIT 3
```
</explanation>",Evaluation query,"MATCH (p:Person {name: ""Tom Hanks""})-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title
LIMIT 3","1. **Match on the person named ""Tom Hanks"".**
2. **Traverse the `ACTED_IN` relationships to find the movies.**
3. **Filter the movies based on the release year being after 1995.**
4. **Return the titles of the movies, limited to the top 3.**

```cypher
MATCH (p:Person {name: ""Tom Hanks""})-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.title
LIMIT 3
```"
What are the taglines of movies directed by people born after 1950? Limit to 3.,movies,"<explanation>
This query first finds all people born after 1950. Then, it matches those people to the movies they directed. Finally, it returns the taglines of those movies and limits the result set to 3. 
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950
RETURN m.tagline
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950
RETURN m.tagline
LIMIT 3","This query first finds all people born after 1950. Then, it matches those people to the movies they directed. Finally, it returns the taglines of those movies and limits the result set to 3."
"Find the number of votes for movies reviewed with ""funny"" in the summary. Limit to 5.",movies,"<explanation>
This query will first find all movies that have been reviewed with ""funny"" in the summary, then sum up the total number of votes for those movies, limit the result to 5 and return the count.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: We start by matching all movies (`m:Movie`) that have an incoming `REVIEWED` relationship (`r:REVIEWED`) from any person (`p:Person`).
2. **WHERE toLower(r.summary) CONTAINS 'funny'**: This filters the matched movies to include only those where the review summary contains the word ""funny"", case-insensitive.
3. **WITH m, sum(m.votes) AS total_votes**: We use `WITH` to aggregate the results and calculate the `total_votes` by summing up the `votes` property of all matching movies.
4. **RETURN total_votes LIMIT 5**: We return the `total_votes` and limit the result to the top 5 movies. 

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'funny'
WITH m, sum(m.votes) AS total_votes
RETURN total_votes LIMIT 5
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE toLower(r.summary) CONTAINS 'funny'
WITH m, sum(m.votes) AS total_votes
RETURN total_votes LIMIT 5","This query will first find all movies that have been reviewed with ""funny"" in the summary, then sum up the total number of votes for those movies, limit the result to 5 and return the count.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: We start by matching all movies (`m:Movie`) that have an incoming `REVIEWED` relationship (`r:REVIEWED`) from any person (`p:Person`).
2. **WHERE toLower(r.summary) CONTAINS 'funny'**: This filters the matched movies to include only those where the review summary contains the word ""funny"", case-insensitive.
3. **WITH m, sum(m.votes) AS total_votes**: We use `WITH` to aggregate the results and calculate the `total_votes` by summing up the `votes` property of all matching movies.
4. **RETURN total_votes LIMIT 5**: We return the `total_votes` and limit the result to the top 5 movies."
What are the roles of Laurence Fishburne in movies produced by Joel Silver? Limit to 3.,movies,"<explanation>
1. We need to find `Person` nodes with `name` equal to ""Laurence Fishburne"" and ""Joel Silver"".
2. Then we need to traverse the graph from ""Laurence Fishburne"" through `ACTED_IN` relationship to `Movie` nodes.
3. From these `Movie` nodes we need to traverse backwards through `PRODUCED` relationships to check whether they were produced by ""Joel Silver"".
4. Finally we return distinct `roles` properties from `ACTED_IN` relationships.

```cypher
MATCH (laurence:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(movie:Movie)<-[:PRODUCED]-(joel:Person {name: ""Joel Silver""})
RETURN DISTINCT laurence.roles
LIMIT 3
```
</explanation>
```cypher
MATCH (laurence:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(movie:Movie)<-[:PRODUCED]-(joel:Person {name: ""Joel Silver""})
WITH DISTINCT laurence.roles AS roles
UNWIND roles AS role
RETURN role
LIMIT 3
```",Evaluation query,"MATCH (laurence:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(movie:Movie)<-[:PRODUCED]-(joel:Person {name: ""Joel Silver""})
RETURN DISTINCT laurence.roles
LIMIT 3","1. We need to find `Person` nodes with `name` equal to ""Laurence Fishburne"" and ""Joel Silver"".
2. Then we need to traverse the graph from ""Laurence Fishburne"" through `ACTED_IN` relationship to `Movie` nodes.
3. From these `Movie` nodes we need to traverse backwards through `PRODUCED` relationships to check whether they were produced by ""Joel Silver"".
4. Finally we return distinct `roles` properties from `ACTED_IN` relationships.

```cypher
MATCH (laurence:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(movie:Movie)<-[:PRODUCED]-(joel:Person {name: ""Joel Silver""})
RETURN DISTINCT laurence.roles
LIMIT 3
```"
"List the names of people who followed someone who acted in ""The Matrix Revolutions"". Limit to 5.",movies,"<explanation>
1. **Match the movie:** Start by finding the movie with the title ""The Matrix Revolutions"".
2. **Find the actors:** Traverse the ACTED_IN relationship from the movie to find the people who acted in it.
3. **Find the followers:** Traverse the FOLLOWS relationship from the actors to find their followers.
4. **Get follower names:** Return the names of the followers.
5. **Limit results:** Limit the number of returned results to 5.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(actor)<-[:FOLLOWS]-(follower)
RETURN DISTINCT follower.name
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(actor)<-[:FOLLOWS]-(follower)
RETURN DISTINCT follower.name
LIMIT 5
```",Evaluation query,"MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(actor)<-[:FOLLOWS]-(follower)
RETURN DISTINCT follower.name
LIMIT 5","1. **Match the movie:** Start by finding the movie with the title ""The Matrix Revolutions"".
2. **Find the actors:** Traverse the ACTED_IN relationship from the movie to find the people who acted in it.
3. **Find the followers:** Traverse the FOLLOWS relationship from the actors to find their followers.
4. **Get follower names:** Return the names of the followers.
5. **Limit results:** Limit the number of returned results to 5.

```cypher
MATCH (m:Movie {title: ""The Matrix Revolutions""})<-[:ACTED_IN]-(actor)<-[:FOLLOWS]-(follower)
RETURN DISTINCT follower.name
LIMIT 5
```"
Which movies released before 1990 were reviewed with a rating between 70 and 90? Limit to 3.,movies,"<explanation>
This Cypher query identifies movies released before 1990 with reviews rated between 70 and 90, limiting the results to the top 3.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part matches all movies that have been reviewed.
2. **WHERE m.released < 1990 AND r.rating >= 70 AND r.rating <= 90**: This filters for movies released before 1990 and reviews with ratings between 70 and 90.
3. **WITH m LIMIT 3**: This limits the result set to the first 3 movies.
4. **RETURN m.title**: This returns the titles of the selected movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 1990 AND r.rating >= 70 AND r.rating <= 90
WITH m LIMIT 3
RETURN m.title
```",Evaluation query,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 1990 AND r.rating >= 70 AND r.rating <= 90
WITH m LIMIT 3
RETURN m.title","This Cypher query identifies movies released before 1990 with reviews rated between 70 and 90, limiting the results to the top 3.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part matches all movies that have been reviewed.
2. **WHERE m.released < 1990 AND r.rating >= 70 AND r.rating <= 90**: This filters for movies released before 1990 and reviews with ratings between 70 and 90.
3. **WITH m LIMIT 3**: This limits the result set to the first 3 movies.
4. **RETURN m.title**: This returns the titles of the selected movies."
What are the summaries of reviews for movies acted in by Keanu Reeves? Limit to 5.,movies,"<explanation>
1. We need to find the Person node with the name 'Keanu Reeves'.
2. Then we need to traverse the ACTED_IN relationships from that person to the movies they acted in.
3. Next, we traverse the REVIEWED relationships from those movies to the people who reviewed them.
4. Finally, we return the summary property of the REVIEWED relationship and limit the result to 5.
</explanation>
```cypher
MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
RETURN r.summary
LIMIT 5","1. We need to find the Person node with the name 'Keanu Reeves'.
2. Then we need to traverse the ACTED_IN relationships from that person to the movies they acted in.
3. Next, we traverse the REVIEWED relationships from those movies to the people who reviewed them.
4. Finally, we return the summary property of the REVIEWED relationship and limit the result to 5."
Find the born years of people who directed movies with more than 500 votes. Limit to 3.,movies,"<explanation>
1. **MATCH** the pattern of a person directing a movie: `(p:Person)-[:DIRECTED]->(m:Movie)`.
2. **WHERE** the movie has more than 500 votes: `m.votes > 500`.
3. **RETURN** the born year of the person: `p.born`.
4. **LIMIT** the result to the first 3: `LIMIT 3`.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.born
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.born
LIMIT 3","1. **MATCH** the pattern of a person directing a movie: `(p:Person)-[:DIRECTED]->(m:Movie)`.
2. **WHERE** the movie has more than 500 votes: `m.votes > 500`.
3. **RETURN** the born year of the person: `p.born`.
4. **LIMIT** the result to the first 3: `LIMIT 3`.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 500
RETURN p.born
LIMIT 3
```"
What are the release years of movies written by people born after 1960? Limit to 3.,movies,"<explanation>
1. **MATCH** the pattern of a `Person` writing (`WROTE`) a `Movie`.
2. **WHERE** clause filters the `Person` nodes based on their birth year (`born`) being greater than 1960.
3. **RETURN** the distinct release years (`released`) of the `Movie` nodes.
4. **ORDER BY** release year in ascending order.
5. **LIMIT** the results to the top 3.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN DISTINCT m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN DISTINCT m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN DISTINCT m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3","1. **MATCH** the pattern of a `Person` writing (`WROTE`) a `Movie`.
2. **WHERE** clause filters the `Person` nodes based on their birth year (`born`) being greater than 1960.
3. **RETURN** the distinct release years (`released`) of the `Movie` nodes.
4. **ORDER BY** release year in ascending order.
5. **LIMIT** the results to the top 3.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1960
RETURN DISTINCT m.released AS releaseYear
ORDER BY releaseYear
LIMIT 3
```"
List the names of people who produced and acted in the same movie. Limit to 5.,movies,"<explanation>
This query starts by finding all people who have both PRODUCED and ACTED_IN relationships with a movie. Then, it returns the distinct names of those people, limiting the result to 5.

1. **MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)**: This part of the query finds all persons who have both ""PRODUCED"" and ""ACTED_IN"" relationships with the same movie. 
2. **RETURN DISTINCT person.name LIMIT 5**:  This returns the names of the people found in the previous step, making sure to eliminate duplicates (""DISTINCT"") and limiting the results to 5.

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)
RETURN DISTINCT person.name LIMIT 5
```
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)
RETURN DISTINCT person.name LIMIT 5
```
",Evaluation query,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)
RETURN DISTINCT person.name LIMIT 5","This query starts by finding all people who have both PRODUCED and ACTED_IN relationships with a movie. Then, it returns the distinct names of those people, limiting the result to 5.

1. **MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)**: This part of the query finds all persons who have both ""PRODUCED"" and ""ACTED_IN"" relationships with the same movie. 
2. **RETURN DISTINCT person.name LIMIT 5**:  This returns the names of the people found in the previous step, making sure to eliminate duplicates (""DISTINCT"") and limiting the results to 5.

```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[:ACTED_IN]-(person)
RETURN DISTINCT person.name LIMIT 5
```"
Which movies acted in by Hugo Weaving were released after 2005? Limit to 3.,movies,"<explanation>
1. We need to find movies that Hugo Weaving acted in. So we start by finding the node with `name: ""Hugo Weaving""`.
2. Then we traverse the `ACTED_IN` relationships from that node to find the movies.
3. We filter those movies to only include those released after `2005`.
4. We return the title of those movies.
5. We limit the result to the top 3 movies.
</explanation>
```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN m.title
LIMIT 3","1. We need to find movies that Hugo Weaving acted in. So we start by finding the node with `name: ""Hugo Weaving""`.
2. Then we traverse the `ACTED_IN` relationships from that node to find the movies.
3. We filter those movies to only include those released after `2005`.
4. We return the title of those movies.
5. We limit the result to the top 3 movies."
"What are the taglines of movies reviewed with ""journey"" in the summary? Limit to 3.",movies,"<explanation>
1. **Find reviews with ""journey"" in the summary:** 
   - We start by finding all `REVIEWED` relationships where the `summary` property contains the word ""journey"".
2. **Get the connected movies:**
   - We then traverse the graph from these `REVIEWED` relationships to the connected `Movie` nodes.
3. **Retrieve the taglines:** 
   - From the `Movie` nodes, we return the `tagline` property.
4. **Limit the results:**
   - Finally, we use `LIMIT` to restrict the output to a maximum of 3 taglines.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.tagline
LIMIT 3
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.tagline
LIMIT 3
```",Evaluation query,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.tagline
LIMIT 3","1. **Find reviews with ""journey"" in the summary:** 
   - We start by finding all `REVIEWED` relationships where the `summary` property contains the word ""journey"".
2. **Get the connected movies:**
   - We then traverse the graph from these `REVIEWED` relationships to the connected `Movie` nodes.
3. **Retrieve the taglines:** 
   - From the `Movie` nodes, we return the `tagline` property.
4. **Limit the results:**
   - Finally, we use `LIMIT` to restrict the output to a maximum of 3 taglines.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'journey'
RETURN m.tagline
LIMIT 3
```"
"Find the number of votes for movies with ""Cloud"" in the title. Limit to 5.",movies,"<explanation>
1. **Find movies with ""Cloud"" in the title:** We start by matching all movie nodes (`MATCH (m:Movie)`) and filtering them based on whether their title property contains ""Cloud"" (`WHERE m.title CONTAINS 'Cloud'`).
2. **Count votes for each movie:** We then group the results by movie and use the `sum()` function to aggregate the votes for each movie.
3. **Limit the results:** Finally, we order the results in descending order of the number of votes (`ORDER BY totalVotes DESC`) and limit the output to the top 5 movies (`LIMIT 5`).

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Cloud'
WITH m, sum(m.votes) AS totalVotes
RETURN m.title, totalVotes
ORDER BY totalVotes DESC
LIMIT 5
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Cloud'
WITH m, sum(m.votes) AS totalVotes
RETURN m.title, totalVotes
ORDER BY totalVotes DESC
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.title CONTAINS 'Cloud'
WITH m, sum(m.votes) AS totalVotes
RETURN m.title, totalVotes
ORDER BY totalVotes DESC
LIMIT 5","1. **Find movies with ""Cloud"" in the title:** We start by matching all movie nodes (`MATCH (m:Movie)`) and filtering them based on whether their title property contains ""Cloud"" (`WHERE m.title CONTAINS 'Cloud'`).
2. **Count votes for each movie:** We then group the results by movie and use the `sum()` function to aggregate the votes for each movie.
3. **Limit the results:** Finally, we order the results in descending order of the number of votes (`ORDER BY totalVotes DESC`) and limit the output to the top 5 movies (`LIMIT 5`).

```cypher
MATCH (m:Movie)
WHERE m.title CONTAINS 'Cloud'
WITH m, sum(m.votes) AS totalVotes
RETURN m.title, totalVotes
ORDER BY totalVotes DESC
LIMIT 5
```"
What are the roles of Tom Hanks in movies directed by people born before 1950? Limit to 3.,movies,"<explanation>
1. We need to find `Person` nodes with `name` property ""Tom Hanks"".
2. Then, we need to traverse the `ACTED_IN` relationships to `Movie` nodes.
3. We also need to find `Person` nodes who `DIRECTED` these movies and were `born` before 1950.
4. Finally, we return the `roles` property of the `ACTED_IN` relationship.
5. We use `LIMIT 3` to limit the result to 3 records. 
</explanation>
```cypher
MATCH (actor:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1950
RETURN actor.name, movie.title, director.name, actor.born
LIMIT 3
```",Evaluation query,"MATCH (actor:Person {name: 'Tom Hanks'})-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1950
RETURN actor.name, movie.title, director.name, actor.born
LIMIT 3","1. We need to find `Person` nodes with `name` property ""Tom Hanks"".
2. Then, we need to traverse the `ACTED_IN` relationships to `Movie` nodes.
3. We also need to find `Person` nodes who `DIRECTED` these movies and were `born` before 1950.
4. Finally, we return the `roles` property of the `ACTED_IN` relationship.
5. We use `LIMIT 3` to limit the result to 3 records."
List the names of people who followed Laurence Fishburne. Limit to 5.,movies,"<explanation>
This query starts with finding the person node with the name 'Laurence Fishburne'. Then, it traverses the `FOLLOWS` relationship outgoing from that node to other `Person` nodes. Finally, it retrieves the `name` property of those persons and limits the result set to 5.
</explanation>
```cypher
MATCH (p:Person {name: 'Laurence Fishburne'})-[:FOLLOWS]->(person:Person)
RETURN person.name
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: 'Laurence Fishburne'})-[:FOLLOWS]->(person:Person)
RETURN person.name
LIMIT 5","This query starts with finding the person node with the name 'Laurence Fishburne'. Then, it traverses the `FOLLOWS` relationship outgoing from that node to other `Person` nodes. Finally, it retrieves the `name` property of those persons and limits the result set to 5."
Which movies released before 2000 were produced by people born after 1955? Limit to 3.,movies,"<explanation>
This query identifies movies released before 2000 produced by individuals born after 1955. It achieves this by:

1. **Matching**: It locates movies (`m`) linked by the `PRODUCED` relationship to individuals (`p`).
2. **Filtering**: It narrows down the results to movies released before 2000 (`m.released < 2000`) and individuals born after 1955 (`p.born > 1955`).
3. **Returning**: It sends back the titles of the chosen movies (`m.title`).
4. **Limiting**: It restricts the output to the first three results encountered.

Thus, the query efficiently pinpoints and delivers the titles of up to three movies fulfilling the given criteria.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 2000 AND p.born > 1955
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 2000 AND p.born > 1955
RETURN m.title
LIMIT 3","This query identifies movies released before 2000 produced by individuals born after 1955. It achieves this by:

1. **Matching**: It locates movies (`m`) linked by the `PRODUCED` relationship to individuals (`p`).
2. **Filtering**: It narrows down the results to movies released before 2000 (`m.released < 2000`) and individuals born after 1955 (`p.born > 1955`).
3. **Returning**: It sends back the titles of the chosen movies (`m.title`).
4. **Limiting**: It restricts the output to the first three results encountered.

Thus, the query efficiently pinpoints and delivers the titles of up to three movies fulfilling the given criteria."
What are the summaries of reviews for movies directed by people born after 1960? Limit to 5.,movies,"<explanation>
1. **Find directors born after 1960**: We need to match `Person` nodes with `born` property greater than 1960.
2. **Find movies they directed**: We need to traverse the `DIRECTED` relationship from those `Person` nodes to `Movie` nodes.
3. **Find reviews for those movies**: We need to traverse the `REVIEWED` relationship from any `Person` nodes to the `Movie` nodes found in the previous step.
4. **Return review summaries**: We are interested in the `summary` property of the `REVIEWED` relationship.
5. **Limit the result**: We need to limit the number of returned results to 5.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960
RETURN r.summary
LIMIT 5
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960
RETURN r.summary
LIMIT 5
```
",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960
RETURN r.summary
LIMIT 5","1. **Find directors born after 1960**: We need to match `Person` nodes with `born` property greater than 1960.
2. **Find movies they directed**: We need to traverse the `DIRECTED` relationship from those `Person` nodes to `Movie` nodes.
3. **Find reviews for those movies**: We need to traverse the `REVIEWED` relationship from any `Person` nodes to the `Movie` nodes found in the previous step.
4. **Return review summaries**: We are interested in the `summary` property of the `REVIEWED` relationship.
5. **Limit the result**: We need to limit the number of returned results to 5.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1960
RETURN r.summary
LIMIT 5
```"
"Find the born years of people who acted in movies with ""Apollo"" in the title. Limit to 3.",movies,"<explanation>
1. **MATCH** nodes with label `Movie` and filter by titles containing ""Apollo"".
2. **MATCH** nodes with label `Person` that have an `ACTED_IN` relationship with the previously matched movies.
3. **RETURN** the `born` property of the `Person` nodes and limit the result to 3.

```cypher
MATCH (m:Movie)
WHERE m.title LIKE '%Apollo%'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.born
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.title LIKE '%Apollo%'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)
WHERE m.title LIKE '%Apollo%'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.born
LIMIT 3","1. **MATCH** nodes with label `Movie` and filter by titles containing ""Apollo"".
2. **MATCH** nodes with label `Person` that have an `ACTED_IN` relationship with the previously matched movies.
3. **RETURN** the `born` property of the `Person` nodes and limit the result to 3.

```cypher
MATCH (m:Movie)
WHERE m.title LIKE '%Apollo%'
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.born
LIMIT 3
```"
What are the release years of movies written by people born before 1950? Limit to 3.,movies,"<explanation>
1. **MATCH** the pattern of a `Person` related to a `Movie` with a `WROTE` relationship.
2. **WHERE** the `Person`'s `born` property is less than 1950.
3. **WITH** `released` to prepare for aggregation.
4. **RETURN** the distinct `released` values, ordered in ascending order, and limit the result to 3.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1950
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear ORDER BY releaseYear
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1950
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear ORDER BY releaseYear
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1950
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear ORDER BY releaseYear
LIMIT 3","1. **MATCH** the pattern of a `Person` related to a `Movie` with a `WROTE` relationship.
2. **WHERE** the `Person`'s `born` property is less than 1950.
3. **WITH** `released` to prepare for aggregation.
4. **RETURN** the distinct `released` values, ordered in ascending order, and limit the result to 3.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1950
WITH DISTINCT m.released AS releaseYear
RETURN releaseYear ORDER BY releaseYear
LIMIT 3
```"
List the names of people who directed movies reviewed with a rating less than 60. Limit to 5.,movies,"<explanation>
1. We start by matching on the `:Person` nodes that have a `:DIRECTED` relationship with a `:Movie` node.
2. We then filter these results to only include movies with a `:REVIEWED` relationship where the `rating` property is less than 60.
3. We then use `WITH` and `DISTINCT` to get the distinct names of the directors.
4. We then limit the returned results to 5. 
5. Finally, we return the `name` of the directors. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
WITH DISTINCT p.name AS directorName
RETURN directorName
LIMIT 5
```
</explanation>",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
WITH DISTINCT p.name AS directorName
RETURN directorName
LIMIT 5","1. We start by matching on the `:Person` nodes that have a `:DIRECTED` relationship with a `:Movie` node.
2. We then filter these results to only include movies with a `:REVIEWED` relationship where the `rating` property is less than 60.
3. We then use `WITH` and `DISTINCT` to get the distinct names of the directors.
4. We then limit the returned results to 5. 
5. Finally, we return the `name` of the directors. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating < 60
WITH DISTINCT p.name AS directorName
RETURN directorName
LIMIT 5
```"
Which movies acted in by Keanu Reeves were released before 1990? Limit to 3.  (Likely no results based on provided data),movies,"<explanation>
1. **Find Keanu Reeves:** We start by finding the `Person` node with `name: ""Keanu Reeves""`.
2. **Traverse ACTED_IN relationships:** We traverse the `ACTED_IN` relationships originating from Keanu Reeves's node.
3. **Filter by release year:** We filter the `Movie` nodes to keep only those released before 1990 (`released < 1990`).
4. **Limit the results:** We limit the results to the top 3 movies. 
5. **Return the titles:** Finally, we return the titles of the movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1990
RETURN m.title
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1990
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1990
RETURN m.title
LIMIT 3","1. **Find Keanu Reeves:** We start by finding the `Person` node with `name: ""Keanu Reeves""`.
2. **Traverse ACTED_IN relationships:** We traverse the `ACTED_IN` relationships originating from Keanu Reeves's node.
3. **Filter by release year:** We filter the `Movie` nodes to keep only those released before 1990 (`released < 1990`).
4. **Limit the results:** We limit the results to the top 3 movies. 
5. **Return the titles:** Finally, we return the titles of the movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1990
RETURN m.title
LIMIT 3
```"
What are the taglines of movies produced by people born before 1960? Limit to 3.,movies,"<explanation>
1. **Start with the `Person` nodes where `born` property is less than 1960.**
2. **Traverse the `PRODUCED` relationship to reach the related `Movie` nodes.**
3. **Return the `tagline` property of the `Movie` nodes.**
4. **Limit the returned results to 3.**

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
LIMIT 3
```
",Evaluation query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
LIMIT 3","1. **Start with the `Person` nodes where `born` property is less than 1960.**
2. **Traverse the `PRODUCED` relationship to reach the related `Movie` nodes.**
3. **Return the `tagline` property of the `Movie` nodes.**
4. **Limit the returned results to 3.**

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.tagline
LIMIT 3
```"
Find the number of votes for movies released in 1995. Limit to 5.,movies,"<explanation>
This query identifies movies released in 1995, calculates the total votes for those movies, and limits the result set to 5. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter for movies where the `released` property is 1995.
3. **WITH Clause:** We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN Clause:** We return the count of votes for the movies.
5. **LIMIT Clause:** We limit the number of results returned to 5.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 1995
WITH m, sum(m.votes) AS totalVotes
RETURN totalVotes
LIMIT 5
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released = 1995
WITH m, sum(m.votes) AS totalVotes
RETURN totalVotes
LIMIT 5","This query identifies movies released in 1995, calculates the total votes for those movies, and limits the result set to 5. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter for movies where the `released` property is 1995.
3. **WITH Clause:** We use `WITH` to pass the filtered movies to the next part of the query.
4. **RETURN Clause:** We return the count of votes for the movies.
5. **LIMIT Clause:** We limit the number of results returned to 5."
What are the roles of Hugo Weaving in movies released before 2000? Limit to 3.,movies,"<explanation>
1. We start by matching the person named ""Hugo Weaving"".
2. Then we traverse the `ACTED_IN` relationship to find the movies in which he acted.
3. We filter those movies to only include those released before the year 2000.
4. Finally, we return the movie title and the roles played by Hugo Weaving, limiting the result to the top 3.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title AS movieTitle, m.released AS movieReleased, collect(m.tagline) AS movieTagline, collect(p.name) AS actorName, collect(m.votes) AS movieVotes
LIMIT 3
```
</explanation>",Evaluation query,"MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title AS movieTitle, m.released AS movieReleased, collect(m.tagline) AS movieTagline, collect(p.name) AS actorName, collect(m.votes) AS movieVotes
LIMIT 3","1. We start by matching the person named ""Hugo Weaving"".
2. Then we traverse the `ACTED_IN` relationship to find the movies in which he acted.
3. We filter those movies to only include those released before the year 2000.
4. Finally, we return the movie title and the roles played by Hugo Weaving, limiting the result to the top 3.

```cypher
MATCH (p:Person {name: ""Hugo Weaving""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title AS movieTitle, m.released AS movieReleased, collect(m.tagline) AS movieTagline, collect(p.name) AS actorName, collect(m.votes) AS movieVotes
LIMIT 3
```"
"List the names of people who followed someone who directed ""Apollo 13"". Limit to 5.",movies,"<explanation>
This query first finds the person who directed ""Apollo 13"" then continues to anyone who follows that person. Finally, we return the names of those followers and limit to the first 5 results. 
</explanation>
```cypher
MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:FOLLOWS]->(d)
RETURN p.name
LIMIT 5
```",Evaluation query,"MATCH (d:Person)-[:DIRECTED]->(m:Movie {title: ""Apollo 13""})
MATCH (p:Person)-[:FOLLOWS]->(d)
RETURN p.name
LIMIT 5","This query first finds the person who directed ""Apollo 13"" then continues to anyone who follows that person. Finally, we return the names of those followers and limit to the first 5 results."
"Which movies released after 2005 were reviewed with ""amazing"" in the summary? Limit to 3.",movies,"<explanation>
1. **Find movies released after 2005:** We start by finding all movies with a `released` property greater than 2005.
2. **Match reviewed relationships:** We then match these movies to `REVIEWED` relationships.
3. **Filter reviews with ""amazing"" in the summary:** We filter these relationships based on whether the `summary` property contains the word ""amazing"".
4. **Return the movie titles:** Finally, we return the `title` property of the movies that meet all the criteria. 
5. **Limit to 3:** We limit the returned results to 3 movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'amazing'
RETURN m.title
LIMIT 3
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'amazing'
RETURN m.title
LIMIT 3
```",Evaluation query,"MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'amazing'
RETURN m.title
LIMIT 3","1. **Find movies released after 2005:** We start by finding all movies with a `released` property greater than 2005.
2. **Match reviewed relationships:** We then match these movies to `REVIEWED` relationships.
3. **Filter reviews with ""amazing"" in the summary:** We filter these relationships based on whether the `summary` property contains the word ""amazing"".
4. **Return the movie titles:** Finally, we return the `title` property of the movies that meet all the criteria. 
5. **Limit to 3:** We limit the returned results to 3 movies.

```cypher
MATCH (m:Movie)
WHERE m.released > 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary CONTAINS 'amazing'
RETURN m.title
LIMIT 3
```"
What are the summaries of reviews for movies produced by Joel Silver? Limit to 5.,movies,"<explanation>
1. **Find the person named ""Joel Silver"".**
2. **Traverse the PRODUCED relationships from that person to the movies they produced.**
3. **Traverse the REVIEWED relationships from those movies to the reviews.**
4. **Return the summary of each review.**
5. **Limit the results to 5.**

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-(reviewer:Person)
RETURN r.summary
LIMIT 5
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-(reviewer:Person)
RETURN r.summary
LIMIT 5
```",Evaluation query,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-(reviewer:Person)
RETURN r.summary
LIMIT 5","1. **Find the person named ""Joel Silver"".**
2. **Traverse the PRODUCED relationships from that person to the movies they produced.**
3. **Traverse the REVIEWED relationships from those movies to the reviews.**
4. **Return the summary of each review.**
5. **Limit the results to 5.**

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)<-[r:REVIEWED]-(reviewer:Person)
RETURN r.summary
LIMIT 5
```"
Find the born years of people who wrote movies released in 1995. Limit to 3.,movies,"<explanation>
This query starts by finding movies released in 1995. Then it traverses the `:WROTE` relationships backwards to find the people who wrote those movies. Finally, it returns the birth year of those people and limits the result to 3. 
</explanation>
```cypher
MATCH (m:Movie {released: 1995})<-[:WROTE]-(p:Person)
RETURN p.born
LIMIT 3
```",Evaluation query,"MATCH (m:Movie {released: 1995})<-[:WROTE]-(p:Person)
RETURN p.born
LIMIT 3","This query starts by finding movies released in 1995. Then it traverses the `:WROTE` relationships backwards to find the people who wrote those movies. Finally, it returns the birth year of those people and limits the result to 3."
What are the release years of movies directed by people born before 1940? Limit to 3. (Likely no results based on provided data),movies,"<explanation>
1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by birth year:** We filter these `Person` nodes based on their `born` property being less than 1940.
3. **Match to directed movies:** We traverse the `DIRECTED` relationship from these filtered `Person` nodes to the `Movie` nodes.
4. **Return the release years:** We return the distinct release years (`released` property) of these movies.
5. **Limit to 3:** We limit the returned results to a maximum of 3.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1940
RETURN DISTINCT m.released AS ReleaseYear
LIMIT 3
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1940
RETURN DISTINCT m.released AS ReleaseYear
LIMIT 3
```",Evaluation query,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1940
RETURN DISTINCT m.released AS ReleaseYear
LIMIT 3","1. **Start with Person nodes:** We begin by matching all `Person` nodes.
2. **Filter by birth year:** We filter these `Person` nodes based on their `born` property being less than 1940.
3. **Match to directed movies:** We traverse the `DIRECTED` relationship from these filtered `Person` nodes to the `Movie` nodes.
4. **Return the release years:** We return the distinct release years (`released` property) of these movies.
5. **Limit to 3:** We limit the returned results to a maximum of 3.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1940
RETURN DISTINCT m.released AS ReleaseYear
LIMIT 3
```"
List the names of people who produced movies reviewed with a rating greater than 90. Limit to 5.,movies,"<explanation>
1. We start by matching the relationship (p:Person)-[:PRODUCED]->(m:Movie) where p represents the people who produced the movie m.
2. Next, we traverse to the people who reviewed the movie m using the relationship (p2:Person)-[:REVIEWED]->(m:Movie).
3. We filter the movies based on reviews with a rating greater than 90.
4. Then, we collect and return the distinct names of the producers.
5. Finally, we limit the result to the top 5 producers.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p2.rating > 90
WITH DISTINCT p.name AS producerName
RETURN producerName
LIMIT 5
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p2.rating > 90
WITH DISTINCT p.name AS producerName
RETURN producerName
LIMIT 5
```",Evaluation query,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p2.rating > 90
WITH DISTINCT p.name AS producerName
RETURN producerName
LIMIT 5","1. We start by matching the relationship (p:Person)-[:PRODUCED]->(m:Movie) where p represents the people who produced the movie m.
2. Next, we traverse to the people who reviewed the movie m using the relationship (p2:Person)-[:REVIEWED]->(m:Movie).
3. We filter the movies based on reviews with a rating greater than 90.
4. Then, we collect and return the distinct names of the producers.
5. Finally, we limit the result to the top 5 producers.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p2.rating > 90
WITH DISTINCT p.name AS producerName
RETURN producerName
LIMIT 5
```"
Which movies acted in by Laurence Fishburne were released after 2005? Limit to 3. (Likely no results based on provided data),movies,"<explanation>
1. **Start with Laurence Fishburne:** We begin by finding the `Person` node with the `name` ""Laurence Fishburne"".
2. **Traverse ACTED_IN relationships:** We follow outgoing `ACTED_IN` relationships from Laurence Fishburne to the movies he acted in.
3. **Filter by release year:** We filter for movies released after 2005 using the `released` property of the `Movie` node.
4. **Limit the results:** We limit the results to the top 3 using `LIMIT`.

This query efficiently identifies movies featuring Laurence Fishburne released after 2005.
</explanation>
```cypher
MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN m.title AS movieTitle
LIMIT 3
```",Evaluation query,"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN m.title AS movieTitle
LIMIT 3","1. **Start with Laurence Fishburne:** We begin by finding the `Person` node with the `name` ""Laurence Fishburne"".
2. **Traverse ACTED_IN relationships:** We follow outgoing `ACTED_IN` relationships from Laurence Fishburne to the movies he acted in.
3. **Filter by release year:** We filter for movies released after 2005 using the `released` property of the `Movie` node.
4. **Limit the results:** We limit the results to the top 3 using `LIMIT`.

This query efficiently identifies movies featuring Laurence Fishburne released after 2005."
Which movies released between 1995 and 2005 have more than 1000 votes?,movies,"<explanation>
This Cypher query should find all movies released between 1995 (inclusive) and 2005 (inclusive) which have more than 1000 votes. 

1. **MATCH Clause**: We start by matching all movie nodes (`(m:Movie)`) in the database.
2. **WHERE Clause**:  We filter these movies based on their release year (`m.released`) being between 1995 and 2005 (inclusive), and having more than 1000 votes (`m.votes`).
3. **RETURN Clause**:  For each movie that matches these criteria, we return its title (`m.title`).

```cypher
MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m.title","This Cypher query should find all movies released between 1995 (inclusive) and 2005 (inclusive) which have more than 1000 votes. 

1. **MATCH Clause**: We start by matching all movie nodes (`(m:Movie)`) in the database.
2. **WHERE Clause**:  We filter these movies based on their release year (`m.released`) being between 1995 and 2005 (inclusive), and having more than 1000 votes (`m.votes`).
3. **RETURN Clause**:  For each movie that matches these criteria, we return its title (`m.title`).

```cypher
MATCH (m:Movie)
WHERE m.released >= 1995 AND m.released <= 2005 AND m.votes > 1000
RETURN m.title
```"
List the names of people who acted in movies directed by Lana Wachowski.,movies,"<explanation>
1. **MATCH** nodes with label `Person` and name 'Lana Wachowski' as `director`.
2. **MATCH** movies (`m`) directed by `director`.
3. **MATCH** people (`p`) who acted in movies (`m`).
4. **RETURN** the names of the actors (`p.name`).
</explanation>
```cypher
MATCH (director:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m:Movie)
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (director:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m:Movie)
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p.name","1. **MATCH** nodes with label `Person` and name 'Lana Wachowski' as `director`.
2. **MATCH** movies (`m`) directed by `director`.
3. **MATCH** people (`p`) who acted in movies (`m`).
4. **RETURN** the names of the actors (`p.name`)."
Find the titles of movies produced by Joel Silver after the year 1990.,movies,"<explanation>
This query looks for movies produced after 1990 by Joel Silver. 

1. **MATCH**: We start by finding the person named ""Joel Silver"" and any movies they produced.  
2. **WHERE**: We filter these movies to only include those released after 1990.
3. **RETURN**: Finally, we return the titles of the filtered movies.

</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 1990
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released > 1990
RETURN m.title","This query looks for movies produced after 1990 by Joel Silver. 

1. **MATCH**: We start by finding the person named ""Joel Silver"" and any movies they produced.  
2. **WHERE**: We filter these movies to only include those released after 1990.
3. **RETURN**: Finally, we return the titles of the filtered movies."
"Who are the people who acted in ""The Matrix"" and were born before 1970?",movies,"<explanation>
This Cypher query first finds the movie with the title ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the Person nodes. Finally, it filters those persons to only include those born before 1970.

1. **MATCH (m:Movie {title: ""The Matrix""})**: This line finds the ""The Matrix"" movie node.
2. **MATCH (m)<-[:ACTED_IN]-(p:Person)**: This line traverses the ACTED_IN relationships backwards from the movie to find the persons who acted in it.
3. **WHERE p.born < 1970**: This line filters the persons to only include those born before 1970.
4. **RETURN p.name**: This line returns the names of the matching persons.
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (m)<-[:ACTED_IN]-(p:Person)
WHERE p.born < 1970
RETURN p.name
```",Multi-step Queries,"MATCH (m:Movie {title: ""The Matrix""})
MATCH (m)<-[:ACTED_IN]-(p:Person)
WHERE p.born < 1970
RETURN p.name","This Cypher query first finds the movie with the title ""The Matrix"". Then, it traverses the ACTED_IN relationships from that movie to the Person nodes. Finally, it filters those persons to only include those born before 1970.

1. **MATCH (m:Movie {title: ""The Matrix""})**: This line finds the ""The Matrix"" movie node.
2. **MATCH (m)<-[:ACTED_IN]-(p:Person)**: This line traverses the ACTED_IN relationships backwards from the movie to find the persons who acted in it.
3. **WHERE p.born < 1970**: This line filters the persons to only include those born before 1970.
4. **RETURN p.name**: This line returns the names of the matching persons."
What are the taglines of movies released in 1999 and have more than 5000 votes?,movies,"<explanation>
This Cypher query looks for movies  and their taglines where the movie was released in 1999 and has more than 5000 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter down the movies to only those that were released in 1999 and have more than 5000 votes. 
3. **RETURN Clause:** We return the title and tagline of each movie.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released = 1999 AND m.votes > 5000
RETURN m.title, m.tagline
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.released = 1999 AND m.votes > 5000
RETURN m.title, m.tagline","This Cypher query looks for movies  and their taglines where the movie was released in 1999 and has more than 5000 votes. 

1. **MATCH Clause:** We start by matching all `Movie` nodes.
2. **WHERE Clause:** We filter down the movies to only those that were released in 1999 and have more than 5000 votes. 
3. **RETURN Clause:** We return the title and tagline of each movie."
Which movies did Keanu Reeves act in and were released after 2000?,movies,"<explanation>
This query looks for movies that Keanu Reeves acted in that were released after the year 2000. 
1. **MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)**: This matches the person node with the name ""Keanu Reeves"" to all movie nodes that he has an ACTED_IN relationship with.
2. **WHERE m.released > 2000**: This filters the returned movies to only include those released after the year 2000.
3. **RETURN m.title**: This returns the title of each of the matching movies. 
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title","This query looks for movies that Keanu Reeves acted in that were released after the year 2000. 
1. **MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)**: This matches the person node with the name ""Keanu Reeves"" to all movie nodes that he has an ACTED_IN relationship with.
2. **WHERE m.released > 2000**: This filters the returned movies to only include those released after the year 2000.
3. **RETURN m.title**: This returns the title of each of the matching movies."
List the names of people who directed movies with more than 2000 votes.,movies,"<explanation>
This query starts with a match on movies with more than 2000 votes. It then traverses the `DIRECTED` relationship to find the directors of those movies. Finally, it returns the names of those directors. 

1. **MATCH (m:Movie) WHERE m.votes > 2000**: This finds all movies with more than 2000 votes.
2. **MATCH (p:Person)-[:DIRECTED]->(m)**: This part of the query finds all people who directed those movies.
3. **RETURN DISTINCT p.name**: This returns the names of the directors, making sure each name is returned only once.
</explanation>
```cypher
MATCH (m:Movie) WHERE m.votes > 2000
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie) WHERE m.votes > 2000
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN DISTINCT p.name","This query starts with a match on movies with more than 2000 votes. It then traverses the `DIRECTED` relationship to find the directors of those movies. Finally, it returns the names of those directors. 

1. **MATCH (m:Movie) WHERE m.votes > 2000**: This finds all movies with more than 2000 votes.
2. **MATCH (p:Person)-[:DIRECTED]->(m)**: This part of the query finds all people who directed those movies.
3. **RETURN DISTINCT p.name**: This returns the names of the directors, making sure each name is returned only once."
Find the titles of movies reviewed by people born after 1960.,movies,"<explanation>
1. We need to find `Person` nodes where `born` property is greater than 1960.
2. Then we need to traverse `REVIEWED` relationships from those `Person` nodes to `Movie` nodes.
3. Finally, we will return the `title` property of those `Movie` nodes.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title","1. We need to find `Person` nodes where `born` property is greater than 1960.
2. Then we need to traverse `REVIEWED` relationships from those `Person` nodes to `Movie` nodes.
3. Finally, we will return the `title` property of those `Movie` nodes.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title
```"
Who are the people who produced and directed the same movie?,movies,"<explanation>
To identify the people who both produced and directed the same movie, we can start by finding people who have a PRODUCED relationship with a movie. Then, we'll check if those same people also have a DIRECTED relationship with the same movie. If both conditions are met, we'll return the names of those people.

1. **Matching the pattern**: We start by matching the pattern where a person has both PRODUCED and DIRECTED the same movie. 
2. **Return**:  We will return the name of each person.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name","To identify the people who both produced and directed the same movie, we can start by finding people who have a PRODUCED relationship with a movie. Then, we'll check if those same people also have a DIRECTED relationship with the same movie. If both conditions are met, we'll return the names of those people.

1. **Matching the pattern**: We start by matching the pattern where a person has both PRODUCED and DIRECTED the same movie. 
2. **Return**:  We will return the name of each person.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN DISTINCT p.name
```"
What are the release years of movies acted in by people born in 1964?,movies,"<explanation>
This query identifies the release years of movies acted in by people born in 1964.

1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)**: This part finds all persons who acted in movies, represented by the `ACTED_IN` relationship.
2. **WHERE person.born = 1964**: This filters the results to only include persons born in 1964.
3. **RETURN DISTINCT movie.released**: This returns the unique release years of the movies found in the previous steps. The `DISTINCT` keyword ensures that each release year is returned only once, even if multiple actors born in 1964 acted in movies released in that year.

</explanation>
```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
WHERE person.born = 1964
RETURN DISTINCT movie.released
```",Multi-step Queries,"MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
WHERE person.born = 1964
RETURN DISTINCT movie.released","This query identifies the release years of movies acted in by people born in 1964.

1. **MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)**: This part finds all persons who acted in movies, represented by the `ACTED_IN` relationship.
2. **WHERE person.born = 1964**: This filters the results to only include persons born in 1964.
3. **RETURN DISTINCT movie.released**: This returns the unique release years of the movies found in the previous steps. The `DISTINCT` keyword ensures that each release year is returned only once, even if multiple actors born in 1964 acted in movies released in that year."
List the names of people who wrote and directed movies released before 2005.,movies,"<explanation>
This query starts by finding all `Person` nodes that have both `WROTE` and `DIRECTED` relationships to `Movie` nodes. It then filters these `Movie` nodes to only include those released before 2005. Finally, the query returns the `name` property of the `Person` nodes.
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie),
      (p)-[:DIRECTED]->(m)
WHERE m.released < 2005
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie),
      (p)-[:DIRECTED]->(m)
WHERE m.released < 2005
RETURN DISTINCT p.name","This query starts by finding all `Person` nodes that have both `WROTE` and `DIRECTED` relationships to `Movie` nodes. It then filters these `Movie` nodes to only include those released before 2005. Finally, the query returns the `name` property of the `Person` nodes."
Find the titles of movies with a rating of at least 80 and reviewed by people born before 1980.,movies,"<explanation>
1. **Match reviewed movies:** Start by matching all `REVIEWED` relationships between `Person` nodes and `Movie` nodes.
2. **Filter by rating and birth year:** Filter these relationships based on the conditions that the `rating` property is at least 80 and the `born` property of the `Person` node is less than 1980.
3. **Return the movie titles:** Return the `title` property of the `Movie` nodes connected to the remaining relationships.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 80 AND p.born < 1980
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 80 AND p.born < 1980
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 80 AND p.born < 1980
RETURN m.title","1. **Match reviewed movies:** Start by matching all `REVIEWED` relationships between `Person` nodes and `Movie` nodes.
2. **Filter by rating and birth year:** Filter these relationships based on the conditions that the `rating` property is at least 80 and the `born` property of the `Person` node is less than 1980.
3. **Return the movie titles:** Return the `title` property of the `Movie` nodes connected to the remaining relationships.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 80 AND p.born < 1980
RETURN m.title
```"
"Who directed movies with ""Dark, but compelling"" reviews?",movies,"<explanation>
1. **Find movies with the target review:** Start by matching all `Movie` nodes connected to a `REVIEWED` relationship where the `summary` property is ""Dark, but compelling"".
2. **Find the directors:** Traverse the `DIRECTED` relationship in reverse from those movies to find the `Person` nodes who directed them.
3. **Return the directors:** Return the `name` property of the directors.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name","1. **Find movies with the target review:** Start by matching all `Movie` nodes connected to a `REVIEWED` relationship where the `summary` property is ""Dark, but compelling"".
2. **Find the directors:** Traverse the `DIRECTED` relationship in reverse from those movies to find the `Person` nodes who directed them.
3. **Return the directors:** Return the `name` property of the directors.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling""
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```"
"What are the taglines of movies with ""An amazing journey"" reviews?",movies,"<explanation>
This query identifies movies with the review ""An amazing journey"" and returns the taglines of those movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This part finds all movies (""m"") that have been reviewed by a person (""p"") through the ""REVIEWED"" relationship (""r"").

2. **WHERE r.summary = ""An amazing journey""** - This filters the results to only include reviews where the summary is ""An amazing journey"".

3. **RETURN m.tagline** - This returns the tagline of each movie that passed the filter.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
RETURN m.tagline
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
RETURN m.tagline","This query identifies movies with the review ""An amazing journey"" and returns the taglines of those movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)** - This part finds all movies (""m"") that have been reviewed by a person (""p"") through the ""REVIEWED"" relationship (""r"").

2. **WHERE r.summary = ""An amazing journey""** - This filters the results to only include reviews where the summary is ""An amazing journey"".

3. **RETURN m.tagline** - This returns the tagline of each movie that passed the filter."
"List the names of people who acted in movies with ""Silly, but fun"" reviews.",movies,"<explanation>
This Cypher query identifies people who acted in movies with the review ""Silly, but fun"". 

1. **Match reviewed movies:** We start by matching all `Person` nodes that have a `REVIEWED` relationship to a `Movie` node. 
2. **Filter by review summary:** We filter these relationships to only include those where the `summary` property of the `REVIEWED` relationship is ""Silly, but fun"".
3. **Match actors:** From the filtered results, we match the `Movie` nodes to `Person` nodes connected through the `ACTED_IN` relationship.
4. **Return actor names:** Finally, we return the distinct names of the actors who acted in these movies using `RETURN DISTINCT p.name`.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Silly, but fun""
MATCH (p2:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p2.name
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Silly, but fun""
MATCH (p2:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p2.name
```",Multi-step Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Silly, but fun""
MATCH (p2:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p2.name","This Cypher query identifies people who acted in movies with the review ""Silly, but fun"". 

1. **Match reviewed movies:** We start by matching all `Person` nodes that have a `REVIEWED` relationship to a `Movie` node. 
2. **Filter by review summary:** We filter these relationships to only include those where the `summary` property of the `REVIEWED` relationship is ""Silly, but fun"".
3. **Match actors:** From the filtered results, we match the `Movie` nodes to `Person` nodes connected through the `ACTED_IN` relationship.
4. **Return actor names:** Finally, we return the distinct names of the actors who acted in these movies using `RETURN DISTINCT p.name`.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""Silly, but fun""
MATCH (p2:Person)-[:ACTED_IN]->(m)
RETURN DISTINCT p2.name
```"
"Find the titles of movies released after 1990 with ""A solid romp"" reviews.",movies,"<explanation>
This Cypher query will find movies released after 1990 with reviews labeled ""A solid romp."" 

1. **Match Movie Nodes with Reviews:**  We start by matching `Movie` nodes that have an incoming `REVIEWED` relationship where the review's `summary` property is ""A solid romp.""
2. **Filter by Release Year:** We filter these movies to include only those released after 1990.
3. **Return Movie Titles:** Finally, we return the titles of the movies that meet these criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 1990
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 1990
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 1990
RETURN m.title","This Cypher query will find movies released after 1990 with reviews labeled ""A solid romp."" 

1. **Match Movie Nodes with Reviews:**  We start by matching `Movie` nodes that have an incoming `REVIEWED` relationship where the review's `summary` property is ""A solid romp.""
2. **Filter by Release Year:** We filter these movies to include only those released after 1990.
3. **Return Movie Titles:** Finally, we return the titles of the movies that meet these criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 1990
RETURN m.title
```"
"Which movies released before 2000 were reviewed with ""Pretty funny at times""?",movies,"<explanation>
This Cypher query will find all movies released before 2000 that have a review with the summary ""Pretty funny at times"".  We can achieve this by first matching all movies released before 2000. Then we match on the `reviewed` relationship to those movies, where the review summary is ""Pretty funny at times"". Finally, we return the titles of those movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2000 AND r.summary = ""Pretty funny at times""
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE m.released < 2000 AND r.summary = ""Pretty funny at times""
RETURN m.title","This Cypher query will find all movies released before 2000 that have a review with the summary ""Pretty funny at times"".  We can achieve this by first matching all movies released before 2000. Then we match on the `reviewed` relationship to those movies, where the review summary is ""Pretty funny at times"". Finally, we return the titles of those movies."
Who are the people born after 1950 who acted in movies with ratings above 90?,movies,"<explanation>
1. We start by matching on the `Person` nodes with `born` property greater than 1950.
2. Then we traverse the `ACTED_IN` relationship to find the movies they acted in.
3. We further filter these movies based on the `rating` property of the `REVIEWED` relationship being greater than 90.
4. Finally, we return the distinct `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1950 AND r.rating > 90
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1950 AND r.rating > 90
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1950 AND r.rating > 90
RETURN DISTINCT p.name","1. We start by matching on the `Person` nodes with `born` property greater than 1950.
2. Then we traverse the `ACTED_IN` relationship to find the movies they acted in.
3. We further filter these movies based on the `rating` property of the `REVIEWED` relationship being greater than 90.
4. Finally, we return the distinct `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1950 AND r.rating > 90
RETURN DISTINCT p.name
```"
"What are the release years of movies with ""Fun, but a little far fetched"" reviews?",movies,"<explanation>
1. **Match nodes and relationships**: We need to find movies that have reviews with the summary ""Fun, but a little far fetched"". This involves matching `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node, where the `summary` property of the `REVIEWED` relationship is ""Fun, but a little far fetched"".
2. **Filter based on review summary**: We'll use a `WHERE` clause to filter for `REVIEWED` relationships with the specific `summary`.
3. **Return the release year**:  We only need the release years of the movies, so we'll return the `released` property of the `Movie` nodes.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN m.released
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN m.released
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN m.released","1. **Match nodes and relationships**: We need to find movies that have reviews with the summary ""Fun, but a little far fetched"". This involves matching `Movie` nodes that have an incoming `REVIEWED` relationship from a `Person` node, where the `summary` property of the `REVIEWED` relationship is ""Fun, but a little far fetched"".
2. **Filter based on review summary**: We'll use a `WHERE` clause to filter for `REVIEWED` relationships with the specific `summary`.
3. **Return the release year**:  We only need the release years of the movies, so we'll return the `released` property of the `Movie` nodes.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN m.released
```"
Find the taglines of movies directed by people born between 1950 and 1960.,movies,"<explanation>
1. **MATCH** the `Person` nodes with `born` property between 1950 and 1960.
2. **MATCH** those `Person` nodes to `Movie` nodes they `DIRECTED`.
3. **RETURN** the `tagline` property of the `Movie` nodes. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1950 AND p.born <= 1960
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1950 AND p.born <= 1960
RETURN m.tagline
```",Multi-step Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1950 AND p.born <= 1960
RETURN m.tagline","1. **MATCH** the `Person` nodes with `born` property between 1950 and 1960.
2. **MATCH** those `Person` nodes to `Movie` nodes they `DIRECTED`.
3. **RETURN** the `tagline` property of the `Movie` nodes. 

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1950 AND p.born <= 1960
RETURN m.tagline
```"
Which movies produced by Joel Silver have more than 3000 votes?,movies,"<explanation>
1. **Find the person named ""Joel Silver"":** We start by matching the `Person` node with the `name` property equal to ""Joel Silver"".
2. **Traverse the `PRODUCED` relationship:**  We traverse the `PRODUCED` relationships outgoing from Joel Silver to find the movies he produced.
3. **Filter on movies with more than 3000 votes:** We filter the movies based on the `votes` property being greater than 3000.
4. **Return the movie titles:** Finally, we return the `title` property of the filtered movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes > 3000
RETURN m.title
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes > 3000
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes > 3000
RETURN m.title","1. **Find the person named ""Joel Silver"":** We start by matching the `Person` node with the `name` property equal to ""Joel Silver"".
2. **Traverse the `PRODUCED` relationship:**  We traverse the `PRODUCED` relationships outgoing from Joel Silver to find the movies he produced.
3. **Filter on movies with more than 3000 votes:** We filter the movies based on the `votes` property being greater than 3000.
4. **Return the movie titles:** Finally, we return the `title` property of the filtered movies.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.votes > 3000
RETURN m.title
```"
"Who acted in movies released in the same year as ""The Matrix""?",movies,"<explanation>
1. Find the movie titled ""The Matrix""
2. Get the release year of ""The Matrix""
3. Find all movies released in that year
4. Find all actors who acted in those movies
5. Return the names of the actors

```cypher
MATCH (m:Movie {title: ""The Matrix""})
WITH m.released AS released_year
MATCH (m2:Movie {released: released_year})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
WITH m.released AS released_year
MATCH (m2:Movie {released: released_year})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name
```
",Multi-step Queries,"MATCH (m:Movie {title: ""The Matrix""})
WITH m.released AS released_year
MATCH (m2:Movie {released: released_year})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name","1. Find the movie titled ""The Matrix""
2. Get the release year of ""The Matrix""
3. Find all movies released in that year
4. Find all actors who acted in those movies
5. Return the names of the actors

```cypher
MATCH (m:Movie {title: ""The Matrix""})
WITH m.released AS released_year
MATCH (m2:Movie {released: released_year})<-[:ACTED_IN]-(p:Person)
RETURN DISTINCT p.name
```"
What are the ratings given by people born before 1970 for movies released after 1995?,movies,"<explanation>
This Cypher query identifies movie ratings provided by people born before 1970 for movies released after 1995. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This part matches all instances of a person reviewing a movie.
2. **WHERE p.born < 1970 AND m.released > 1995**: This filters the matches to only include those where the person was born before 1970 and the movie was released after 1995.
3. **RETURN m.title AS movieTitle, p.name AS reviewerName, r.rating AS rating**: This returns the title of the movie, the name of the reviewer, and the rating they gave.

</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1970 AND m.released > 1995
RETURN m.title AS movieTitle, p.name AS reviewerName, r.rating AS rating
```",Multi-step Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1970 AND m.released > 1995
RETURN m.title AS movieTitle, p.name AS reviewerName, r.rating AS rating","This Cypher query identifies movie ratings provided by people born before 1970 for movies released after 1995. 

1. **MATCH (p:Person)-[r:REVIEWED]->(m:Movie)**: This part matches all instances of a person reviewing a movie.
2. **WHERE p.born < 1970 AND m.released > 1995**: This filters the matches to only include those where the person was born before 1970 and the movie was released after 1995.
3. **RETURN m.title AS movieTitle, p.name AS reviewerName, r.rating AS rating**: This returns the title of the movie, the name of the reviewer, and the rating they gave."
"Find the names of people who directed movies with ""The coolest football movie ever"" reviews.",movies,"<explanation>
This query starts by finding all movies with the specified review summary. Then, it traverses the `DIRECTED` relationships from those movies to find the directors and return their names. 

1. **Find movies with the specific review summary:** 
   - Match nodes with the label 'Movie' and the specified review summary.
2. **Find the directors:**
   - Traverse the `DIRECTED` relationship from those movies to find the directors (nodes with the 'Person' label).
3. **Return the names of directors:**
   - Return the `name` property of the directors.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","This query starts by finding all movies with the specified review summary. Then, it traverses the `DIRECTED` relationships from those movies to find the directors and return their names. 

1. **Find movies with the specific review summary:** 
   - Match nodes with the label 'Movie' and the specified review summary.
2. **Find the directors:**
   - Traverse the `DIRECTED` relationship from those movies to find the directors (nodes with the 'Person' label).
3. **Return the names of directors:**
   - Return the `name` property of the directors."
"List the titles of movies with ""You had me at Jerry"" reviews and released before 2010.",movies,"<explanation>
1. **Find movies with specific reviews:** We start by matching all `Movie` nodes connected to `Person` nodes through the `REVIEWED` relationship where the review summary is ""You had me at Jerry"".
2. **Filter movies by release year:** Then, we add a `WHERE` clause to filter the movies released before 2010.
3. **Return the movie titles:** Finally, we return the `title` property of the `Movie` nodes that meet both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2010
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2010
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2010
RETURN m.title","1. **Find movies with specific reviews:** We start by matching all `Movie` nodes connected to `Person` nodes through the `REVIEWED` relationship where the review summary is ""You had me at Jerry"".
2. **Filter movies by release year:** Then, we add a `WHERE` clause to filter the movies released before 2010.
3. **Return the movie titles:** Finally, we return the `title` property of the `Movie` nodes that meet both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2010
RETURN m.title
```"
Who wrote movies with ratings between 70 and 90?,movies,"<explanation>
1. **Match the relationships**: We need to find `Person` nodes who have a `:WROTE` relationship with `Movie` nodes.
2. **Filter on rating**: We only want `Movie` nodes that have a `rating` property on the `:REVIEWED` relationship between 70 and 90. 
3. **Return the result**: We need to return the `name` of the `Person` nodes who wrote the movies.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating BETWEEN 70 AND 90
RETURN DISTINCT p.name 
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating BETWEEN 70 AND 90
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating BETWEEN 70 AND 90
RETURN DISTINCT p.name","1. **Match the relationships**: We need to find `Person` nodes who have a `:WROTE` relationship with `Movie` nodes.
2. **Filter on rating**: We only want `Movie` nodes that have a `rating` property on the `:REVIEWED` relationship between 70 and 90. 
3. **Return the result**: We need to return the `name` of the `Person` nodes who wrote the movies.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.rating BETWEEN 70 AND 90
RETURN DISTINCT p.name 
```"
What are the release years of movies produced by people born after 1945?,movies,"<explanation>
This Cypher query identifies the release years of movies produced by individuals born after 1945.

1. **MATCH Clause:** We start by matching two nodes connected by the `PRODUCED` relationship: `(p:Person)-[:PRODUCED]->(m:Movie)`. Here, `p` represents a Person node, and `m` represents a Movie node.

2. **WHERE Clause:** We filter the results to only include persons born after 1945 (`p.born > 1945`).

3. **RETURN Clause:** Finally, we return the distinct release years (`DISTINCT m.released`) of the movies produced by the filtered persons.

By combining these clauses, the query effectively identifies and returns the desired release years based on the specified criteria.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1945
RETURN DISTINCT m.released
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1945
RETURN DISTINCT m.released","This Cypher query identifies the release years of movies produced by individuals born after 1945.

1. **MATCH Clause:** We start by matching two nodes connected by the `PRODUCED` relationship: `(p:Person)-[:PRODUCED]->(m:Movie)`. Here, `p` represents a Person node, and `m` represents a Movie node.

2. **WHERE Clause:** We filter the results to only include persons born after 1945 (`p.born > 1945`).

3. **RETURN Clause:** Finally, we return the distinct release years (`DISTINCT m.released`) of the movies produced by the filtered persons.

By combining these clauses, the query effectively identifies and returns the desired release years based on the specified criteria."
Find the taglines of movies acted in by Keanu Reeves and released after 1995.,movies,"<explanation>
This Cypher query first finds the person node with the name ""Keanu Reeves."" From there it traverses the `ACTED_IN` relationships to find all the movies Keanu Reeves has acted in. Then it filters those movies to only include those released after 1995. Finally, it returns the `tagline` property of each of those movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.tagline
```",Multi-step Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.tagline","This Cypher query first finds the person node with the name ""Keanu Reeves."" From there it traverses the `ACTED_IN` relationships to find all the movies Keanu Reeves has acted in. Then it filters those movies to only include those released after 1995. Finally, it returns the `tagline` property of each of those movies.

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 1995
RETURN m.tagline
```"
Which movies directed by Lana Wachowski have more than 4000 votes?,movies,"<explanation>
1. **Start with finding the node for ""Lana Wachowski"":**
   - We look for a `Person` node with the `name` property equal to ""Lana Wachowski"".
2. **Traverse the `DIRECTED` relationship:**
   - We follow outgoing `DIRECTED` relationships from the ""Lana Wachowski"" node to find movies directed by her.
3. **Filter movies based on vote count:**
   - We filter the movies to keep only those with a `votes` property greater than 4000.
4. **Return the titles of the matching movies:**
   - We return the `title` property of the movies that satisfy the conditions.
</explanation>
```cypher
MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
WHERE m.votes > 4000
RETURN m.title
```",Multi-step Queries,"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
WHERE m.votes > 4000
RETURN m.title","1. **Start with finding the node for ""Lana Wachowski"":**
   - We look for a `Person` node with the `name` property equal to ""Lana Wachowski"".
2. **Traverse the `DIRECTED` relationship:**
   - We follow outgoing `DIRECTED` relationships from the ""Lana Wachowski"" node to find movies directed by her.
3. **Filter movies based on vote count:**
   - We filter the movies to keep only those with a `votes` property greater than 4000.
4. **Return the titles of the matching movies:**
   - We return the `title` property of the movies that satisfy the conditions."
"Who reviewed movies with the tagline ""Welcome to the Real World""?",movies,"<explanation>
This query starts with finding movies that have a tagline of ""Welcome to the Real World"". Then, it traverses the REVIEWED relationship from those movies to find the people who reviewed them. Finally, it returns the names of those people.

1. **Find movies with the tagline ""Welcome to the Real World""**: `MATCH (m:Movie {tagline: ""Welcome to the Real World""})`
2. **Find people who reviewed those movies**: `MATCH (p:Person)-[:REVIEWED]->(m)`
3. **Return the names of those people**: `RETURN p.name`
</explanation>
```cypher
MATCH (m:Movie {tagline: ""Welcome to the Real World""})
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN p.name
```",Multi-step Queries,"MATCH (m:Movie {tagline: ""Welcome to the Real World""})
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN p.name","This query starts with finding movies that have a tagline of ""Welcome to the Real World"". Then, it traverses the REVIEWED relationship from those movies to find the people who reviewed them. Finally, it returns the names of those people.

1. **Find movies with the tagline ""Welcome to the Real World""**: `MATCH (m:Movie {tagline: ""Welcome to the Real World""})`
2. **Find people who reviewed those movies**: `MATCH (p:Person)-[:REVIEWED]->(m)`
3. **Return the names of those people**: `RETURN p.name`"
What are the roles played by Keanu Reeves in movies released after 2000?,movies,"<explanation>
1. **Find Keanu Reeves:** We start by finding the `Person` node with `name` equal to ""Keanu Reeves"".
2. **Traverse ACTED_IN relationships:** We then traverse the `ACTED_IN` relationships originating from Keanu Reeves to find the movies he acted in.
3. **Filter by release year:** We filter these movies to include only those released after the year 2000.
4. **Return the roles:** Finally, we return the `roles` property of the `ACTED_IN` relationships, which represent the roles played by Keanu Reeves in those movies. 

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.released) AS years, collect(r.roles) AS roles
```
</explanation>
```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, collect(r.roles) AS roles
```",Multi-step Queries,"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.released) AS years, collect(r.roles) AS roles","1. **Find Keanu Reeves:** We start by finding the `Person` node with `name` equal to ""Keanu Reeves"".
2. **Traverse ACTED_IN relationships:** We then traverse the `ACTED_IN` relationships originating from Keanu Reeves to find the movies he acted in.
3. **Filter by release year:** We filter these movies to include only those released after the year 2000.
4. **Return the roles:** Finally, we return the `roles` property of the `ACTED_IN` relationships, which represent the roles played by Keanu Reeves in those movies. 

```cypher
MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title AS movie_title, m.released AS release_year, p.name AS actor_name, collect(m.released) AS years, collect(r.roles) AS roles
```"
Find the names of people who produced movies with ratings above 85.,movies,"<explanation>
This query starts by finding all people who have a PRODUCED relationship with a movie. Then, it filters these people based on whether they have a reviewed relationship with a movie, where the rating of the review is greater than 85. Finally, it returns the names of the people who meet both of these criteria.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)**: This part of the query searches for patterns where a person (p) has a PRODUCED relationship with a movie (m) and another person (r) has a REVIEWED relationship with the same movie (m). 
2. **WHERE r.rating > 85**: This line filters the results to only include movies where the rating given in the REVIEWED relationship is greater than 85.
3. **RETURN DISTINCT p.name**: This line returns the names of the people (p) who meet the criteria, eliminating any duplicate names.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 85
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 85
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 85
RETURN DISTINCT p.name","This query starts by finding all people who have a PRODUCED relationship with a movie. Then, it filters these people based on whether they have a reviewed relationship with a movie, where the rating of the review is greater than 85. Finally, it returns the names of the people who meet both of these criteria.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)**: This part of the query searches for patterns where a person (p) has a PRODUCED relationship with a movie (m) and another person (r) has a REVIEWED relationship with the same movie (m). 
2. **WHERE r.rating > 85**: This line filters the results to only include movies where the rating given in the REVIEWED relationship is greater than 85.
3. **RETURN DISTINCT p.name**: This line returns the names of the people (p) who meet the criteria, eliminating any duplicate names.

```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE r.rating > 85
RETURN DISTINCT p.name
```"
List the titles of movies released between 1980 and 2000 with more than 1000 votes.,movies,"<explanation>
This query starts with finding Movie nodes with release dates between 1980 and 2000 and more than 1000 votes. Then, it returns the titles of these movies.

1. **MATCH (m:Movie)** - This line starts by matching all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 1000** - This line filters the matched ""Movie"" nodes based on the criteria: released between 1980 and 2000 (inclusive) and having more than 1000 votes.
3. **RETURN m.title** - Finally, the query returns the ""title"" property of the filtered ""Movie"" nodes, providing a list of movie titles matching the criteria.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 1000
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 1000
RETURN m.title","This query starts with finding Movie nodes with release dates between 1980 and 2000 and more than 1000 votes. Then, it returns the titles of these movies.

1. **MATCH (m:Movie)** - This line starts by matching all nodes with the label ""Movie"" and assigning them to the variable ""m"".
2. **WHERE m.released >= 1980 AND m.released <= 2000 AND m.votes > 1000** - This line filters the matched ""Movie"" nodes based on the criteria: released between 1980 and 2000 (inclusive) and having more than 1000 votes.
3. **RETURN m.title** - Finally, the query returns the ""title"" property of the filtered ""Movie"" nodes, providing a list of movie titles matching the criteria."
"Who directed movies with ""Slapstick redeemed only by the Robin Williams and"" reviews?",movies,"<explanation>
1. We start by finding the movies that have the specified review summary.
2. Then we traverse the `DIRECTED` relationship from those movies to find the directors.
3. Finally, we return the names of the directors.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE p.summary = 'Slapstick redeemed only by the Robin Williams and '
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE p.summary = 'Slapstick redeemed only by the Robin Williams and '
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Multi-step Queries,"MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE p.summary = 'Slapstick redeemed only by the Robin Williams and '
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","1. We start by finding the movies that have the specified review summary.
2. Then we traverse the `DIRECTED` relationship from those movies to find the directors.
3. Finally, we return the names of the directors.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE p.summary = 'Slapstick redeemed only by the Robin Williams and '
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
What are the summaries of reviews for movies released in 1999?,movies,"<explanation>
This query starts by finding movies released in 1999, then matches to people who reviewed those movies, and finally returns the summaries of those reviews.
</explanation>
```cypher
MATCH (m:Movie {released: 1999})<-[r:REVIEWED]-(p:Person)
RETURN r.summary
```",Multi-step Queries,"MATCH (m:Movie {released: 1999})<-[r:REVIEWED]-(p:Person)
RETURN r.summary","This query starts by finding movies released in 1999, then matches to people who reviewed those movies, and finally returns the summaries of those reviews."
Find the names of people born before 1960 who acted in movies directed by people born after 1960.,movies,"<explanation>
This query first finds all actors born before 1960 and all directors born after 1960. Then, it looks for movies where these actors acted in and these directors directed. Finally, it returns the names of those actors.

1. **MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)**: This part matches the pattern of actors acting in movies and directors directing movies.
2. **WHERE actor.born < 1960 AND director.born > 1960**: This filters the matched actors and directors based on their birth years.
3. **RETURN DISTINCT actor.name**: This returns the names of the actors who meet the criteria. The DISTINCT keyword ensures that each actor's name is returned only once, even if they acted in multiple movies directed by directors born after 1960.
</explanation>
```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE actor.born < 1960 AND director.born > 1960
RETURN DISTINCT actor.name
```",Multi-step Queries,"MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE actor.born < 1960 AND director.born > 1960
RETURN DISTINCT actor.name","This query first finds all actors born before 1960 and all directors born after 1960. Then, it looks for movies where these actors acted in and these directors directed. Finally, it returns the names of those actors.

1. **MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)**: This part matches the pattern of actors acting in movies and directors directing movies.
2. **WHERE actor.born < 1960 AND director.born > 1960**: This filters the matched actors and directors based on their birth years.
3. **RETURN DISTINCT actor.name**: This returns the names of the actors who meet the criteria. The DISTINCT keyword ensures that each actor's name is returned only once, even if they acted in multiple movies directed by directors born after 1960."
"Which movies with ""An amazing journey"" reviews were released after 1990?",movies,"<explanation>
This query looks for movies that were reviewed with the summary ""An amazing journey"" and were released after 1990. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies and the people who reviewed them.
2. **WHERE r.summary = ""An amazing journey"" AND m.released > 1990**: This filters the results to only include movies with the specific review summary and a release year greater than 1990.
3. **RETURN m.title**: This returns the titles of the movies that match the criteria.

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey"" AND m.released > 1990
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey"" AND m.released > 1990
RETURN m.title","This query looks for movies that were reviewed with the summary ""An amazing journey"" and were released after 1990. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies and the people who reviewed them.
2. **WHERE r.summary = ""An amazing journey"" AND m.released > 1990**: This filters the results to only include movies with the specific review summary and a release year greater than 1990.
3. **RETURN m.title**: This returns the titles of the movies that match the criteria."
"Who produced movies with ""Silly, but fun"" reviews and more than 2000 votes?",movies,"<explanation>
1. **MATCH** the movies with the review ""Silly, but fun"".
2. **MATCH** the persons who produced these movies.
3. **WHERE** the movie `votes` property is greater than 2000.
4. **RETURN** the names of the persons.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE m.votes > 2000
RETURN DISTINCT producer.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE m.votes > 2000
RETURN DISTINCT producer.name","1. **MATCH** the movies with the review ""Silly, but fun"".
2. **MATCH** the persons who produced these movies.
3. **WHERE** the movie `votes` property is greater than 2000.
4. **RETURN** the names of the persons."
"What are the release years of movies with ""A solid romp"" reviews and directed by people born before 1970?",movies,"<explanation>
1. **Match reviewed movies**: We start by matching all `Movie` nodes that have incoming `REVIEWED` relationships with the summary ""A solid romp"".
2. **Match directors**: From those movies, we traverse to `Person` nodes connected via an outgoing `DIRECTED` relationship, representing the directors.
3. **Filter by birth year**: We filter the directors based on their `born` property being less than 1970.
4. **Return release years**: Finally, we return the distinct `released` years of the movies that fulfill the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN DISTINCT m.released
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN DISTINCT m.released
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN DISTINCT m.released","1. **Match reviewed movies**: We start by matching all `Movie` nodes that have incoming `REVIEWED` relationships with the summary ""A solid romp"".
2. **Match directors**: From those movies, we traverse to `Person` nodes connected via an outgoing `DIRECTED` relationship, representing the directors.
3. **Filter by birth year**: We filter the directors based on their `born` property being less than 1970.
4. **Return release years**: Finally, we return the distinct `released` years of the movies that fulfill the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp""
WITH m
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN DISTINCT m.released
```"
"Find the taglines of movies with ""Pretty funny at times"" reviews and released before 2005.",movies,"<explanation>
This query first finds movies with reviews containing the exact phrase ""Pretty funny at times"" and released before 2005. Then, it returns the titles of those movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = 'Pretty funny at times' AND m.released < 2005
RETURN m.tagline
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = 'Pretty funny at times' AND m.released < 2005
RETURN m.tagline","This query first finds movies with reviews containing the exact phrase ""Pretty funny at times"" and released before 2005. Then, it returns the titles of those movies."
List the names of people born after 1955 who acted in movies with ratings above 95.,movies,"<explanation>
1. **Start with Person nodes where born property is greater than 1955**
2. **Traverse ACTED_IN relationships to Movie nodes**
3. **Filter for Movie nodes that have a rating property on the REVIEWED relationship greater than 95**
4. **Return the name of the Person nodes**

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1955 AND r.rating > 95
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1955 AND r.rating > 95
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1955 AND r.rating > 95
RETURN DISTINCT p.name","1. **Start with Person nodes where born property is greater than 1955**
2. **Traverse ACTED_IN relationships to Movie nodes**
3. **Filter for Movie nodes that have a rating property on the REVIEWED relationship greater than 95**
4. **Return the name of the Person nodes**

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-()
WHERE p.born > 1955 AND r.rating > 95
RETURN DISTINCT p.name
```"
"Which movies with ""Fun, but a little far fetched"" reviews have more than 500 votes?",movies,"<explanation>
1. **Find movies with the specified review:** We start by matching all `Movie` nodes connected to a `Person` node through the `REVIEWED` relationship where the `summary` property of the review is ""Fun, but a little far fetched"".

2. **Filter movies based on vote count:** From the movies identified in the previous step, we filter for movies that have more than 500 votes.

3. **Return the movie titles:** Finally, we return the titles of the movies that satisfy both criteria.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 500
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 500
RETURN m.title","1. **Find movies with the specified review:** We start by matching all `Movie` nodes connected to a `Person` node through the `REVIEWED` relationship where the `summary` property of the review is ""Fun, but a little far fetched"".

2. **Filter movies based on vote count:** From the movies identified in the previous step, we filter for movies that have more than 500 votes.

3. **Return the movie titles:** Finally, we return the titles of the movies that satisfy both criteria."
"Who directed movies with taglines containing the word ""Real""?",movies,"<explanation>
1. We need to find movies that have the word ""Real"" in their tagline. We can use the `CONTAINS` operator for this.
2. Then we need to find the directors of those movies. The `DIRECTED` relationship connects `Person` nodes to `Movie` nodes.
3. Finally, we return the names of the directors.
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","1. We need to find movies that have the word ""Real"" in their tagline. We can use the `CONTAINS` operator for this.
2. Then we need to find the directors of those movies. The `DIRECTED` relationship connects `Person` nodes to `Movie` nodes.
3. Finally, we return the names of the directors.
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```"
What are the summaries of reviews given by people born after 1970 for movies released before 2005?,movies,"<explanation>
1. **MATCH** the `Person` nodes with a `born` property greater than 1970.
2. **MATCH** those `Person` nodes having an outgoing `REVIEWED` relationship to `Movie` nodes.
3. **WHERE** the `Movie` nodes have a `released` property less than 2005.
4. **RETURN** the `summary` property of the `REVIEWED` relationship.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2005
RETURN r.summary
```
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2005
RETURN r.summary
```",Multi-step Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2005
RETURN r.summary","1. **MATCH** the `Person` nodes with a `born` property greater than 1970.
2. **MATCH** those `Person` nodes having an outgoing `REVIEWED` relationship to `Movie` nodes.
3. **WHERE** the `Movie` nodes have a `released` property less than 2005.
4. **RETURN** the `summary` property of the `REVIEWED` relationship.

```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2005
RETURN r.summary
```"
Find the names of people who produced and wrote the same movie.,movies,"<explanation>
This query looks for people who have both PRODUCED and WROTE relationships with the same movie.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)**: We start by matching patterns where a person (p) is related to a movie (m) with both PRODUCED and WROTE relationships. The same person node (p) needs to be on both sides of the pattern.

2. **RETURN DISTINCT p.name**: Finally, we return the name of each person (p) found. The DISTINCT keyword ensures that each person's name is only returned once, even if they produced and wrote multiple movies.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name","This query looks for people who have both PRODUCED and WROTE relationships with the same movie.

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)**: We start by matching patterns where a person (p) is related to a movie (m) with both PRODUCED and WROTE relationships. The same person node (p) needs to be on both sides of the pattern.

2. **RETURN DISTINCT p.name**: Finally, we return the name of each person (p) found. The DISTINCT keyword ensures that each person's name is only returned once, even if they produced and wrote multiple movies."
"Which movies released between 1990 and 2005 have ""Dark, but compelling"" reviews?",movies,"<explanation>
This query looks for movies released between 1990 and 2005 with reviews that have the summary ""Dark, but compelling.""  
1. **Match Movie Nodes:** It starts by matching all `Movie` nodes.
2. **Filter by Release Year:** It filters these movies to those released between 1990 and 2005 using a `WHERE` clause.
3. **Match Reviewed Relationships:** It then looks for `REVIEWED` relationships connected to these movies.
4. **Filter by Review Summary:** It further filters these relationships to only include those where the `summary` property is ""Dark, but compelling.""
5. **Return the Movie Titles:** Finally, it returns the titles of the movies that pass through all the filters.
</explanation>
```cypher
MATCH (m:Movie)
WHERE 1990 <= m.released <= 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)
WHERE 1990 <= m.released <= 2005
MATCH (p:Person)-[r:REVIEWED]->(m)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title","This query looks for movies released between 1990 and 2005 with reviews that have the summary ""Dark, but compelling.""  
1. **Match Movie Nodes:** It starts by matching all `Movie` nodes.
2. **Filter by Release Year:** It filters these movies to those released between 1990 and 2005 using a `WHERE` clause.
3. **Match Reviewed Relationships:** It then looks for `REVIEWED` relationships connected to these movies.
4. **Filter by Review Summary:** It further filters these relationships to only include those where the `summary` property is ""Dark, but compelling.""
5. **Return the Movie Titles:** Finally, it returns the titles of the movies that pass through all the filters."
"Who acted in movies with ""The coolest football movie ever"" reviews and released after 1995?",movies,"<explanation>
1. **Find movies with the specific review:** Start by finding movies that have a `REVIEWED` relationship with the summary ""The coolest football movie ever"".
2. **Filter movies by release year:** Filter these movies to only include those released after 1995 using the `released` property of the `Movie` node.
3. **Find actors:**  Traverse the `ACTED_IN` relationship from those movies to the `Person` nodes representing the actors.
4. **Return actor names:** Return the `name` property of the actors.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released > 1995
MATCH (m)<-[:ACTED_IN]-(a:Person)
RETURN DISTINCT a.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released > 1995
MATCH (m)<-[:ACTED_IN]-(a:Person)
RETURN DISTINCT a.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released > 1995
MATCH (m)<-[:ACTED_IN]-(a:Person)
RETURN DISTINCT a.name","1. **Find movies with the specific review:** Start by finding movies that have a `REVIEWED` relationship with the summary ""The coolest football movie ever"".
2. **Filter movies by release year:** Filter these movies to only include those released after 1995 using the `released` property of the `Movie` node.
3. **Find actors:**  Traverse the `ACTED_IN` relationship from those movies to the `Person` nodes representing the actors.
4. **Return actor names:** Return the `name` property of the actors.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released > 1995
MATCH (m)<-[:ACTED_IN]-(a:Person)
RETURN DISTINCT a.name
```"
"What are the taglines of movies with ""You had me at Jerry"" reviews and more than 1000 votes?",movies,"<explanation>
This query starts with finding movies that have reviews with the summary ""You had me at Jerry"".  We then filter these movies further, ensuring they have more than 1000 votes. Finally, we return the taglines of these movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies (""m"") that have been reviewed by a person (""p"") through the ""REVIEWED"" relationship (""r"").
2. **WHERE r.summary = ""You had me at Jerry""**:  This filters those matches to only include movies with reviews where the summary is ""You had me at Jerry"".
3. **AND m.votes > 1000**: This part further filters the results to only include movies with more than 1000 votes.
4. **RETURN m.tagline**: Finally, the query returns the taglines (""tagline"") of the movies (""m"") that meet all the criteria.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.votes > 1000
RETURN m.tagline
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.votes > 1000
RETURN m.tagline","This query starts with finding movies that have reviews with the summary ""You had me at Jerry"".  We then filter these movies further, ensuring they have more than 1000 votes. Finally, we return the taglines of these movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies (""m"") that have been reviewed by a person (""p"") through the ""REVIEWED"" relationship (""r"").
2. **WHERE r.summary = ""You had me at Jerry""**:  This filters those matches to only include movies with reviews where the summary is ""You had me at Jerry"".
3. **AND m.votes > 1000**: This part further filters the results to only include movies with more than 1000 votes.
4. **RETURN m.tagline**: Finally, the query returns the taglines (""tagline"") of the movies (""m"") that meet all the criteria."
Find the names of people who wrote movies released before 2000 with ratings between 80 and 95.,movies,"<explanation>
1. We start by matching the Person nodes who have a WROTE relationship with Movie nodes: `(p:Person)-[:WROTE]->(m:Movie)`
2. We filter these Movie nodes to only those released before the year 2000: `WHERE m.released < 2000`
3. Next, we match those movies with reviews with ratings between 80 and 95: `WITH p,m MATCH (p)-[r:REVIEWED]->(m) WHERE r.rating BETWEEN 80 AND 95`
4. Finally, we return the names of the people who wrote these movies: `RETURN DISTINCT p.name`

This query effectively combines multiple match patterns and filtering criteria to identify the people who wrote movies that were both released before 2000 and received high ratings (between 80 and 95).
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
WITH p, m 
MATCH (p)-[r:REVIEWED]->(m) 
WHERE r.rating BETWEEN 80 AND 95
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
WITH p, m 
MATCH (p)-[r:REVIEWED]->(m) 
WHERE r.rating BETWEEN 80 AND 95
RETURN DISTINCT p.name","1. We start by matching the Person nodes who have a WROTE relationship with Movie nodes: `(p:Person)-[:WROTE]->(m:Movie)`
2. We filter these Movie nodes to only those released before the year 2000: `WHERE m.released < 2000`
3. Next, we match those movies with reviews with ratings between 80 and 95: `WITH p,m MATCH (p)-[r:REVIEWED]->(m) WHERE r.rating BETWEEN 80 AND 95`
4. Finally, we return the names of the people who wrote these movies: `RETURN DISTINCT p.name`

This query effectively combines multiple match patterns and filtering criteria to identify the people who wrote movies that were both released before 2000 and received high ratings (between 80 and 95)."
Which movies produced by people born after 1950 have more than 3000 votes?,movies,"<explanation>
This query starts by matching all `Person` nodes with a `born` property greater than 1950. Then, it traverses the `PRODUCED` relationship to find all movies produced by those people. Finally, it filters the movies based on their number of votes, keeping only those with more than 3000 votes. 

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)**: This part of the query matches all `Person` nodes that have a `PRODUCED` relationship with a `Movie` node.
2. **WHERE p.born > 1950**: This part filters the `Person` nodes to only include those born after 1950.
3. **WITH m WHERE m.votes > 3000**: This part filters the `Movie` nodes to only include those with more than 3000 votes.
4. **RETURN m**:  This returns the `Movie` nodes that satisfy the criteria.
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1950
WITH m 
WHERE m.votes > 3000
RETURN m
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1950
WITH m 
WHERE m.votes > 3000
RETURN m","This query starts by matching all `Person` nodes with a `born` property greater than 1950. Then, it traverses the `PRODUCED` relationship to find all movies produced by those people. Finally, it filters the movies based on their number of votes, keeping only those with more than 3000 votes. 

1. **MATCH (p:Person)-[:PRODUCED]->(m:Movie)**: This part of the query matches all `Person` nodes that have a `PRODUCED` relationship with a `Movie` node.
2. **WHERE p.born > 1950**: This part filters the `Person` nodes to only include those born after 1950.
3. **WITH m WHERE m.votes > 3000**: This part filters the `Movie` nodes to only include those with more than 3000 votes.
4. **RETURN m**:  This returns the `Movie` nodes that satisfy the criteria."
"Who acted in ""The Matrix"" and also directed another movie?",movies,"<explanation>
1. **Match the movie:** Start by matching the movie with the title ""The Matrix"".
2. **Find the actors:** Find all persons who have an `ACTED_IN` relationship with the movie ""The Matrix"".
3. **Check for directors:** From the actors found, check if they also have a `DIRECTED` relationship with any other movie.
4. **Return the actors:** Return the names of the actors who meet both criteria.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WITH p
WHERE EXISTS ((p)-[:DIRECTED]->(:Movie))
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WITH p
WHERE EXISTS ((p)-[:DIRECTED]->(:Movie))
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WITH p
WHERE EXISTS ((p)-[:DIRECTED]->(:Movie))
RETURN DISTINCT p.name","1. **Match the movie:** Start by matching the movie with the title ""The Matrix"".
2. **Find the actors:** Find all persons who have an `ACTED_IN` relationship with the movie ""The Matrix"".
3. **Check for directors:** From the actors found, check if they also have a `DIRECTED` relationship with any other movie.
4. **Return the actors:** Return the names of the actors who meet both criteria.

```cypher
MATCH (m:Movie {title: ""The Matrix""})
MATCH (p:Person)-[:ACTED_IN]->(m)
WITH p
WHERE EXISTS ((p)-[:DIRECTED]->(:Movie))
RETURN DISTINCT p.name
```"
"What are the ratings given for movies released in the same year as ""Speed Racer""?",movies,"<explanation>
1. First we need to find the movie titled ""Speed Racer"" to get its release year
2. Then we need to find all other movies released in that same year
3. Finally, return the rating for each review associated with those movies

```cypher
MATCH (m:Movie {title: 'Speed Racer'})
WITH m.released AS releaseYear
MATCH (m:Movie {released: releaseYear})<-[r:REVIEWED]-(p:Person)
RETURN r.rating
```
</explanation>
```cypher
MATCH (m:Movie {title: 'Speed Racer'})
WITH m.released AS releaseYear
MATCH (m:Movie {released: releaseYear})<-[r:REVIEWED]-(p:Person)
RETURN r.rating
```",Multi-step Queries,"MATCH (m:Movie {title: 'Speed Racer'})
WITH m.released AS releaseYear
MATCH (m:Movie {released: releaseYear})<-[r:REVIEWED]-(p:Person)
RETURN r.rating","1. First we need to find the movie titled ""Speed Racer"" to get its release year
2. Then we need to find all other movies released in that same year
3. Finally, return the rating for each review associated with those movies

```cypher
MATCH (m:Movie {title: 'Speed Racer'})
WITH m.released AS releaseYear
MATCH (m:Movie {released: releaseYear})<-[r:REVIEWED]-(p:Person)
RETURN r.rating
```"
"Find the names of people who directed movies reviewed with ""An amazing journey"".",movies,"<explanation>
1. **Match the review:** Start by finding the `REVIEWED` relationships with the summary ""An amazing journey"".
2. **Get the movie:** Traverse the `REVIEWED` relationship to the `Movie` node.
3. **Get the director:** Traverse the `DIRECTED` relationship from the `Movie` to the `Person` node (the director).
4. **Return the name:** Return the `name` property of the director.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Multi-step Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","1. **Match the review:** Start by finding the `REVIEWED` relationships with the summary ""An amazing journey"".
2. **Get the movie:** Traverse the `REVIEWED` relationship to the `Movie` node.
3. **Get the director:** Traverse the `DIRECTED` relationship from the `Movie` to the `Person` node (the director).
4. **Return the name:** Return the `name` property of the director.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""An amazing journey""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```"
"List the titles of movies with ""Silly, but fun"" reviews released after 1995.",movies,"<explanation>
1. **Find movies with the specific review:** Start by finding all `REVIEWED` relationships where the `summary` is ""Silly, but fun"".
2. **Filter by release year:** Traverse to the connected `Movie` nodes and filter for movies released after 1995.
3. **Return the movie titles:** Return the `title` property of the matching movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun"" AND m.released > 1995
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun"" AND m.released > 1995
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun"" AND m.released > 1995
RETURN m.title","1. **Find movies with the specific review:** Start by finding all `REVIEWED` relationships where the `summary` is ""Silly, but fun"".
2. **Filter by release year:** Traverse to the connected `Movie` nodes and filter for movies released after 1995.
3. **Return the movie titles:** Return the `title` property of the matching movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun"" AND m.released > 1995
RETURN m.title
```"
"Who wrote movies with ""A solid romp"" reviews and released before 2010?",movies,"<explanation>
1. **Match reviewed movies:** Start by matching all `Person` nodes that have a `REVIEWED` relationship with `Movie` nodes.
2. **Filter by review and release year:** Filter for `Movie` nodes where the `summary` property of the `REVIEWED` relationship is ""A solid romp"" and the `released` property of the `Movie` node is less than 2010.
3. **Match writers:** Match the `WROTE` relationships from `Person` nodes to the filtered `Movie` nodes.
4. **Return writer names:** Return the `name` property of the `Person` nodes who wrote these movies.
</explanation>
```cypher
MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp"" AND m.released < 2010
MATCH (p2:Person)-[:WROTE]->(m)
RETURN DISTINCT p2.name
```",Multi-step Queries,"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp"" AND m.released < 2010
MATCH (p2:Person)-[:WROTE]->(m)
RETURN DISTINCT p2.name","1. **Match reviewed movies:** Start by matching all `Person` nodes that have a `REVIEWED` relationship with `Movie` nodes.
2. **Filter by review and release year:** Filter for `Movie` nodes where the `summary` property of the `REVIEWED` relationship is ""A solid romp"" and the `released` property of the `Movie` node is less than 2010.
3. **Match writers:** Match the `WROTE` relationships from `Person` nodes to the filtered `Movie` nodes.
4. **Return writer names:** Return the `name` property of the `Person` nodes who wrote these movies."
"What are the release years of movies with ""Pretty funny at times"" reviews and more than 500 votes?",movies,"<explanation>
This query identifies movies with the review ""Pretty funny at times"" and more than 500 votes, returning their release years. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = ""Pretty funny at times"" AND m.votes > 500**: This part finds all movies that have a review with the summary ""Pretty funny at times"" and also have more than 500 votes.
2. **RETURN m.released**: This part returns the release year of each movie found in the previous step. 

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-() 
WHERE r.summary = ""Pretty funny at times"" AND m.votes > 500
RETURN m.released
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-() 
WHERE r.summary = ""Pretty funny at times"" AND m.votes > 500
RETURN m.released","This query identifies movies with the review ""Pretty funny at times"" and more than 500 votes, returning their release years. 

1. **MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = ""Pretty funny at times"" AND m.votes > 500**: This part finds all movies that have a review with the summary ""Pretty funny at times"" and also have more than 500 votes.
2. **RETURN m.released**: This part returns the release year of each movie found in the previous step."
Find the taglines of movies acted in by people born after 1960 and released after 2000.,movies,"<explanation>
This query starts by finding all people born after 1960. Then, it matches those people to the movies they ACTED_IN.  Finally, it filters for movies released after 2000 and returns the taglines of those movies.

1. **MATCH (p:Person)**: Starts with finding all ""Person"" nodes.
2. **WHERE p.born > 1960**: Filters for ""Person"" nodes with the ""born"" property greater than 1960.
3. **MATCH (p)-[:ACTED_IN]->(m:Movie)**: Matches those people to the movies they ""ACTED_IN"" through the relationship.
4. **WHERE m.released > 2000**: Further filters for ""Movie"" nodes with the ""released"" property greater than 2000.
5. **RETURN m.tagline**: Returns the ""tagline"" property of the filtered movies.
</explanation>
```cypher
MATCH (p:Person)
WHERE p.born > 1960
MATCH (p)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.tagline
```",Multi-step Queries,"MATCH (p:Person)
WHERE p.born > 1960
MATCH (p)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.tagline","This query starts by finding all people born after 1960. Then, it matches those people to the movies they ACTED_IN.  Finally, it filters for movies released after 2000 and returns the taglines of those movies.

1. **MATCH (p:Person)**: Starts with finding all ""Person"" nodes.
2. **WHERE p.born > 1960**: Filters for ""Person"" nodes with the ""born"" property greater than 1960.
3. **MATCH (p)-[:ACTED_IN]->(m:Movie)**: Matches those people to the movies they ""ACTED_IN"" through the relationship.
4. **WHERE m.released > 2000**: Further filters for ""Movie"" nodes with the ""released"" property greater than 2000.
5. **RETURN m.tagline**: Returns the ""tagline"" property of the filtered movies."
"Which movies directed by people born between 1955 and 1965 have ""Fun, but a little far fetched"" reviews?",movies,"<explanation>
This query first finds all people born between 1955 and 1965 (inclusive). Then, it matches those people who have directed movies that have a review with the summary ""Fun, but a little far fetched"". Finally, it returns the titles of those movies.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)** - This finds all movies directed by people.
2. **WHERE p.born >= 1955 AND p.born <= 1965** - This filters the people to only include those born between 1955 and 1965 (inclusive).
3. **MATCH (m)<-[:REVIEWED]-(r:Person)** - This matches the movies to the people who have reviewed them.
4. **WHERE r.summary = ""Fun, but a little far fetched""** - This filters the reviews to only include those with the summary ""Fun, but a little far fetched"".
5. **RETURN DISTINCT m.title** - This returns the titles of the movies. The DISTINCT keyword ensures that each movie title is only returned once, even if it has multiple ""Fun, but a little far fetched"" reviews.
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1955 AND p.born <= 1965
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN DISTINCT m.title
```",Multi-step Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1955 AND p.born <= 1965
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Fun, but a little far fetched""
RETURN DISTINCT m.title","This query first finds all people born between 1955 and 1965 (inclusive). Then, it matches those people who have directed movies that have a review with the summary ""Fun, but a little far fetched"". Finally, it returns the titles of those movies.

1. **MATCH (p:Person)-[:DIRECTED]->(m:Movie)** - This finds all movies directed by people.
2. **WHERE p.born >= 1955 AND p.born <= 1965** - This filters the people to only include those born between 1955 and 1965 (inclusive).
3. **MATCH (m)<-[:REVIEWED]-(r:Person)** - This matches the movies to the people who have reviewed them.
4. **WHERE r.summary = ""Fun, but a little far fetched""** - This filters the reviews to only include those with the summary ""Fun, but a little far fetched"".
5. **RETURN DISTINCT m.title** - This returns the titles of the movies. The DISTINCT keyword ensures that each movie title is only returned once, even if it has multiple ""Fun, but a little far fetched"" reviews."
"Who reviewed movies with taglines containing the word ""World""?",movies,"<explanation>
This query looks for movies that contain the word ""World"" in their tagline and then returns the names of all people who reviewed those movies.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable 'm'.
2. **WHERE m.tagline CONTAINS ""World""**: This line filters the previously matched movies to only include those where the `tagline` property contains the word ""World"". 
3. **MATCH (p:Person)-[:REVIEWED]->(m)**: This line looks for all relationships of type `REVIEWED` originating from nodes with the label ""Person"" (assigned to the variable 'p') and targeting the previously filtered movies 'm'.
4. **RETURN DISTINCT p.name**: This line returns the distinct names of the people who reviewed the filtered movies. The DISTINCT keyword ensures that each name is returned only once, even if a person reviewed multiple movies containing the word ""World"" in their taglines.

</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS ""World""
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS ""World""
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN DISTINCT p.name","This query looks for movies that contain the word ""World"" in their tagline and then returns the names of all people who reviewed those movies.

1. **MATCH (m:Movie)**: This line starts by finding all nodes with the label ""Movie"" and assigning them to the variable 'm'.
2. **WHERE m.tagline CONTAINS ""World""**: This line filters the previously matched movies to only include those where the `tagline` property contains the word ""World"". 
3. **MATCH (p:Person)-[:REVIEWED]->(m)**: This line looks for all relationships of type `REVIEWED` originating from nodes with the label ""Person"" (assigned to the variable 'p') and targeting the previously filtered movies 'm'.
4. **RETURN DISTINCT p.name**: This line returns the distinct names of the people who reviewed the filtered movies. The DISTINCT keyword ensures that each name is returned only once, even if a person reviewed multiple movies containing the word ""World"" in their taglines."
What are the summaries of reviews for movies produced by Joel Silver?,movies,"<explanation>
1. We need to find the movies produced by a person named ""Joel Silver"".
2. Then, we need to retrieve all the reviews associated with those movies.
3. Finally, we return the summaries of those reviews. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH m
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH m
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary
```",Multi-step Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH m
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary","1. We need to find the movies produced by a person named ""Joel Silver"".
2. Then, we need to retrieve all the reviews associated with those movies.
3. Finally, we return the summaries of those reviews. 

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WITH m
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN r.summary
```"
Find the names of people who acted in and produced the same movie.,movies,"<explanation>
This query starts by finding all people who acted in movies. Then it looks for people who produced a movie. Finally it filters down to people who acted in and produced the same movie. 

```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
MATCH (person)-[:PRODUCED]->(movie)
RETURN DISTINCT person.name
```
</explanation>
```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
MATCH (person)-[:PRODUCED]->(movie)
RETURN DISTINCT person.name
```",Multi-step Queries,"MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
MATCH (person)-[:PRODUCED]->(movie)
RETURN DISTINCT person.name","This query starts by finding all people who acted in movies. Then it looks for people who produced a movie. Finally it filters down to people who acted in and produced the same movie. 

```cypher
MATCH (person:Person)-[:ACTED_IN]->(movie:Movie)
MATCH (person)-[:PRODUCED]->(movie)
RETURN DISTINCT person.name
```"
"Which movies with ""Dark, but compelling"" reviews have more than 2000 votes?",movies,"<explanation>
1. **Start with movies:** We begin by matching all Movie nodes.
2. **Filter by reviews:** We then filter these movies based on the ""REVIEWED"" relationship and the ""summary"" property being equal to ""Dark, but compelling"".
3. **Filter by votes:** We further filter the movies based on the ""votes"" property being greater than 2000.
4. **Return the titles:** Finally, we return the ""title"" property of the remaining movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.title","1. **Start with movies:** We begin by matching all Movie nodes.
2. **Filter by reviews:** We then filter these movies based on the ""REVIEWED"" relationship and the ""summary"" property being equal to ""Dark, but compelling"".
3. **Filter by votes:** We further filter the movies based on the ""votes"" property being greater than 2000.
4. **Return the titles:** Finally, we return the ""title"" property of the remaining movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.title
```"
"Who directed movies with ""The coolest football movie ever"" reviews released before 2005?",movies,"<explanation>
1. **Match reviewed movies:** Find all movies that have a `REVIEWED` relationship with the summary ""The coolest football movie ever"".
2. **Filter by release year:** Filter those movies to only include ones released before 2005.
3. **Match directors:** Find the directors of those movies by traversing the `DIRECTED` relationship.
4. **Return directors:** Return the names of the directors. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name","1. **Match reviewed movies:** Find all movies that have a `REVIEWED` relationship with the summary ""The coolest football movie ever"".
2. **Filter by release year:** Filter those movies to only include ones released before 2005.
3. **Match directors:** Find the directors of those movies by traversing the `DIRECTED` relationship.
4. **Return directors:** Return the names of the directors. 

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN DISTINCT d.name
```"
"What are the taglines of movies with ""You had me at Jerry"" reviews and directed by people born before 1970?",movies,"<explanation>
1. **Match reviewed movies**: We start by finding movies with the review ""You had me at Jerry"".
2. **Match directors**: We then find the directors of these movies, ensuring they were born before 1970.
3. **Return taglines**: Finally, we return the taglines of the movies matching both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN m.tagline
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN m.tagline
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN m.tagline","1. **Match reviewed movies**: We start by finding movies with the review ""You had me at Jerry"".
2. **Match directors**: We then find the directors of these movies, ensuring they were born before 1970.
3. **Return taglines**: Finally, we return the taglines of the movies matching both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1970
RETURN m.tagline
```"
Find the names of people who wrote movies released after 2000 with ratings between 75 and 90.,movies,"<explanation>
This query starts by finding all movies released after 2000, then matches to people who wrote those movies. Then it filters by reviews with ratings between 75 and 90, and finally returns the names of the writers.
</explanation>
```cypher
MATCH (m:Movie)<-[wr:WROTE]-(p:Person)
WHERE m.released > 2000
WITH m, p, wr
MATCH (p)-[r:REVIEWED]->(m)
WHERE  r.rating >= 75 AND r.rating <=90
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie)<-[wr:WROTE]-(p:Person)
WHERE m.released > 2000
WITH m, p, wr
MATCH (p)-[r:REVIEWED]->(m)
WHERE  r.rating >= 75 AND r.rating <=90
RETURN DISTINCT p.name","This query starts by finding all movies released after 2000, then matches to people who wrote those movies. Then it filters by reviews with ratings between 75 and 90, and finally returns the names of the writers."
"Which movies produced by people born before 1955 have ""An amazing journey"" reviews?",movies,"<explanation>
This query looks for movies that have received a review with the summary ""An amazing journey"" and were produced by individuals born before 1955. 

1. **MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)**: This part finds all movies that have a REVIEWED relationship with a Person node. It will check the 'summary' property of the REVIEWED relationship to see if it matches ""An amazing journey"".
2. **MATCH (m)<-[:PRODUCED]-(producer:Person)** This part finds all movies that have a PRODUCED relationship with a Person node. It will then filter these producers to only include those born before 1955.
3. **RETURN m.title**: This will return the titles of all movies that meet both criteria.

</explanation>
```cypher
MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person) 
WHERE reviewer.REVIEWED.summary = ""An amazing journey""
MATCH (m)<-[:PRODUCED]-(producer:Person) 
WHERE producer.born < 1955
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person) 
WHERE reviewer.REVIEWED.summary = ""An amazing journey""
MATCH (m)<-[:PRODUCED]-(producer:Person) 
WHERE producer.born < 1955
RETURN m.title","This query looks for movies that have received a review with the summary ""An amazing journey"" and were produced by individuals born before 1955. 

1. **MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)**: This part finds all movies that have a REVIEWED relationship with a Person node. It will check the 'summary' property of the REVIEWED relationship to see if it matches ""An amazing journey"".
2. **MATCH (m)<-[:PRODUCED]-(producer:Person)** This part finds all movies that have a PRODUCED relationship with a Person node. It will then filter these producers to only include those born before 1955.
3. **RETURN m.title**: This will return the titles of all movies that meet both criteria."
"Who acted in movies released in the same year as ""Something's Gotta Give""?",movies,"<explanation>
1. First, we need to find the movie ""Something's Gotta Give"" and get its release year.
2. Then, we need to find all movies released in that year.
3. Finally, we find all actors who acted in those movies and return their names.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})
MATCH (p:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})
MATCH (p:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})
MATCH (p:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name","1. First, we need to find the movie ""Something's Gotta Give"" and get its release year.
2. Then, we need to find all movies released in that year.
3. Finally, we find all actors who acted in those movies and return their names.

```cypher
MATCH (m:Movie {title: ""Something's Gotta Give""})
WITH m.released AS releaseYear
MATCH (m2:Movie {released: releaseYear})
MATCH (p:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT p.name
```"
"What are the ratings given for movies with the tagline ""Speed has no limits""?",movies,"<explanation>
This query identifies movies by their tagline and then retrieves the ratings for those movies from the REVIEWED relationships.

1. **Match the Movie:** We start by matching all Movie nodes with the tagline ""Speed has no limits.""
2. **Match the Reviewed Relationships:** From the matched movies, we traverse outgoing REVIEWED relationships to Person nodes, representing people who reviewed the movie.
3. **Return the Rating:**  Finally, we return the rating property from each REVIEWED relationship.

</explanation>
```cypher
MATCH (m:Movie {tagline: ""Speed has no limits""})<-[r:REVIEWED]-()
RETURN r.rating
```",Multi-step Queries,"MATCH (m:Movie {tagline: ""Speed has no limits""})<-[r:REVIEWED]-()
RETURN r.rating","This query identifies movies by their tagline and then retrieves the ratings for those movies from the REVIEWED relationships.

1. **Match the Movie:** We start by matching all Movie nodes with the tagline ""Speed has no limits.""
2. **Match the Reviewed Relationships:** From the matched movies, we traverse outgoing REVIEWED relationships to Person nodes, representing people who reviewed the movie.
3. **Return the Rating:**  Finally, we return the rating property from each REVIEWED relationship."
"Find the names of people who directed movies reviewed with ""Silly, but fun"".",movies,"<explanation>
1. **MATCH** the pattern where a Person node is related to a Movie node by the `DIRECTED` relationship and a different Person node is related to that same Movie node via the `REVIEWED` relationship.
2. **WHERE** the `summary` property of the `REVIEWED` relationship is ""Silly, but fun"".
3. **RETURN** the `name` property of the Person nodes that directed those movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Silly, but fun""
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Silly, but fun""
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Silly, but fun""
RETURN DISTINCT p.name","1. **MATCH** the pattern where a Person node is related to a Movie node by the `DIRECTED` relationship and a different Person node is related to that same Movie node via the `REVIEWED` relationship.
2. **WHERE** the `summary` property of the `REVIEWED` relationship is ""Silly, but fun"".
3. **RETURN** the `name` property of the Person nodes that directed those movies.

```cypher
MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-(:Person)
WHERE r.summary = ""Silly, but fun""
RETURN DISTINCT p.name
```"
"List the titles of movies with ""A solid romp"" reviews released after 2000.",movies,"<explanation>
1. **Match reviewed movies:** We start by matching all `Movie` nodes connected to a `Person` node through the `REVIEWED` relationship.
2. **Filter by review and release year:** We filter these movies based on two conditions:
    - The `summary` property of the `REVIEWED` relationship should be ""A solid romp"".
    - The `released` property of the `Movie` node should be greater than 2000.
3. **Return the movie titles:** Finally, we return the `title` property of the filtered `Movie` nodes.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 2000
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 2000
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 2000
RETURN m.title","1. **Match reviewed movies:** We start by matching all `Movie` nodes connected to a `Person` node through the `REVIEWED` relationship.
2. **Filter by review and release year:** We filter these movies based on two conditions:
    - The `summary` property of the `REVIEWED` relationship should be ""A solid romp"".
    - The `released` property of the `Movie` node should be greater than 2000.
3. **Return the movie titles:** Finally, we return the `title` property of the filtered `Movie` nodes.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.released > 2000
RETURN m.title
```"
"Who wrote movies with ""Pretty funny at times"" reviews and released before 2010?",movies,"<explanation>
1. **MATCH** the pattern of a `Person` who `:WROTE` a `Movie` that was `:REVIEWED` by another `Person`
2. **WHERE** the `summary` of the `REVIEWED` relationship is ""Pretty funny at times"" and the `released` property of the `Movie` is less than 2010
3. **RETURN** the `name` of the `Person` who wrote the movie

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times"" AND m.released < 2010
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times"" AND m.released < 2010
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times"" AND m.released < 2010
RETURN DISTINCT p.name","1. **MATCH** the pattern of a `Person` who `:WROTE` a `Movie` that was `:REVIEWED` by another `Person`
2. **WHERE** the `summary` of the `REVIEWED` relationship is ""Pretty funny at times"" and the `released` property of the `Movie` is less than 2010
3. **RETURN** the `name` of the `Person` who wrote the movie

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Pretty funny at times"" AND m.released < 2010
RETURN DISTINCT p.name
```"
"What are the release years of movies with ""Fun, but a little far fetched"" reviews and more than 1000 votes?",movies,"<explanation>
This query finds movies with the review ""Fun, but a little far fetched"" and more than 1000 votes and returns the release years of those movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies that have been reviewed, matching the movie, the review, and the person who wrote the review. 
2. **WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 1000**: This filters the results to only include movies with the specified review summary and more than 1000 votes.
3. **RETURN m.released**: This returns the release year of each movie that matched the criteria. 

</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 1000
RETURN m.released
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 1000
RETURN m.released","This query finds movies with the review ""Fun, but a little far fetched"" and more than 1000 votes and returns the release years of those movies.

1. **MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)**: This part finds all movies that have been reviewed, matching the movie, the review, and the person who wrote the review. 
2. **WHERE r.summary = ""Fun, but a little far fetched"" AND m.votes > 1000**: This filters the results to only include movies with the specified review summary and more than 1000 votes.
3. **RETURN m.released**: This returns the release year of each movie that matched the criteria."
Find the taglines of movies acted in by people born before 1960 and released after 1990.,movies,"<explanation>
1. **Find people born before 1960**: We start by matching all `Person` nodes with a `born` property less than 1960.
2. **Find movies released after 1990**: Then, we traverse the `ACTED_IN` relationships from these people to `Movie` nodes, filtering for movies with a `released` property greater than 1990.
3. **Return movie taglines**: Finally, we return the `tagline` property of the matched movies.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 1990
RETURN m.tagline
```
</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 1990
RETURN m.tagline
```",Multi-step Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 1990
RETURN m.tagline","1. **Find people born before 1960**: We start by matching all `Person` nodes with a `born` property less than 1960.
2. **Find movies released after 1990**: Then, we traverse the `ACTED_IN` relationships from these people to `Movie` nodes, filtering for movies with a `released` property greater than 1990.
3. **Return movie taglines**: Finally, we return the `tagline` property of the matched movies.

```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1960 AND m.released > 1990
RETURN m.tagline
```"
"Which movies directed by people born after 1960 have ""Dark, but compelling"" reviews?",movies,"<explanation>
1. **MATCH** the movies directed by people born after 1960: This involves finding `Movie` nodes connected to `Person` nodes via the `DIRECTED` relationship, where the `born` property of the `Person` node is greater than 1960.
2. **MATCH** the movies that have ""Dark, but compelling"" reviews: This involves finding the same `Movie` nodes that are also connected to `Person` nodes via the `REVIEWED` relationship where the `summary` property is ""Dark, but compelling"".
3. **RETURN** the titles of the movies.

```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE p.born > 1960
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE p.born > 1960
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE p.born > 1960
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title","1. **MATCH** the movies directed by people born after 1960: This involves finding `Movie` nodes connected to `Person` nodes via the `DIRECTED` relationship, where the `born` property of the `Person` node is greater than 1960.
2. **MATCH** the movies that have ""Dark, but compelling"" reviews: This involves finding the same `Movie` nodes that are also connected to `Person` nodes via the `REVIEWED` relationship where the `summary` property is ""Dark, but compelling"".
3. **RETURN** the titles of the movies.

```cypher
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
WHERE p.born > 1960
MATCH (m)<-[:REVIEWED]-(r:Person)
WHERE r.summary = ""Dark, but compelling""
RETURN m.title
```"
"Who reviewed movies with taglines containing the word ""Matrix""?",movies,"<explanation>
1. We need to find movies that have the word ""Matrix"" in their tagline. We can use the `CONTAINS` operator within a `WHERE` clause to filter for movies with taglines containing ""Matrix"".
2. We can then traverse the `REVIEWED` relationship from those movies to the `Person` nodes who reviewed them. 
3. We will return the `name` property of each `Person` node.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.tagline CONTAINS 'Matrix'
RETURN p.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.tagline CONTAINS 'Matrix'
RETURN p.name
```",Multi-step Queries,"MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.tagline CONTAINS 'Matrix'
RETURN p.name","1. We need to find movies that have the word ""Matrix"" in their tagline. We can use the `CONTAINS` operator within a `WHERE` clause to filter for movies with taglines containing ""Matrix"".
2. We can then traverse the `REVIEWED` relationship from those movies to the `Person` nodes who reviewed them. 
3. We will return the `name` property of each `Person` node.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.tagline CONTAINS 'Matrix'
RETURN p.name
```"
What are the summaries of reviews for movies produced by people born after 1950?,movies,"<explanation>
1. **Find people born after 1950:**
   - Start with the `Person` node and filter by the `born` property.
2. **Find movies produced by these people:**
   - Traverse the `PRODUCED` relationship from the filtered `Person` nodes to the `Movie` nodes.
3. **Find reviews for these movies:**
   - Traverse the `REVIEWED` relationship from the `Movie` nodes to the `Person` nodes who reviewed them.
4. **Return the summaries of the reviews:**
   - Access the `summary` property of the `REVIEWED` relationship.
</explanation>
```cypher
MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[review:REVIEWED]-()
WHERE person.born > 1950
RETURN review.summary
```",Multi-step Queries,"MATCH (person:Person)-[:PRODUCED]->(movie:Movie)<-[review:REVIEWED]-()
WHERE person.born > 1950
RETURN review.summary","1. **Find people born after 1950:**
   - Start with the `Person` node and filter by the `born` property.
2. **Find movies produced by these people:**
   - Traverse the `PRODUCED` relationship from the filtered `Person` nodes to the `Movie` nodes.
3. **Find reviews for these movies:**
   - Traverse the `REVIEWED` relationship from the `Movie` nodes to the `Person` nodes who reviewed them.
4. **Return the summaries of the reviews:**
   - Access the `summary` property of the `REVIEWED` relationship."
Find the names of people who acted in and wrote the same movie.,movies,"<explanation>
This query looks for `Person` nodes that are connected to the same `Movie` node with both `ACTED_IN` and `WROTE` relationships. 

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)**: This part of the query searches for patterns where a `Person` node `p` is connected to a `Movie` node `m` with an `ACTED_IN` relationship, and the same `Person` node `p` is also connected to that `Movie` node `m` with a `WROTE` relationship. 
2. **RETURN DISTINCT p.name**: This part of the query returns the distinct names of the `Person` nodes found in the previous step. 

</explanation>
```cypher
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)
RETURN DISTINCT p.name","This query looks for `Person` nodes that are connected to the same `Movie` node with both `ACTED_IN` and `WROTE` relationships. 

1. **MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:WROTE]-(p)**: This part of the query searches for patterns where a `Person` node `p` is connected to a `Movie` node `m` with an `ACTED_IN` relationship, and the same `Person` node `p` is also connected to that `Movie` node `m` with a `WROTE` relationship. 
2. **RETURN DISTINCT p.name**: This part of the query returns the distinct names of the `Person` nodes found in the previous step."
"Which movies with ""The coolest football movie ever"" reviews have more than 500 votes?",movies,"<explanation>
1. We need to find movies that have a 'REVIEWED' relationship with the summary ""The coolest football movie ever"".
2. Then we need to filter those movies to ones that have more than 500 votes. 
3. Finally, we return the titles of the movies that meet both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.votes > 500
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.votes > 500
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.votes > 500
RETURN m.title","1. We need to find movies that have a 'REVIEWED' relationship with the summary ""The coolest football movie ever"".
2. Then we need to filter those movies to ones that have more than 500 votes. 
3. Finally, we return the titles of the movies that meet both criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""The coolest football movie ever"" AND m.votes > 500
RETURN m.title
```"
"Who directed movies with ""You had me at Jerry"" reviews released before 2005?",movies,"<explanation>
1. **Match**: Find all the movies with a ""You had me at Jerry"" review
2. **Match**: For each movie found, match the person who directed the movie
3. **Where**: Only include movies released before 2005
4. **Return**: Return the names of the directors

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name","1. **Match**: Find all the movies with a ""You had me at Jerry"" review
2. **Match**: For each movie found, match the person who directed the movie
3. **Where**: Only include movies released before 2005
4. **Return**: Return the names of the directors

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""You had me at Jerry"" AND m.released < 2005
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN d.name
```"
"What are the taglines of movies with ""An amazing journey"" reviews and directed by people born after 1965?",movies,"<explanation>
1. **Match reviewed movies:** We start by matching all movies that have reviews with the summary ""An amazing journey"".
2. **Match directors:** Then, we need to match the directors of those movies who were born after 1965.
3. **Return taglines:** Finally, we return the taglines of the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born > 1965
RETURN m.tagline
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born > 1965
RETURN m.tagline
```
",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born > 1965
RETURN m.tagline","1. **Match reviewed movies:** We start by matching all movies that have reviews with the summary ""An amazing journey"".
2. **Match directors:** Then, we need to match the directors of those movies who were born after 1965.
3. **Return taglines:** Finally, we return the taglines of the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""An amazing journey""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born > 1965
RETURN m.tagline
```"
Find the names of people who wrote movies released before 2000 with ratings between 85 and 100.,movies,"<explanation>
1. **Match the pattern**: We need to find people who `WROTE` `Movie` nodes.
2. **Filter movies based on release year**: Filter for movies `released` before 2000.
3. **Find reviewed movies**: Match those movies with `REVIEWED` relationships.
4. **Filter reviews based on rating**: Keep only the reviews with a `rating` between 85 and 100.
5. **Return the names**:  Return the `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
MATCH (m)<-[r:REVIEWED]-()
WHERE 85 <= r.rating <= 100
RETURN DISTINCT p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
MATCH (m)<-[r:REVIEWED]-()
WHERE 85 <= r.rating <= 100
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
MATCH (m)<-[r:REVIEWED]-()
WHERE 85 <= r.rating <= 100
RETURN DISTINCT p.name","1. **Match the pattern**: We need to find people who `WROTE` `Movie` nodes.
2. **Filter movies based on release year**: Filter for movies `released` before 2000.
3. **Find reviewed movies**: Match those movies with `REVIEWED` relationships.
4. **Filter reviews based on rating**: Keep only the reviews with a `rating` between 85 and 100.
5. **Return the names**:  Return the `name` property of the `Person` nodes.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released < 2000
MATCH (m)<-[r:REVIEWED]-()
WHERE 85 <= r.rating <= 100
RETURN DISTINCT p.name
```"
"Which movies produced by people born between 1945 and 1955 have ""Silly, but fun"" reviews?",movies,"<explanation>
This query starts by finding people born between 1945 and 1955. Then it traverses the PRODUCED relationships to movies. Lastly, it filters for movies that have at least one review with the summary ""Silly, but fun"".
</explanation>
```cypher
MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE p.born >= 1945 AND p.born <= 1955 AND r.summary = ""Silly, but fun""
RETURN DISTINCT m.title 
```",Multi-step Queries,"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(r:Person)
WHERE p.born >= 1945 AND p.born <= 1955 AND r.summary = ""Silly, but fun""
RETURN DISTINCT m.title","This query starts by finding people born between 1945 and 1955. Then it traverses the PRODUCED relationships to movies. Lastly, it filters for movies that have at least one review with the summary ""Silly, but fun""."
Who acted in movies released in the same year as a movie directed by Lana Wachowski?,movies,"<explanation>
1. **Find Lana Wachowski:** Filter for the ""Person"" node with the name ""Lana Wachowski"".
2. **Get movies directed by Lana:** Traverse the ""DIRECTED"" relationships outgoing from Lana Wachowski to find all movies directed by her.
3. **Get the release year of those movies:** Extract the ""released"" property from those movies.
4. **Find other movies released in the same year:** Find all movies where the ""released"" property matches the release years of the movies directed by Lana Wachowski.
5. **Get the actors of those movies:** Traverse the ""ACTED_IN"" relationship incoming to those movies to find all the actors who acted in them.
6. **Return the names of the actors:** Return the distinct ""name"" property of those actors.
</explanation>
```cypher
MATCH (director:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
WITH m.released AS releaseYear
MATCH (m2:Movie) WHERE m2.released = releaseYear
MATCH (actor:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT actor.name
```",Multi-step Queries,"MATCH (director:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
WITH m.released AS releaseYear
MATCH (m2:Movie) WHERE m2.released = releaseYear
MATCH (actor:Person)-[:ACTED_IN]->(m2)
RETURN DISTINCT actor.name","1. **Find Lana Wachowski:** Filter for the ""Person"" node with the name ""Lana Wachowski"".
2. **Get movies directed by Lana:** Traverse the ""DIRECTED"" relationships outgoing from Lana Wachowski to find all movies directed by her.
3. **Get the release year of those movies:** Extract the ""released"" property from those movies.
4. **Find other movies released in the same year:** Find all movies where the ""released"" property matches the release years of the movies directed by Lana Wachowski.
5. **Get the actors of those movies:** Traverse the ""ACTED_IN"" relationship incoming to those movies to find all the actors who acted in them.
6. **Return the names of the actors:** Return the distinct ""name"" property of those actors."
"What are the ratings given for movies with taglines containing the word ""Speed""?",movies,"<explanation>
This query first finds movies with ""Speed"" in the tagline, then finds all people who reviewed those movies, and returns the rating they gave along with the title of the film. 
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN m.title, r.rating
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN m.title, r.rating","This query first finds movies with ""Speed"" in the tagline, then finds all people who reviewed those movies, and returns the rating they gave along with the title of the film."
"Find the names of people who directed movies reviewed with ""A solid romp"".",movies,"<explanation>
1. **Match the review:** Start by finding reviews with the summary ""A solid romp"".
2. **Traverse to the movie and director:** Follow the `REVIEWED` relationship to the `Movie` node, then the `DIRECTED` relationship to the `Person` node.
3. **Return the director's name:** Get the `name` property of the `Person` node.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```
</explanation>
```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```",Multi-step Queries,"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name","1. **Match the review:** Start by finding reviews with the summary ""A solid romp"".
2. **Traverse to the movie and director:** Follow the `REVIEWED` relationship to the `Movie` node, then the `DIRECTED` relationship to the `Person` node.
3. **Return the director's name:** Get the `name` property of the `Person` node.

```cypher
MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = ""A solid romp""
MATCH (p:Person)-[:DIRECTED]->(m)
RETURN p.name
```"
"List the titles of movies with ""Pretty funny at times"" reviews released after 1990.",movies,"<explanation>
This query starts by finding movies with reviews that have the summary ""Pretty funny at times"" and filters these movies based on their release year. Finally, the query returns the titles of the filtered movies.

1. **Find movies with specific reviews:**
   - `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)` matches movies (`m`) that have a `REVIEWED` relationship (`r`) with a person (`p`).
   - `WHERE r.summary = ""Pretty funny at times""` filters for reviews with the summary ""Pretty funny at times.""

2. **Filter by release year:**
   - `AND m.released > 1990` further filters the movies to those released after 1990.

3. **Return the movie titles:**
   - `RETURN m.title` returns the `title` property of the filtered movies.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Pretty funny at times""
AND m.released > 1990
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Pretty funny at times""
AND m.released > 1990
RETURN m.title","This query starts by finding movies with reviews that have the summary ""Pretty funny at times"" and filters these movies based on their release year. Finally, the query returns the titles of the filtered movies.

1. **Find movies with specific reviews:**
   - `MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)` matches movies (`m`) that have a `REVIEWED` relationship (`r`) with a person (`p`).
   - `WHERE r.summary = ""Pretty funny at times""` filters for reviews with the summary ""Pretty funny at times.""

2. **Filter by release year:**
   - `AND m.released > 1990` further filters the movies to those released after 1990.

3. **Return the movie titles:**
   - `RETURN m.title` returns the `title` property of the filtered movies."
"Who wrote movies with ""Fun, but a little far fetched"" reviews and released before 2010?",movies,"<explanation>
1. **Match the review:** Start by finding the `REVIEWED` relationships where the `summary` property is ""Fun, but a little far fetched.""
2. **Match the movie and writer:** Traverse to the `Movie` node connected to the `REVIEWED` relationship and further to the `Person` node connected via the `WROTE` relationship.
3. **Filter by release year:** Filter the movies based on the condition that their `released` property is less than 2010.
4. **Return the writer:** Return the `name` property of the `Person` nodes who wrote those movies.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Fun, but a little far fetched"" AND m.released < 2010
RETURN p.name
```
</explanation>
```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Fun, but a little far fetched"" AND m.released < 2010
RETURN p.name
```",Multi-step Queries,"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Fun, but a little far fetched"" AND m.released < 2010
RETURN p.name","1. **Match the review:** Start by finding the `REVIEWED` relationships where the `summary` property is ""Fun, but a little far fetched.""
2. **Match the movie and writer:** Traverse to the `Movie` node connected to the `REVIEWED` relationship and further to the `Person` node connected via the `WROTE` relationship.
3. **Filter by release year:** Filter the movies based on the condition that their `released` property is less than 2010.
4. **Return the writer:** Return the `name` property of the `Person` nodes who wrote those movies.

```cypher
MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""Fun, but a little far fetched"" AND m.released < 2010
RETURN p.name
```"
"What are the release years of movies with ""Dark, but compelling"" reviews and more than 2000 votes?",movies,"<explanation>
1. **Find movies with the specified review**: Look for `REVIEWED` relationships where the `summary` property is ""Dark, but compelling"".
2. **Filter movies by vote count**: Filter the movies from step 1 to only include those with a `votes` property greater than 2000.
3. **Return the release years**: Return the `released` property of the movies that satisfied the previous conditions.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.released
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.released
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.released","1. **Find movies with the specified review**: Look for `REVIEWED` relationships where the `summary` property is ""Dark, but compelling"".
2. **Filter movies by vote count**: Filter the movies from step 1 to only include those with a `votes` property greater than 2000.
3. **Return the release years**: Return the `released` property of the movies that satisfied the previous conditions.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Dark, but compelling"" AND m.votes > 2000
RETURN m.released
```"
Find the taglines of movies acted in by Keanu Reeves and directed by Lana Wachowski.,movies,"<explanation>
1. We start by finding the person with the name 'Keanu Reeves'.
2. Then, we need to find all the movies he acted in using the `ACTED_IN` relationship.
3. Next, we look for movies that were directed by a person named 'Lana Wachowski' using the `DIRECTED` relationship.
4. Finally, we match the movies from steps 2 and 3 and return the `tagline` property of those movies.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
MATCH (lw:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m)
RETURN m.tagline
```
</explanation>
```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
MATCH (lw:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m)
RETURN m.tagline
```",Multi-step Queries,"MATCH (kr:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
MATCH (lw:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m)
RETURN m.tagline","1. We start by finding the person with the name 'Keanu Reeves'.
2. Then, we need to find all the movies he acted in using the `ACTED_IN` relationship.
3. Next, we look for movies that were directed by a person named 'Lana Wachowski' using the `DIRECTED` relationship.
4. Finally, we match the movies from steps 2 and 3 and return the `tagline` property of those movies.

```cypher
MATCH (kr:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(m:Movie)
MATCH (lw:Person {name: 'Lana Wachowski'})-[:DIRECTED]->(m)
RETURN m.tagline
```"
"Which movies directed by people born before 1960 have ""The coolest football movie ever"" reviews?",movies,"<explanation>
1. **Match movies with specific reviews:** Start by finding all movies that have reviews with the summary ""The coolest football movie ever"".
2. **Match directors:**  Then, traverse the `DIRECTED` relationship from those movies to find the directors.
3. **Filter directors by birth year:** Filter the directors based on their birth year, ensuring they were born before 1960.
4. **Return the movie titles:** Finally, return the titles of the movies that meet these criteria.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE reviewer.summary = ""The coolest football movie ever""
MATCH (m)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1960
RETURN m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE reviewer.summary = ""The coolest football movie ever""
MATCH (m)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1960
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE reviewer.summary = ""The coolest football movie ever""
MATCH (m)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1960
RETURN m.title","1. **Match movies with specific reviews:** Start by finding all movies that have reviews with the summary ""The coolest football movie ever"".
2. **Match directors:**  Then, traverse the `DIRECTED` relationship from those movies to find the directors.
3. **Filter directors by birth year:** Filter the directors based on their birth year, ensuring they were born before 1960.
4. **Return the movie titles:** Finally, return the titles of the movies that meet these criteria.

```cypher
MATCH (m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE reviewer.summary = ""The coolest football movie ever""
MATCH (m)<-[:DIRECTED]-(director:Person)
WHERE director.born < 1960
RETURN m.title
```"
Who reviewed movies produced by Joel Silver and released before 2005?,movies,"<explanation>
1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver.""
2. **Movies produced by Joel Silver:** Traverse the `PRODUCED` relationship from ""Joel Silver"" to find all the `Movie` nodes he produced.
3. **Filter by release year:** Filter these movies to only include those released before 2005.
4. **Find reviewers:** Traverse the `REVIEWED` relationship from the filtered movies to find the `Person` nodes who reviewed them.
5. **Return reviewer names:** Return the `name` property of these reviewers.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2005
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN DISTINCT r.name
```
</explanation>
```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2005
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN DISTINCT r.name
```",Multi-step Queries,"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2005
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN DISTINCT r.name","1. **Find Joel Silver:** Start by finding the `Person` node with the name ""Joel Silver.""
2. **Movies produced by Joel Silver:** Traverse the `PRODUCED` relationship from ""Joel Silver"" to find all the `Movie` nodes he produced.
3. **Filter by release year:** Filter these movies to only include those released before 2005.
4. **Find reviewers:** Traverse the `REVIEWED` relationship from the filtered movies to find the `Person` nodes who reviewed them.
5. **Return reviewer names:** Return the `name` property of these reviewers.

```cypher
MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE m.released < 2005
MATCH (r:Person)-[:REVIEWED]->(m)
RETURN DISTINCT r.name
```"
"What are the summaries of reviews for movies with taglines containing the word ""Welcome""?",movies,"<explanation>
1. **Find movies with ""Welcome"" in the tagline:**
   - Start with `MATCH (m:Movie)` to find all movies.
   - Use `WHERE m.tagline CONTAINS 'Welcome'` to filter for movies containing ""Welcome"" in their tagline.

2. **Find reviews for those movies:**
   - Use `MATCH (p:Person)-[r:REVIEWED]->(m)` to find all reviews related to those movies.

3. **Return the review summaries:**
   - Use `RETURN r.summary` to return the summary of each review.
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Welcome'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Welcome'
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.summary","1. **Find movies with ""Welcome"" in the tagline:**
   - Start with `MATCH (m:Movie)` to find all movies.
   - Use `WHERE m.tagline CONTAINS 'Welcome'` to filter for movies containing ""Welcome"" in their tagline.

2. **Find reviews for those movies:**
   - Use `MATCH (p:Person)-[r:REVIEWED]->(m)` to find all reviews related to those movies.

3. **Return the review summaries:**
   - Use `RETURN r.summary` to return the summary of each review."
Find the names of people who produced and directed movies released after 2000.,movies,"<explanation>
This query starts by finding all movies released after 2000. It then matches people who both directed and produced each of those movies. Finally, it returns the names of those people.

1. **Find movies released after 2000**: `MATCH (m:Movie) WHERE m.released > 2000`
2. **Match people who directed those movies**: `MATCH (p:Person)-[:DIRECTED]->(m)`
3. **Match people who also produced those movies**: `MATCH (p)-[:PRODUCED]->(m)`
4. **Return the names of those people**: `RETURN DISTINCT p.name`
</explanation>
```cypher
MATCH (m:Movie) WHERE m.released > 2000
MATCH (p:Person)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name
```",Multi-step Queries,"MATCH (m:Movie) WHERE m.released > 2000
MATCH (p:Person)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN DISTINCT p.name","This query starts by finding all movies released after 2000. It then matches people who both directed and produced each of those movies. Finally, it returns the names of those people.

1. **Find movies released after 2000**: `MATCH (m:Movie) WHERE m.released > 2000`
2. **Match people who directed those movies**: `MATCH (p:Person)-[:DIRECTED]->(m)`
3. **Match people who also produced those movies**: `MATCH (p)-[:PRODUCED]->(m)`
4. **Return the names of those people**: `RETURN DISTINCT p.name`"
"Which movies with ""You had me at Jerry"" reviews have more than 1000 votes and were released before 2005?",movies,"<explanation>
1. **Match reviewed movies:** Start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship where the `summary` property is ""You had me at Jerry"".
2. **Filter by votes and release year:** Apply `WHERE` clauses to filter the matched movies based on the criteria that they have more than 1000 `votes` and were `released` before 2005.
3. **Return the movie titles:** Finally, `RETURN` the `title` property of the filtered `Movie` nodes.

This query effectively identifies movies that meet all three criteria: a ""You had me at Jerry"" review, over 1000 votes, and a release date before 2005.
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""You had me at Jerry"" AND m.votes > 1000 AND m.released < 2005
RETURN m.title
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-()
WHERE r.summary = ""You had me at Jerry"" AND m.votes > 1000 AND m.released < 2005
RETURN m.title","1. **Match reviewed movies:** Start by matching all `Movie` nodes that have an incoming `REVIEWED` relationship where the `summary` property is ""You had me at Jerry"".
2. **Filter by votes and release year:** Apply `WHERE` clauses to filter the matched movies based on the criteria that they have more than 1000 `votes` and were `released` before 2005.
3. **Return the movie titles:** Finally, `RETURN` the `title` property of the filtered `Movie` nodes.

This query effectively identifies movies that meet all three criteria: a ""You had me at Jerry"" review, over 1000 votes, and a release date before 2005."
"Who directed movies with ""An amazing journey"" reviews released after 2000?",movies,"<explanation>
1. **Match reviewed movies:** Find all `Movie` nodes connected to a `Person` node via the `REVIEWED` relationship with the summary ""An amazing journey"".
2. **Filter by release year:** Filter the matched movies to only include those released after 2000.
3. **Match directors:** Find `Person` nodes connected to the filtered movies via the `DIRECTED` relationship.
4. **Return directors:** Return the `name` property of the directors.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2000 AND p.summary = ""An amazing journey""
WITH DISTINCT m
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN d.name
```
</explanation>",Multi-step Queries,"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2000 AND p.summary = ""An amazing journey""
WITH DISTINCT m
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN d.name","1. **Match reviewed movies:** Find all `Movie` nodes connected to a `Person` node via the `REVIEWED` relationship with the summary ""An amazing journey"".
2. **Filter by release year:** Filter the matched movies to only include those released after 2000.
3. **Match directors:** Find `Person` nodes connected to the filtered movies via the `DIRECTED` relationship.
4. **Return directors:** Return the `name` property of the directors.

```cypher
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2000 AND p.summary = ""An amazing journey""
WITH DISTINCT m
MATCH (d:Person)-[:DIRECTED]->(m)
RETURN d.name
```"
"What are the taglines of movies with ""Silly, but fun"" reviews and directed by people born before 1960?",movies,"<explanation>
1. **MATCH** the movies that have reviews with the summary ""Silly, but fun"".
2. **MATCH** the directors of those movies who were born before 1960.
3. **RETURN** the taglines of the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1960
RETURN DISTINCT m.tagline
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1960
RETURN DISTINCT m.tagline
```",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1960
RETURN DISTINCT m.tagline","1. **MATCH** the movies that have reviews with the summary ""Silly, but fun"".
2. **MATCH** the directors of those movies who were born before 1960.
3. **RETURN** the taglines of the matched movies.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""Silly, but fun""
MATCH (m)<-[:DIRECTED]-(d:Person)
WHERE d.born < 1960
RETURN DISTINCT m.tagline
```"
Find the names of people who wrote movies released after 1995 with ratings between 90 and 100.,movies,"<explanation>
This query starts by finding all movies released after 1995 with a rating between 90 and 100. Then, it traverses the `WROTE` relationship backwards to find the people who wrote those movies and returns their names.
</explanation>
```cypher
MATCH (m:Movie)<-[r:WROTE]-(p:Person)
WHERE m.released > 1995
AND EXISTS((p)-[:REVIEWED]->(m))
AND ALL(review IN [(p)-[:REVIEWED]->(m)] WHERE review.rating >= 90 AND review.rating <=100)
RETURN p.name
```",Multi-step Queries,"MATCH (m:Movie)<-[r:WROTE]-(p:Person)
WHERE m.released > 1995
AND EXISTS((p)-[:REVIEWED]->(m))
AND ALL(review IN [(p)-[:REVIEWED]->(m)] WHERE review.rating >= 90 AND review.rating <=100)
RETURN p.name","This query starts by finding all movies released after 1995 with a rating between 90 and 100. Then, it traverses the `WROTE` relationship backwards to find the people who wrote those movies and returns their names."
"Which movies produced by people born after 1955 have ""A solid romp"" reviews and more than 500 votes?",movies,"<explanation>
1. **Find movies with specific reviews:** We start by finding all movies with the review summary ""A solid romp"".
2. **Filter by votes:** From the movies found in the previous step, filter for those with more than 500 votes.
3. **Find producers born after 1955:**  Identify the producers of the remaining movies and keep only those born after 1955. 
4. **Return the movie titles:** Finally, return the titles of the movies that meet all the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.votes > 500
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE producer.born > 1955
RETURN DISTINCT m.title
```
</explanation>
```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.votes > 500
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE producer.born > 1955
RETURN DISTINCT m.title
```
",Multi-step Queries,"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.votes > 500
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE producer.born > 1955
RETURN DISTINCT m.title","1. **Find movies with specific reviews:** We start by finding all movies with the review summary ""A solid romp"".
2. **Filter by votes:** From the movies found in the previous step, filter for those with more than 500 votes.
3. **Find producers born after 1955:**  Identify the producers of the remaining movies and keep only those born after 1955. 
4. **Return the movie titles:** Finally, return the titles of the movies that meet all the criteria.

```cypher
MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary = ""A solid romp"" AND m.votes > 500
MATCH (m)<-[:PRODUCED]-(producer:Person)
WHERE producer.born > 1955
RETURN DISTINCT m.title
```"
Who acted in movies directed by Lana Wachowski and released before 2005?,movies,"<explanation>
1. We need to find persons who acted in movies. So we start by matching `(:Person)-[:ACTED_IN]->(:Movie)`
2. We need to filter movies to those directed by ""Lana Wachowski"". So we extend our match to `(:Person)-[:ACTED_IN]->(:Movie)<-[:DIRECTED]-(:Person)` and add a WHERE clause to filter the director's name.
3. We need to find movies released before 2005. So we add another WHERE clause to filter by the `released` property of the movie.
4. Finally, we return the names of the actors.

```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.name = ""Lana Wachowski"" AND movie.released < 2005
RETURN DISTINCT actor.name
```
</explanation>
```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.name = ""Lana Wachowski"" AND movie.released < 2005
RETURN DISTINCT actor.name
```",Multi-step Queries,"MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.name = ""Lana Wachowski"" AND movie.released < 2005
RETURN DISTINCT actor.name","1. We need to find persons who acted in movies. So we start by matching `(:Person)-[:ACTED_IN]->(:Movie)`
2. We need to filter movies to those directed by ""Lana Wachowski"". So we extend our match to `(:Person)-[:ACTED_IN]->(:Movie)<-[:DIRECTED]-(:Person)` and add a WHERE clause to filter the director's name.
3. We need to find movies released before 2005. So we add another WHERE clause to filter by the `released` property of the movie.
4. Finally, we return the names of the actors.

```cypher
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Person)
WHERE director.name = ""Lana Wachowski"" AND movie.released < 2005
RETURN DISTINCT actor.name
```"
"What are the ratings given for movies with taglines containing the word ""Real"" and released after 1990?",movies,"<explanation>
1. **Match movies:** Start by matching all `Movie` nodes.
2. **Filter on tagline and released year:** Filter these movies based on the conditions:
    - The `tagline` property contains the word ""Real"" (using the `CONTAINS` operator).
    - The `released` property is greater than 1990.
3. **Match reviewers:** Match the `Person` nodes who have `REVIEWED` these movies.
4. **Return ratings:** Return the `rating` property from the `REVIEWED` relationships.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real' AND m.released > 1990
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.rating
```
</explanation>
```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real' AND m.released > 1990
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.rating
```",Multi-step Queries,"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real' AND m.released > 1990
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.rating","1. **Match movies:** Start by matching all `Movie` nodes.
2. **Filter on tagline and released year:** Filter these movies based on the conditions:
    - The `tagline` property contains the word ""Real"" (using the `CONTAINS` operator).
    - The `released` property is greater than 1990.
3. **Match reviewers:** Match the `Person` nodes who have `REVIEWED` these movies.
4. **Return ratings:** Return the `rating` property from the `REVIEWED` relationships.

```cypher
MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real' AND m.released > 1990
MATCH (p:Person)-[r:REVIEWED]->(m)
RETURN r.rating
```"
